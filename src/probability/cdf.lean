/-
Copyright (c) 2022 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/

import measure_theory.constructions.borel_space
import measure_theory.measure.stieltjes

/-!
# Cdf

## Main definitions

* `foo_bar`

## Main statements

* `foo_bar_unique`

-/


open measure_theory topological_space set measure_theory.measure filter

open_locale topological_space ennreal

lemma right_lim_eq_of_tendsto {Œ± Œ≤ : Type*} [linear_order Œ±] [topological_space Œ≤]
  [hŒ± : topological_space Œ±] [h'Œ± : order_topology Œ±] [t2_space Œ≤]
  {f : Œ± ‚Üí Œ≤} {a : Œ±} {y : Œ≤} (h : ùìù[>] a ‚â† ‚ä•) (h' : tendsto f (ùìù[>] a) (ùìù y)) :
  function.right_lim f a = y :=
@left_lim_eq_of_tendsto Œ±·µí·µà Œ≤ _ _ _ _ _ _ _ _ h h'

section cdf

lemma monotone_measure_Iic {Œ± : Type*} {m : measurable_space Œ±} (Œº : measure Œ±)
  [preorder Œ±] [is_finite_measure Œº] :
  monotone (Œª x, (Œº (Iic x)).to_real) :=
begin
  intros x y hxy,
  refine (ennreal.to_real_le_to_real (measure_ne_top Œº _) (measure_ne_top Œº _)).mpr _,
  exact measure_mono (Œª a ha, le_trans ha hxy),
end

lemma measure_Iic_eq_add_of_le {Œ± : Type*} {m : measurable_space Œ±} {Œº : measure Œ±}
  [linear_order Œ±] [topological_space Œ±] [opens_measurable_space Œ±] [order_closed_topology Œ±]
  [is_finite_measure Œº] {x y : Œ±} (h : x ‚â§ y) :
  (Œº (Iic y)).to_real = (Œº (Iic x)).to_real + (Œº (Ioc x y)).to_real :=
begin
  rw [‚Üê Iic_union_Ioc_eq_Iic h, measure_union _ (measurable_set_Ioc : measurable_set (Ioc x y))],
  { exact ennreal.to_real_add (measure_ne_top Œº _) (measure_ne_top Œº _), },
  { rw set.disjoint_iff,
    intro z,
    simp only [mem_inter_iff, mem_Iic, mem_Ioc, mem_empty_iff_false, and_imp],
    exact Œª hzx hxz _, lt_irrefl _ (hzx.trans_lt hxz), },
end

lemma tendsto_measure_Ioc_zero (Œº : measure ‚Ñù) [is_finite_measure Œº] (x : ‚Ñù) :
  tendsto (Œª y, Œº (Ioc x y)) (ùìù[Ioi x] x) (ùìù 0) :=
begin
  have h := @tendsto_measure_bInter_gt ‚Ñù _ Œº ‚Ñù _ _ _ _ _ (Œª y, Ioc x y) x
    (Œª _ _, measurable_set_Ioc) _ ‚ü®x+1, lt_add_one _, measure_ne_top Œº _‚ü©,
  swap,
  { intros i j hxi hij y hy,
    dsimp only at hy ‚ä¢,
    rw mem_Ioc at hy ‚ä¢,
    exact ‚ü®hy.1, hy.2.trans hij‚ü©, },
  dsimp at h,
  have : (‚ãÇ r (H : x < r), Ioc x r) = ‚àÖ,
  { ext1 y,
    simp only [mem_Inter, mem_Ioc, mem_empty_iff_false, iff_false, not_forall, not_and, not_le,
      exists_prop],
    cases le_or_lt y x with h' h',
    { exact ‚ü®x+1, lt_add_one _, Œª hxy, absurd hxy (not_lt.mpr h')‚ü©, },
    { exact ‚ü®(x + y)/2, by linarith, Œª _, by linarith‚ü©, }, },
  rwa [this, measure_empty] at h,
end

lemma tendsto_measure_Iic (Œº : measure ‚Ñù) [is_finite_measure Œº] (x : ‚Ñù) :
  tendsto (Œª x, (Œº (Iic x)).to_real) (ùìù[>] x) (ùìù (Œº (Iic x)).to_real) :=
begin
  have h_add : ‚àÄ y, x ‚â§ y ‚Üí (Œº (Iic y)).to_real = (Œº (Iic x)).to_real+ (Œº (Ioc x y)).to_real,
  { intros y hxy,
    exact measure_Iic_eq_add_of_le hxy, },
  suffices : tendsto (Œª y, (Œº (Iic x)).to_real + (Œº (Ioc x y)).to_real) (ùìù[>] x)
    (ùìù ((Œº (Iic x)).to_real)),
  { refine (tendsto_congr' _).mpr this,
    rw [eventually_eq, eventually_nhds_within_iff],
    refine eventually_of_forall (Œª z hz, measure_Iic_eq_add_of_le _),
    rw mem_Ioi at hz,
    exact hz.le, },
  rw ‚Üê add_zero (Œº (Iic x)).to_real,
  refine tendsto.add _ _,
  { rw add_zero, exact tendsto_const_nhds, },
  { rw [‚Üê ennreal.zero_to_real, ennreal.tendsto_to_real_iff _ ennreal.zero_ne_top],
    { exact tendsto_measure_Ioc_zero Œº x, },
    { exact Œª i, measure_ne_top Œº _, }, },
end

lemma right_lim_measure_Iic (Œº : measure ‚Ñù) [is_finite_measure Œº] (x : ‚Ñù) :
  function.right_lim (Œª y, (Œº (Iic y)).to_real) x = (Œº (Iic x)).to_real :=
begin
  refine right_lim_eq_of_tendsto _ _,
  { rw ‚Üê ne_bot_iff,
    apply_instance, },
  { exact tendsto_measure_Iic Œº x, },
end

/-- Cumulative distribution function of a real measure. -/
noncomputable
def cdf (Œº : measure ‚Ñù) [is_finite_measure Œº] : stieltjes_function :=
monotone.stieltjes_function (monotone_measure_Iic Œº)

lemma cdf_apply (Œº : measure ‚Ñù) [is_finite_measure Œº] (x : ‚Ñù) :
  cdf Œº x = (Œº (Iic x)).to_real :=
by rw [cdf, monotone.stieltjes_function_eq, right_lim_measure_Iic]

lemma cdf_inj {Œº ŒΩ : measure ‚Ñù} [is_finite_measure Œº] [is_finite_measure ŒΩ] :
  cdf Œº = cdf ŒΩ ‚Üî Œº = ŒΩ :=
begin
  refine ‚ü®Œª h, ext_of_Iic Œº ŒΩ (Œª x, _), Œª h, by simp_rw h‚ü©,
  refine (ennreal.to_real_eq_to_real (measure_ne_top Œº _) (measure_ne_top ŒΩ _)).mp _,
  have hx : cdf Œº x = cdf ŒΩ x, by rw h,
  simpa only [cdf_apply] using hx,
end

lemma measure_cdf (Œº : measure ‚Ñù) [is_finite_measure Œº] :
  (cdf Œº).measure = Œº :=
begin
  refine ext_of_Ioc _ _ (Œª x y hxy, _),
  rw stieltjes_function.measure_Ioc,
  simp_rw [cdf_apply],
  rw [measure_Iic_eq_add_of_le hxy.le, add_sub_cancel',
    ennreal.of_real_to_real (measure_ne_top Œº _)],
  apply_instance,
  apply_instance,
end

end cdf
