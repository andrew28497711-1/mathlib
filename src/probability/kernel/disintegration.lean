/-
Copyright (c) 2023 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import measure_theory.constructions.borel_space
import measure_theory.measure.stieltjes
import probability.kernel.invariance
import measure_theory.decomposition.radon_nikodym

/-!
# Disintegration of measures

## Main definitions

* `foo_bar`

## Main statements

* `foo_bar_unique`

-/

open measure_theory set filter

open_locale ennreal measure_theory topology

namespace probability_theory

variables {Œ± Œ≤ Œπ : Type*} {mŒ± : measurable_space Œ±}

lemma image_fst_prod (s : set Œ±) (t : set Œ≤) (ht : t.nonempty) :
  prod.fst '' s √óÀ¢ t = s :=
begin
  ext1 x,
  simp only [mem_image, mem_prod, prod.exists, exists_and_distrib_right,
    exists_and_distrib_left, exists_eq_right, and_iff_left_iff_imp],
  exact Œª _, ht,
end

lemma to_real_infi (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (hf : ‚àÄ a, f a ‚â† ‚àû) :
  (‚®Ö i, f i).to_real = ‚®Ö i, (f i).to_real :=
begin
  casesI is_empty_or_nonempty Œ±,
  { -- todo: real.cinfi_empty should be a simp lemma
    simp only [with_top.cinfi_empty, ennreal.top_to_real, real.cinfi_empty], },
  have h_ne_top : (‚®Ö i, f i) ‚â† ‚àû,
  { refine ne_of_lt (lt_of_le_of_lt _ (hf h.some).lt_top),
    exact infi_le _ _, },
  refine le_antisymm _ _,
  { refine le_cinfi (Œª a, (ennreal.to_real_le_to_real h_ne_top (hf a)).mpr _),
    exact infi_le _ _, },
  {
    sorry, },
end

lemma is_pi_system_Ioc_rat : @is_pi_system ‚Ñù {S | ‚àÉ (l u : ‚Ñö) (h : l < u), Ioc (l : ‚Ñù) u = S} :=
begin
  rintros s ‚ü®ls, us, hlus, rfl‚ü© t ‚ü®lt, ut, hlut, rfl‚ü© hst,
  rw [Ioc_inter_Ioc, sup_eq_max, inf_eq_min] at hst ‚ä¢,
  refine ‚ü®max ls lt, min us ut, _, _‚ü©,
  { rw [nonempty_Ioc] at hst,
    exact_mod_cast hst, },
  { norm_cast, },
end

lemma is_pi_system_Iic_rat : @is_pi_system ‚Ñù {S | ‚àÉ (u : ‚Ñö), Iic (u : ‚Ñù) = S} :=
begin
  rintros s ‚ü®us, rfl‚ü© t ‚ü®ut, rfl‚ü© hst,
  rw [Iic_inter_Iic, inf_eq_min] at hst ‚ä¢,
  refine ‚ü®min us ut, _‚ü©,
  norm_cast,
end

lemma borel_eq_generate_from_Ioc_rat :
  borel ‚Ñù
    = measurable_space.generate_from {S : set ‚Ñù | ‚àÉ (l u : ‚Ñö) (h : l < u), Ioc ‚Üël ‚Üëu = S} :=
begin
  refine le_antisymm _ _,
  swap,
  { refine measurable_space.generate_from_le (Œª t ht, _),
    obtain ‚ü®l, u, hlu, rfl‚ü© := ht,
    exact measurable_set_Ioc, },
  rw real.borel_eq_generate_from_Ioo_rat,
  refine measurable_space.generate_from_le (Œª t ht, _),
  simp_rw mem_Union at ht,
  obtain ‚ü®l, u, hlu, ht‚ü© := ht,
  rw mem_singleton_iff at ht,
  have : t = ‚ãÉ (r : Iio u), Ioc l r,
  { rw ht,
    ext1 x,
    simp only [mem_Ioo, coe_coe, Union_coe_set, mem_Iio, subtype.coe_mk, mem_Union, mem_Ioc,
      exists_prop],
    refine ‚ü®Œª h, _, Œª h, _‚ü©,
    { obtain ‚ü®r, hxr, hru‚ü© := exists_rat_btwn h.2,
      exact ‚ü®r, by exact_mod_cast hru, h.1, hxr.le‚ü©, },
    { obtain ‚ü®r, hru, hlx, hxr‚ü© := h,
      refine ‚ü®hlx, hxr.trans_lt _‚ü©,
      exact_mod_cast hru, }, },
  rw this,
  refine measurable_set.Union (Œª r, _),
  by_cases hlr : l < r,
  { exact measurable_space.measurable_set_generate_from ‚ü®l, r, hlr, rfl‚ü©, },
  { rw Ioc_eq_empty,
    { exact @measurable_set.empty _
      (measurable_space.generate_from {S : set ‚Ñù | ‚àÉ (l u : ‚Ñö) (h : l < u), Ioc ‚Üël ‚Üëu = S}), },
    { exact_mod_cast hlr, }, },
end

lemma borel_eq_generate_from_Iic_rat :
  borel ‚Ñù
    = measurable_space.generate_from {S : set ‚Ñù | ‚àÉ (u : ‚Ñö), Iic ‚Üëu = S} :=
begin
  refine le_antisymm _ _,
  swap,
  { refine measurable_space.generate_from_le (Œª t ht, _),
    obtain ‚ü®l, u, hlu, rfl‚ü© := ht,
    exact measurable_set_Iic, },
  rw borel_eq_generate_from_Ioc_rat,
  refine measurable_space.generate_from_le (Œª t ht, _),
  obtain ‚ü®l, u, hlu, rfl‚ü© := ht,
  have : Ioc (l : ‚Ñù) u = Iic u \ Iic l,
  { ext1 x,
    simp only [Iic_diff_Iic], },
  rw this,
  refine measurable_set.diff _ _,
  { exact measurable_space.measurable_set_generate_from ‚ü®u, rfl‚ü©, },
  { exact measurable_space.measurable_set_generate_from ‚ü®l, rfl‚ü©, },
end

include mŒ±

noncomputable
def todo_r (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) : measure Œ± :=
measure.of_measurable (Œª s hs, œÅ (s √óÀ¢ (Iic r))) (by simp only [empty_prod, measure_empty])
  (Œª f hf_meas hf_disj,
  begin
    rw [set.Union_prod_const, measure_Union],
    { intros i j hij,
      rw [function.on_fun, disjoint_prod],
      exact or.inl (hf_disj hij), },
    { exact Œª i, measurable_set.prod (hf_meas i) measurable_set_Iic, }
  end)

lemma todo_r_apply (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) {s : set Œ±} (hs : measurable_set s) :
  todo_r œÅ r s = œÅ (s √óÀ¢ Iic r) :=
measure.of_measurable_apply s hs

lemma todo_r_mono (œÅ : measure (Œ± √ó ‚Ñù)) {r r' : ‚Ñö} (h_le : r ‚â§ r') :
  todo_r œÅ r ‚â§ todo_r œÅ r' :=
begin
  intros s hs,
  simp_rw todo_r_apply œÅ _ hs,
  refine measure_mono (Œª x hx, _),
  simp only [mem_preimage, mem_prod, mem_Iic] at hx ‚ä¢,
  refine ‚ü®hx.1, hx.2.trans _‚ü©,
  exact_mod_cast h_le,
end

lemma todo_r_univ (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) : todo_r œÅ r univ = œÅ (univ √óÀ¢ Iic r) :=
by rw [todo_r_apply œÅ r measurable_set.univ]

noncomputable
def todo (œÅ : measure (Œ± √ó ‚Ñù)) : measure Œ± := œÅ.map prod.fst

lemma todo_univ (œÅ : measure (Œ± √ó ‚Ñù)) : todo œÅ univ = œÅ univ :=
by rw [todo, measure.map_apply measurable_fst measurable_set.univ, preimage_univ]

lemma todo_r_le_todo (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) : todo_r œÅ r ‚â§ todo œÅ :=
begin
  intros s hs,
  simp_rw [todo, todo_r_apply œÅ r hs, measure.map_apply measurable_fst hs],
  refine measure_mono (Œª x hx, _),
  simp only [mem_preimage, mem_prod, mem_Iic] at hx ‚ä¢,
  exact hx.1,
end

lemma todo_r_ac_todo (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) : todo_r œÅ r ‚â™ todo œÅ :=
measure.absolutely_continuous_of_le (todo_r_le_todo œÅ r)

instance {œÅ : measure (Œ± √ó ‚Ñù)} [is_finite_measure œÅ] : is_finite_measure (todo œÅ) :=
by { rw todo, apply_instance, }

instance {œÅ : measure (Œ± √ó ‚Ñù)} [is_finite_measure œÅ] (r : ‚Ñö) : is_finite_measure (todo_r œÅ r) :=
is_finite_measure_of_le _ (todo_r_le_todo œÅ _)

lemma infi_todo_r_gt (œÅ : measure (Œ± √ó ‚Ñù)) (t : ‚Ñö) {s : set Œ±} (hs : measurable_set s)
  [is_finite_measure œÅ] :
  (‚®Ö r : {r' : ‚Ñö // t < r'}, todo_r œÅ r s) = todo_r œÅ t s :=
begin
  simp_rw [todo_r_apply œÅ _ hs],
  rw ‚Üê measure_Inter_eq_infi,
  { congr,
    ext1 x,
    simp only [coe_coe, mem_Inter, mem_prod, mem_Iic, subtype.forall, subtype.coe_mk],
    refine ‚ü®Œª h, _, Œª h a hta, ‚ü®h.1, h.2.trans _‚ü©‚ü©,
    { refine ‚ü®(h (t+1) (lt_add_one _)).1, _‚ü©,
      refine le_of_forall_lt_rat_imp_le (Œª q htq, (h q _).2),
      exact_mod_cast htq, },
    { exact_mod_cast hta.le, }, },
  { exact Œª _, hs.prod measurable_set_Iic, },
  { refine (Œª r r', ‚ü®min r r', Œª x, _, Œª x, _‚ü©);
      simp only [coe_coe, mem_prod, mem_Iic, and_imp];
      refine Œª hxs hx_min, ‚ü®hxs, hx_min.trans _‚ü©,
    { exact_mod_cast (min_le_left r r'), },
    { exact_mod_cast (min_le_right r r'), }, },
  { exact ‚ü®‚ü®t+1, lt_add_one _‚ü©, measure_ne_top œÅ _‚ü©, },
end

noncomputable
def rnd_r (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) : Œ± ‚Üí ‚Ñù‚â•0‚àû := measure.rn_deriv (todo_r œÅ r) (todo œÅ)

lemma with_density_rnd_r (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) [is_finite_measure œÅ] :
  (todo œÅ).with_density (rnd_r œÅ r) = todo_r œÅ r :=
measure.absolutely_continuous_iff_with_density_rn_deriv_eq.mp (todo_r_ac_todo œÅ r)

lemma set_lintegral_rnd_r_todo (œÅ : measure (Œ± √ó ‚Ñù)) (r : ‚Ñö) {s : set Œ±} (hs : measurable_set s)
  [is_finite_measure œÅ] :
  ‚à´‚Åª x in s, rnd_r œÅ r x ‚àÇ(todo œÅ) = todo_r œÅ r s :=
begin
  have : ‚àÄ r, ‚à´‚Åª x in s, rnd_r œÅ r x ‚àÇ(todo œÅ) = ‚à´‚Åª x in s, (rnd_r œÅ r * 1) x ‚àÇ(todo œÅ),
  { simp only [mul_one, eq_self_iff_true, forall_const], },
  rw [this, ‚Üê set_lintegral_with_density_eq_set_lintegral_mul _ _ _ hs],
  { rw with_density_rnd_r œÅ r,
    simp only [pi.one_apply, lintegral_one, measure.restrict_apply, measurable_set.univ,
      univ_inter], },
  { exact measure.measurable_rn_deriv _ _, },
  { rw (_ : (1 : Œ± ‚Üí ‚Ñù‚â•0‚àû) = (Œª _, 1)),
    { exact measurable_const, },
    { refl, }, },
end

lemma set_lintegral_infi_gt_rnd_r (œÅ : measure (Œ± √ó ‚Ñù)) (t : ‚Ñö) {s : set Œ±} (hs : measurable_set s)
  [is_finite_measure œÅ] :
  ‚à´‚Åª x in s, ‚®Ö r : Ioi t, rnd_r œÅ r x ‚àÇ(todo œÅ) = todo_r œÅ t s :=
calc ‚à´‚Åª x in s, ‚®Ö r : Ioi t, rnd_r œÅ r x ‚àÇ(todo œÅ)
    = ‚®Ö r : Ioi t, ‚à´‚Åª x in s, rnd_r œÅ r x ‚àÇ(todo œÅ) :
  begin
    sorry,
  end
... = ‚®Ö r : Ioi t, todo_r œÅ r s :
  by { congr' with r : 1, exact set_lintegral_rnd_r_todo œÅ r hs, }
... = todo_r œÅ t s : infi_todo_r_gt œÅ t hs

lemma rnd_r_mono (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), monotone (Œª r, rnd_r œÅ r a) :=
begin
  simp_rw [monotone, ae_all_iff],
  intros r r' hrr',
  refine ae_le_of_forall_set_lintegral_le_of_sigma_finite _ _ _,
  { exact measure.measurable_rn_deriv _ _, },
  { exact measure.measurable_rn_deriv _ _, },
  { intros s hs hs_fin,
    rw [set_lintegral_rnd_r_todo œÅ r hs, set_lintegral_rnd_r_todo œÅ r' hs],
    refine todo_r_mono œÅ _ s hs,
    exact_mod_cast hrr', },
end

lemma rnd_r_le_one (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), ‚àÄ r, rnd_r œÅ r a ‚â§ 1 :=
begin
  rw ae_all_iff,
  intros r,
  refine ae_le_of_forall_set_lintegral_le_of_sigma_finite _ measurable_const _,
  { exact measure.measurable_rn_deriv _ _, },
  intros s hs hs_fin,
  rw set_lintegral_rnd_r_todo œÅ r hs,
  simp only [pi.one_apply, lintegral_one, measure.restrict_apply, measurable_set.univ, univ_inter],
  exact todo_r_le_todo œÅ r s hs,
end

lemma tendsto_todo_r_at_top (œÅ : measure (Œ± √ó ‚Ñù))
  {s : set Œ±} (hs : measurable_set s) :
  tendsto (Œª r, todo_r œÅ r s) at_top (ùìù (todo œÅ s)) :=
begin
  simp_rw [todo_r, todo, measure.of_measurable_apply _ hs,
    measure.map_apply measurable_fst hs, ‚Üê prod_univ],
  have : s √óÀ¢ univ = ‚ãÉ r : ‚Ñö, (s √óÀ¢ Iic (r : ‚Ñù)),
  { ext1 x,
    simp only [mem_prod, mem_univ, and_true, mem_Union, mem_Iic, exists_and_distrib_left,
      iff_self_and],
    refine Œª _, _,
    obtain ‚ü®r, hr‚ü© := exists_rat_gt x.snd,
    exact ‚ü®r, hr.le‚ü©, },
  rw this,
  refine tendsto_measure_Union (Œª r q hr_le_q x, _),
  simp only [mem_prod, mem_Iic, and_imp],
  refine Œª hxs hxr, ‚ü®hxs, hxr.trans _‚ü©,
  exact_mod_cast hr_le_q,
end

lemma tendsto_todo_r_at_bot (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ]
  {s : set Œ±} (hs : measurable_set s) :
  tendsto (Œª r, todo_r œÅ r s) at_bot (ùìù 0) :=
begin
  simp_rw [todo_r, measure.of_measurable_apply _ hs],
  have h_empty : œÅ (s √óÀ¢ ‚àÖ) = 0,
  { simp only [prod_empty, measure_empty], },
  rw ‚Üê h_empty,
  have : s √óÀ¢ ‚àÖ = ‚ãÇ r : ‚Ñö, (s √óÀ¢ Iic (r : ‚Ñù)),
  { ext1 x,
    simp only [prod_empty, mem_empty_iff_false, mem_Inter, mem_prod, mem_Iic, false_iff, not_forall,
      not_and, not_le],
    obtain ‚ü®r, hr‚ü© := exists_rat_lt x.snd,
    exact ‚ü®r, Œª _, hr‚ü©, },
  rw this,
  suffices h_neg : tendsto (Œª r : ‚Ñö, œÅ (s √óÀ¢ Iic (‚Üë-r))) at_top (ùìù (œÅ (‚ãÇ r : ‚Ñö, s √óÀ¢ Iic (‚Üë-r)))),
  { have h_inter_eq : (‚ãÇ r : ‚Ñö, s √óÀ¢ Iic (‚Üë-r)) = (‚ãÇ r : ‚Ñö, s √óÀ¢ Iic (r : ‚Ñù)),
    { ext1 x,
      simp only [rat.cast_eq_id, id.def, mem_Inter, mem_prod, mem_Iic],
      refine ‚ü®Œª h i, ‚ü®(h i).1, _‚ü©, Œª h i, ‚ü®(h i).1, _‚ü©‚ü©; have h' := h (-i),
      { rw neg_neg at h', exact h'.2, },
      { exact h'.2, }, },
    rw h_inter_eq at h_neg,
    have h_fun_eq : (Œª (r : ‚Ñö), œÅ (s √óÀ¢ Iic (r : ‚Ñù))) = (Œª (r : ‚Ñö), œÅ (s √óÀ¢ Iic ‚Üë(- -r))),
    { simp_rw neg_neg, },
    rw h_fun_eq,
    exact h_neg.comp tendsto_neg_at_bot_at_top, },
  refine tendsto_measure_Inter (Œª q, hs.prod measurable_set_Iic) _ ‚ü®0, measure_ne_top œÅ _‚ü©,
  intros q r hqr x,
  simp only [mem_prod, mem_Iic, and_imp, rat.cast_neg],
  refine Œª hxs hxr, ‚ü®hxs, hxr.trans (neg_le_neg _)‚ü©,
  exact_mod_cast hqr,
end

lemma tendsto_lintegral_rnd_r_at_top (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  tendsto (Œª r, ‚à´‚Åª a, rnd_r œÅ r a ‚àÇ(todo œÅ)) at_top (ùìù (œÅ univ)) :=
begin
  suffices : tendsto (Œª r, todo_r œÅ r univ) at_top (ùìù (todo œÅ univ)),
  { convert this,
    { ext1 r,
      rw [‚Üê set_lintegral_univ, set_lintegral_rnd_r_todo œÅ _ measurable_set.univ], },
    { exact (todo_univ œÅ).symm }, },
  exact tendsto_todo_r_at_top œÅ measurable_set.univ,
end

lemma tendsto_lintegral_rnd_r_at_top' (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  tendsto (Œª r, ‚à´‚Åª a, rnd_r œÅ r a ‚àÇ(todo œÅ)) at_top (ùìù (‚à´‚Åª a, 1 ‚àÇ(todo œÅ))) :=
begin
  convert tendsto_lintegral_rnd_r_at_top œÅ,
  rw [lintegral_one, todo_univ],
end

lemma tendsto_lintegral_rnd_r_at_bot (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  tendsto (Œª r, ‚à´‚Åª a, rnd_r œÅ r a ‚àÇ(todo œÅ)) at_bot (ùìù 0) :=
begin
  suffices : tendsto (Œª r, todo_r œÅ r univ) at_bot (ùìù 0),
  { convert this,
    ext1 r,
    rw [‚Üê set_lintegral_univ, set_lintegral_rnd_r_todo œÅ _ measurable_set.univ], },
  exact tendsto_todo_r_at_bot œÅ measurable_set.univ,
end

lemma lintegral_sub' {Œº : measure Œ±} {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hg : ae_measurable g Œº)
  (hg_fin : ‚à´‚Åª a, g a ‚àÇŒº ‚â† ‚àû) (h_le : g ‚â§·µê[Œº] f) :
  ‚à´‚Åª a, f a - g a ‚àÇŒº = ‚à´‚Åª a, f a ‚àÇŒº - ‚à´‚Åª a, g a ‚àÇŒº :=
begin
  refine ennreal.eq_sub_of_add_eq hg_fin _,
  rw [‚Üê lintegral_add_right' _ hg],
  exact lintegral_congr_ae (h_le.mono $ Œª x hx, tsub_add_cancel_of_le hx)
end

lemma tendsto_rnd_r_at_top_one (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), tendsto (Œª r, rnd_r œÅ r a) at_top (ùìù 1) :=
begin
  have h_mono := rnd_r_mono œÅ,
  have h_le_one := rnd_r_le_one œÅ,
  have h_exists : ‚àÄ·µê a ‚àÇ(todo œÅ), ‚àÉ l ‚â§ (1 : ‚Ñù‚â•0‚àû), tendsto (Œª r, rnd_r œÅ r a) at_top (ùìù l),
  { filter_upwards [h_mono, h_le_one] with a ha_mono ha_le_one,
    -- todo: no direct way to get the or.inr of this?
    have h_tendsto : tendsto (Œª r, rnd_r œÅ r a) at_top at_top
      ‚à® ‚àÉ l, tendsto (Œª r, rnd_r œÅ r a) at_top (ùìù l) := tendsto_of_monotone ha_mono,
    cases h_tendsto with h_absurd h_tendsto,
    { rw monotone.tendsto_at_top_at_top_iff ha_mono at h_absurd,
      obtain ‚ü®r, hr‚ü© := h_absurd 2,
      exact absurd (hr.trans (ha_le_one r)) ennreal.one_lt_two.not_le, },
    obtain ‚ü®l, hl‚ü© := h_tendsto,
    exact ‚ü®l, le_of_tendsto' hl ha_le_one, hl‚ü©, },
  classical,
  let F : Œ± ‚Üí ‚Ñù‚â•0‚àû := Œª a,
    if h : ‚àÉ l ‚â§ (1 : ‚Ñù‚â•0‚àû), tendsto (Œª r, rnd_r œÅ r a) at_top (ùìù l) then h.some else 0,
  have h_tendsto_‚Ñö : ‚àÄ·µê a ‚àÇ(todo œÅ), tendsto (Œª r, rnd_r œÅ r a) at_top (ùìù (F a)),
  { filter_upwards [h_exists] with a ha,
    simp_rw [F, dif_pos ha],
    exact ha.some_spec.some_spec },
  have h_tendsto_‚Ñï : ‚àÄ·µê a ‚àÇ(todo œÅ), tendsto (Œª n : ‚Ñï, rnd_r œÅ n a) at_top (ùìù (F a)),
  { filter_upwards [h_tendsto_‚Ñö] with a ha using ha.comp tendsto_coe_nat_at_top_at_top, },
  have hF_ae_meas : ae_measurable F (todo œÅ),
  { refine ae_measurable_of_tendsto_metrizable_ae' (Œª n, _) h_tendsto_‚Ñï,
    exact (measure.measurable_rn_deriv _ _).ae_measurable, },
  have hF_le_one : ‚àÄ·µê a ‚àÇ(todo œÅ), F a ‚â§ 1,
  { filter_upwards [h_exists] with a ha,
    simp_rw [F, dif_pos ha],
    exact ha.some_spec.some, },
  suffices : ‚àÄ·µê a ‚àÇ(todo œÅ), F a = 1,
  { filter_upwards [h_tendsto_‚Ñö, this] with a ha_tendsto ha_eq,
    rwa ha_eq at ha_tendsto, },
  have h_lintegral_eq : ‚à´‚Åª a, F a ‚àÇ(todo œÅ) = ‚à´‚Åª a, 1 ‚àÇ(todo œÅ),
  { have h_lintegral : tendsto (Œª r : ‚Ñï, ‚à´‚Åª a, rnd_r œÅ r a ‚àÇ(todo œÅ)) at_top
      (ùìù (‚à´‚Åª a, F a ‚àÇ(todo œÅ))),
    { refine lintegral_tendsto_of_tendsto_of_monotone
        (Œª _, (measure.measurable_rn_deriv _ _).ae_measurable) _ h_tendsto_‚Ñï,
      filter_upwards [h_mono] with a ha,
      refine Œª n m hnm, ha _,
      exact_mod_cast hnm, },
    have h_lintegral' : tendsto (Œª r : ‚Ñï, ‚à´‚Åª a, rnd_r œÅ r a ‚àÇ(todo œÅ)) at_top
      (ùìù (‚à´‚Åª a, 1 ‚àÇ(todo œÅ))),
    { exact (tendsto_lintegral_rnd_r_at_top' œÅ).comp tendsto_coe_nat_at_top_at_top, },
    exact tendsto_nhds_unique h_lintegral h_lintegral', },
  have : ‚à´‚Åª a, (1 - F a) ‚àÇtodo œÅ = 0,
  { rw [lintegral_sub' hF_ae_meas _ hF_le_one, h_lintegral_eq, tsub_self],
    calc ‚à´‚Åª a, F a ‚àÇ(todo œÅ) = ‚à´‚Åª a, 1 ‚àÇ(todo œÅ) : h_lintegral_eq
    ... = todo œÅ univ : lintegral_one
    ... = œÅ univ : todo_univ œÅ
    ... ‚â† ‚ä§ : measure_ne_top œÅ _, },
  rw lintegral_eq_zero_iff' at this,
  { filter_upwards [this, hF_le_one] with ha h_one_sub_eq_zero h_le_one,
    rw [pi.zero_apply, tsub_eq_zero_iff_le] at h_one_sub_eq_zero,
    exact le_antisymm h_le_one h_one_sub_eq_zero, },
  { exact ae_measurable_const.sub hF_ae_meas, },
end

lemma tendsto_rnd_r_at_bot_zero (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), tendsto (Œª r, rnd_r œÅ r a) at_bot (ùìù 0) :=
begin
  have h_mono := rnd_r_mono œÅ,
  have h_exists : ‚àÄ·µê a ‚àÇ(todo œÅ), ‚àÉ l, tendsto (Œª r, rnd_r œÅ r a) at_bot (ùìù l),
  { sorry, },
  classical,
  let F : Œ± ‚Üí ‚Ñù‚â•0‚àû := Œª a,
    if h : ‚àÉ l, tendsto (Œª r, rnd_r œÅ r a) at_bot (ùìù l) then h.some else 0,
  have h_tendsto_‚Ñö : ‚àÄ·µê a ‚àÇ(todo œÅ), tendsto (Œª r, rnd_r œÅ r a) at_bot (ùìù (F a)),
  { filter_upwards [h_exists] with a ha,
    simp_rw [F, dif_pos ha],
    exact ha.some_spec, },
  have h_tendsto_‚Ñï : ‚àÄ·µê a ‚àÇ(todo œÅ), tendsto (Œª n : ‚Ñï, rnd_r œÅ (-n) a) at_top (ùìù (F a)),
  { filter_upwards [h_tendsto_‚Ñö] with a ha,
    exact (ha.comp tendsto_neg_at_top_at_bot).comp tendsto_coe_nat_at_top_at_top, },
  have hF_ae_meas : ae_measurable F (todo œÅ),
  { refine ae_measurable_of_tendsto_metrizable_ae' (Œª n, _) h_tendsto_‚Ñï,
    exact (measure.measurable_rn_deriv _ _).ae_measurable, },
  suffices : ‚àÄ·µê a ‚àÇ(todo œÅ), F a = 0,
  { filter_upwards [h_tendsto_‚Ñö, this] with a ha_tendsto ha_eq,
    rwa ha_eq at ha_tendsto, },
  have h_lintegral_eq : ‚à´‚Åª a, F a ‚àÇ(todo œÅ) = 0,
  { have h_lintegral : tendsto (Œª r : ‚Ñï, ‚à´‚Åª a, rnd_r œÅ (-r) a ‚àÇ(todo œÅ)) at_top
      (ùìù (‚à´‚Åª a, F a ‚àÇ(todo œÅ))),
    { refine tendsto_lintegral_of_dominated_convergence (Œª _, 1) _ _ _ h_tendsto_‚Ñï,
      { exact Œª _, measure.measurable_rn_deriv _ _, },
      { intros n,
        filter_upwards [rnd_r_le_one œÅ] with a ha using ha _, },
      { rw lintegral_one,
        exact measure_ne_top _ _, }, },
    have h_lintegral' : tendsto (Œª r : ‚Ñï, ‚à´‚Åª a, rnd_r œÅ (-r) a ‚àÇ(todo œÅ)) at_top
      (ùìù 0),
    { have h_lintegral_eq : (Œª r : ‚Ñï, ‚à´‚Åª a, rnd_r œÅ (-r) a ‚àÇ(todo œÅ)) = Œª r, œÅ (univ √óÀ¢ Iic (-r)),
      { ext1 n,
        rw [‚Üê set_lintegral_univ, set_lintegral_rnd_r_todo œÅ _ measurable_set.univ, todo_r_univ],
        norm_cast, },
      rw h_lintegral_eq,
      have h_zero_eq_measure_Inter : (0 : ‚Ñù‚â•0‚àû) = œÅ (‚ãÇ r : ‚Ñï, univ √óÀ¢ Iic (-r)),
      { suffices : (‚ãÇ r : ‚Ñï, univ √óÀ¢ Iic (-(r : ‚Ñù))) = ‚àÖ, by rwa [this, measure_empty],
        ext1 x,
        simp only [mem_Inter, mem_prod, mem_univ, mem_Iic, true_and, mem_empty_iff_false, iff_false,
          not_forall, not_le],
        simp_rw neg_lt,
        exact exists_nat_gt _, },
      rw h_zero_eq_measure_Inter,
      refine tendsto_measure_Inter (Œª n, measurable_set.univ.prod measurable_set_Iic)
        (Œª i j hij x, _) ‚ü®0, measure_ne_top œÅ _‚ü©,
      simp only [mem_prod, mem_univ, mem_Iic, true_and],
      refine Œª hxj, hxj.trans (neg_le_neg _),
      exact_mod_cast hij, },
    exact tendsto_nhds_unique h_lintegral h_lintegral', },
  rwa [lintegral_eq_zero_iff' hF_ae_meas] at h_lintegral_eq,
end

lemma rnd_r_ae_eq_inf_gt (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), ‚àÄ t : ‚Ñö, (‚®Ö r : Ioi t, rnd_r œÅ r a) = rnd_r œÅ t a :=
begin
  rw ae_all_iff,
  intros t,
  refine ae_eq_of_forall_set_lintegral_eq_of_sigma_finite _ _ _,
  { exact measurable_infi (Œª i, measure.measurable_rn_deriv _ _), },
  { exact measure.measurable_rn_deriv _ _, },
  intros s hs hs_fin,
  rw [set_lintegral_infi_gt_rnd_r œÅ t hs, set_lintegral_rnd_r_todo œÅ t hs],
end

open_locale classical

def rnd_prop (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : Prop :=
monotone (Œª r, rnd_r œÅ r a) ‚àß (‚àÄ r, rnd_r œÅ r a ‚â§ 1)
  ‚àß (tendsto (Œª r, rnd_r œÅ r a) at_top (ùìù 1)) ‚àß (tendsto (Œª r, rnd_r œÅ r a) at_bot (ùìù 0))
  ‚àß (‚àÄ t : ‚Ñö, (‚®Ö r : Ioi t, rnd_r œÅ r a) = rnd_r œÅ t a)

lemma rnd_prop_ae (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), rnd_prop œÅ a :=
begin
  simp_rw [rnd_prop, eventually_and],
  exact ‚ü®rnd_r_mono œÅ, rnd_r_le_one œÅ, tendsto_rnd_r_at_top_one œÅ,
    tendsto_rnd_r_at_bot_zero œÅ, rnd_r_ae_eq_inf_gt œÅ‚ü©,
end

def rnd_prop_set (œÅ : measure (Œ± √ó ‚Ñù)) : set Œ± :=
(to_measurable (todo œÅ) {b | ¬¨ rnd_prop œÅ b})·∂ú

lemma measurable_set_rnd_prop_set (œÅ : measure (Œ± √ó ‚Ñù)) : measurable_set (rnd_prop_set œÅ) :=
(measurable_set_to_measurable _ _).compl

lemma rnd_prop_of_mem_rnd_prop_set {œÅ : measure (Œ± √ó ‚Ñù)} {a : Œ±} (h : a ‚àà rnd_prop_set œÅ) :
  rnd_prop œÅ a :=
begin
  rw [rnd_prop_set, mem_compl_iff] at h,
  have h_ss := subset_to_measurable (todo œÅ) {b | ¬¨ rnd_prop œÅ b},
  by_contra ha,
  exact h (h_ss ha),
end

lemma rnd_prop_set_subset (œÅ : measure (Œ± √ó ‚Ñù)) :
  rnd_prop_set œÅ ‚äÜ {a | rnd_prop œÅ a} :=
Œª x, rnd_prop_of_mem_rnd_prop_set

lemma todo_compl_rnd_prop_set (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  todo œÅ (rnd_prop_set œÅ)·∂ú = 0 :=
begin
  rw [rnd_prop_set, compl_compl, measure_to_measurable],
  exact rnd_prop_ae œÅ,
end

lemma mem_rnd_prop_set_ae (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚àÄ·µê a ‚àÇ(todo œÅ), a ‚àà rnd_prop_set œÅ :=
todo_compl_rnd_prop_set œÅ

noncomputable
def rnd' (œÅ : measure (Œ± √ó ‚Ñù)) : Œ± ‚Üí ‚Ñö ‚Üí ‚Ñù :=
Œª a, if a ‚àà rnd_prop_set œÅ then (Œª r, (rnd_r œÅ r a).to_real) else (Œª r, if r < 0 then 0 else 1)

lemma rnd'_of_not_rnd_prop (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (h : a ‚àâ rnd_prop_set œÅ) :
  rnd' œÅ a = Œª r, if r < 0 then 0 else 1 :=
by simp only [rnd', h, if_false]

lemma rnd'_of_rnd_prop (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (h : a ‚àà rnd_prop_set œÅ) (r : ‚Ñö) :
  rnd' œÅ a r = (rnd_r œÅ r a).to_real :=
by simp only [rnd', h, if_true]

lemma monotone_rnd' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  monotone (rnd' œÅ a) :=
begin
  by_cases h : a ‚àà rnd_prop_set œÅ,
  { simp only [rnd', h, if_true, forall_const, and_self],
    intros r r' hrr',
    have h' := rnd_prop_of_mem_rnd_prop_set h,
    have h_ne_top : ‚àÄ r, rnd_r œÅ r a ‚â† ‚àû := Œª r, ((h'.2.1 r).trans_lt ennreal.one_lt_top).ne,
    rw ennreal.to_real_le_to_real (h_ne_top _) (h_ne_top _),
    exact h'.1 hrr', },
  { simp only [rnd', h, if_false],
    intros x y hxy,
    dsimp only,
    split_ifs,
    { refl, },
    { exact zero_le_one, },
    { exact absurd (hxy.trans_lt h_2) h_1, },
    { refl, }, },
end

lemma measurable_rnd' (œÅ : measure (Œ± √ó ‚Ñù)) (q : ‚Ñö) :
  measurable (Œª a, rnd' œÅ a q) :=
begin
  rw rnd',
  simp_rw ite_apply,
  refine measurable.ite (measurable_set_rnd_prop_set œÅ) _ measurable_const,
  exact (measure.measurable_rn_deriv _ _).ennreal_to_real,
end

lemma zero_le_rnd' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  0 ‚â§ rnd' œÅ a r :=
begin
  by_cases h : a ‚àà rnd_prop_set œÅ,
  { simp only [rnd', h, if_true, forall_const, and_self],
    exact ennreal.to_real_nonneg, },
  { simp only [rnd', h, if_false],
    split_ifs,
    { refl, },
    { exact zero_le_one, }, },
end

lemma rnd'_le_one (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  rnd' œÅ a r ‚â§ 1 :=
begin
  by_cases h : a ‚àà rnd_prop_set œÅ,
  { have h' := rnd_prop_of_mem_rnd_prop_set h,
    rw rnd'_of_rnd_prop _ _ h,
    refine ennreal.to_real_le_of_le_of_real zero_le_one _,
    rw ennreal.of_real_one,
    exact h'.2.1 r, },
  { rw rnd'_of_not_rnd_prop _ _ h,
    dsimp only,
    split_ifs,
    exacts [zero_le_one, le_rfl], },
end

lemma tendsto_rnd'_at_bot (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  tendsto (rnd' œÅ a) at_bot (ùìù 0) :=
begin
  by_cases h : a ‚àà rnd_prop_set œÅ,
  { simp only [rnd', h, if_true],
    rw [‚Üê ennreal.zero_to_real, ennreal.tendsto_to_real_iff],
    { exact (rnd_prop_of_mem_rnd_prop_set h).2.2.2.1, },
    { have h' := rnd_prop_of_mem_rnd_prop_set h,
      exact Œª r, ((h'.2.1 r).trans_lt ennreal.one_lt_top).ne, },
    { exact ennreal.zero_ne_top, }, },
  { simp only [rnd', h, if_false],
    refine (tendsto_congr' _).mp tendsto_const_nhds,
    rw [eventually_eq, eventually_at_bot],
    refine ‚ü®-1, Œª q hq, _‚ü©,
    rw if_pos,
    refine hq.trans_lt _,
    linarith, },
end

lemma tendsto_rnd'_at_top (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  tendsto (rnd' œÅ a) at_top (ùìù 1) :=
begin
  by_cases h : a ‚àà rnd_prop_set œÅ,
  { simp only [rnd', h, if_true],
    rw [‚Üê ennreal.one_to_real, ennreal.tendsto_to_real_iff],
    { exact (rnd_prop_of_mem_rnd_prop_set h).2.2.1, },
    { have h' := rnd_prop_of_mem_rnd_prop_set h,
      exact Œª r, ((h'.2.1 r).trans_lt ennreal.one_lt_top).ne, },
    { exact ennreal.one_ne_top, }, },
  { simp only [rnd', h, if_false],
    refine (tendsto_congr' _).mp tendsto_const_nhds,
    rw [eventually_eq, eventually_at_top],
    refine ‚ü®0, Œª q hq, _‚ü©,
    rw if_neg,
    exact not_lt.mpr hq, },
end

lemma rnd'_ae_eq (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö) :
  (Œª a, rnd' œÅ a r) =·µê[todo œÅ] Œª a, (rnd_r œÅ r a).to_real :=
begin
  filter_upwards [mem_rnd_prop_set_ae œÅ] with a ha,
  exact rnd'_of_rnd_prop œÅ a ha r,
end

lemma of_real_rnd'_ae_eq (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö) :
  (Œª a, ennreal.of_real (rnd' œÅ a r)) =·µê[todo œÅ] rnd_r œÅ r :=
begin
  filter_upwards [rnd'_ae_eq œÅ r, rnd_r_le_one œÅ] with a ha ha_le_one,
  rw [ha, ennreal.of_real_to_real],
  exact ((ha_le_one r).trans_lt ennreal.one_lt_top).ne,
end

lemma rnd'_eq_inf_gt (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (t : ‚Ñö) :
  (‚®Ö r : Ioi t, rnd' œÅ a r) = rnd' œÅ a t :=
begin
  by_cases ha : a ‚àà rnd_prop_set œÅ,
  { simp_rw rnd'_of_rnd_prop œÅ a ha,
    have ha' := rnd_prop_of_mem_rnd_prop_set ha,
    rw ‚Üê to_real_infi,
    { suffices : (‚®Ö (i : ‚Ü•(Ioi t)), rnd_r œÅ ‚Üëi a) = rnd_r œÅ t a, by rw this,
      rw ‚Üê ha'.2.2.2.2, },
    { exact Œª r, ((ha'.2.1 r).trans_lt ennreal.one_lt_top).ne, }, },
  { simp_rw rnd'_of_not_rnd_prop œÅ a ha,
    have h_bdd : bdd_below (range (Œª (r : ‚Ü•(Ioi t)), ite ((r : ‚Ñö) < 0) (0 : ‚Ñù) 1)),
    { refine ‚ü®0, Œª x hx, _‚ü©,
      obtain ‚ü®y, rfl‚ü© := mem_range.mpr hx,
      dsimp only,
      split_ifs,
      exacts [le_rfl, zero_le_one], },
    split_ifs with h h,
    { refine le_antisymm _ (le_cinfi (Œª x, _)),
      { obtain ‚ü®q, htq, hq_neg‚ü© : ‚àÉ q, t < q ‚àß q < 0,
        { refine ‚ü®t/2, _, _‚ü©,
          { linarith, },
          { linarith, }, },
        refine (cinfi_le h_bdd ‚ü®q, htq‚ü©).trans _,
        rw if_pos,
        rwa subtype.coe_mk, },
      { split_ifs,
        exacts [le_rfl, zero_le_one], }, },
    { refine le_antisymm _ _,
      { refine (cinfi_le h_bdd ‚ü®t+1, lt_add_one t‚ü©).trans _,
        split_ifs,
        exacts [zero_le_one, le_rfl], },
      { refine le_cinfi (Œª x, _),
        rw if_neg,
        rw not_lt at h ‚ä¢,
        exact h.trans (mem_Ioi.mp x.prop).le, }, }, },
end

noncomputable
def rnd'' (œÅ : measure (Œ± √ó ‚Ñù)) : Œ± ‚Üí ‚Ñù ‚Üí ‚Ñù :=
Œª a t, ‚®Ö r : {r' : ‚Ñö // t < r'}, rnd' œÅ a r

lemma rnd''_eq_rnd' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  rnd'' œÅ a r = rnd' œÅ a r :=
begin
  rw [‚Üê rnd'_eq_inf_gt œÅ a r, rnd''],
  dsimp only,
  refine equiv.infi_congr _ _,
  { exact
    { to_fun := Œª t, ‚ü®t.1, by exact_mod_cast t.2‚ü©,
      inv_fun := Œª t, ‚ü®t.1, by exact_mod_cast t.2‚ü©,
      left_inv := Œª t, by simp only [subtype.val_eq_coe, subtype.coe_eta],
      right_inv := Œª t, by simp only [subtype.val_eq_coe, subtype.coe_eta], }, },
  { intro t,
    simp only [subtype.val_eq_coe, equiv.coe_fn_mk, subtype.coe_mk], },
end

lemma monotone_rnd'' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : monotone (rnd'' œÅ a) :=
begin
  intros x y hxy,
  rw [rnd''],
  dsimp only,
  haveI : nonempty {r' : ‚Ñö // y < ‚Üër'},
  { obtain ‚ü®r, hrx‚ü© := exists_rat_gt y, exact ‚ü®‚ü®r, hrx‚ü©‚ü©, },
  refine le_cinfi (Œª r, _),
  have hxr : x < r := hxy.trans_lt r.prop,
  refine (cinfi_le _ _).trans_eq _,
  { exact ‚ü®r.1, hxr‚ü©, },
  { refine ‚ü®0, Œª z, _‚ü©,
    rw mem_range,
    rintros ‚ü®u, rfl‚ü©,
    exact zero_le_rnd' œÅ a _, },
  { refl, },
end

lemma zero_le_rnd'' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñù) :
  0 ‚â§ rnd'' œÅ a r :=
begin
  haveI : nonempty {r' : ‚Ñö // r < ‚Üër'},
  { obtain ‚ü®r, hrx‚ü© := exists_rat_gt r, exact ‚ü®‚ü®r, hrx‚ü©‚ü©, },
  exact le_cinfi (Œª r', zero_le_rnd' œÅ a _),
end

lemma tendsto_rnd''_Ioi (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (x : ‚Ñù) :
  tendsto (rnd'' œÅ a) (ùìù[Ioi x] x) (ùìù (rnd'' œÅ a x)) :=
begin
  have h := monotone.tendsto_nhds_within_Ioi (monotone_rnd'' œÅ a) x,
  convert h,
  rw Inf_image',
  have h' : (‚®Ö r : Ioi x, rnd'' œÅ a r) = ‚®Ö r : {r' : ‚Ñö // x < r'}, rnd'' œÅ a r,
  { refine le_antisymm _ _,
    { haveI : nonempty {r' : ‚Ñö // x < ‚Üër'},
      { obtain ‚ü®r, hrx‚ü© := exists_rat_gt x,
        exact ‚ü®‚ü®r, hrx‚ü©‚ü©, },
      refine le_cinfi (Œª r, _),
      obtain ‚ü®y, hxy, hyr‚ü© := exists_rat_btwn r.prop,
      refine cinfi_set_le _ _,
      { refine ‚ü®0, Œª z, _‚ü©,
        rw mem_image,
        rintros ‚ü®u, hux, rfl‚ü©,
        exact zero_le_rnd'' œÅ a u, },
      { rw mem_Ioi,
        refine hxy.trans _,
        exact_mod_cast hyr, }, },
    { refine le_cinfi (Œª q, _),
      have hq := q.prop,
      rw mem_Ioi at hq,
      obtain ‚ü®y, hxy, hyq‚ü© := exists_rat_btwn hq,
      refine (cinfi_le _ _).trans _,
      { exact ‚ü®y, hxy‚ü©, },
      { refine ‚ü®0, Œª z, _‚ü©,
        rw mem_range,
        rintros ‚ü®u, rfl‚ü©,
        exact zero_le_rnd'' œÅ a _, },
      { refine monotone_rnd'' œÅ a (le_trans _ hyq.le),
        norm_cast, }, }, },
  have h'' : (‚®Ö r : {r' : ‚Ñö // x < r'}, rnd'' œÅ a r) = ‚®Ö r : {r' : ‚Ñö // x < r'}, rnd' œÅ a r,
  { congr' with r,
    exact rnd''_eq_rnd' œÅ a r, },
  rw [h', h''],
  refl,
end

lemma continuous_within_at_rnd'' (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (x : ‚Ñù) :
  continuous_within_at (rnd'' œÅ a) (Ici x) x :=
by { rw ‚Üê continuous_within_at_Ioi_iff_Ici, exact tendsto_rnd''_Ioi œÅ a x, }

noncomputable
def rnd_stieltjes (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : stieltjes_function :=
{ to_fun := rnd'' œÅ a,
  mono' := monotone_rnd'' œÅ a,
  right_continuous' := continuous_within_at_rnd'' œÅ a }

noncomputable
def rnd_measure (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : measure ‚Ñù :=
(rnd_stieltjes œÅ a).measure

lemma rnd_measure_Ioc (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (q q' : ‚Ñö) :
  rnd_measure œÅ a (Ioc q q') = ennreal.of_real (rnd' œÅ a q' - rnd' œÅ a q) :=
by { rw [rnd_measure, stieltjes_function.measure_Ioc, ‚Üê rnd''_eq_rnd', ‚Üê rnd''_eq_rnd'], refl, }

lemma rnd_measure_Iic (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (q : ‚Ñö) :
  rnd_measure œÅ a (Iic q) = ennreal.of_real (rnd' œÅ a q) :=
begin
  have h_tendsto_1 : tendsto (Œª r : ‚Ñö, rnd_measure œÅ a (Ioc r q)) at_bot
    (ùìù (rnd_measure œÅ a (Iic q))),
  { have h_Iic_eq_Union : Iic (q : ‚Ñù) = ‚ãÉ r : ‚Ñö, Ioc (‚Üë-r) q,
    { ext1 x,
      simp only [mem_Iic, mem_Union, mem_Ioc, exists_and_distrib_right, iff_and_self],
      intro h,
      simp_rw [rat.cast_neg, neg_lt],
      exact exists_rat_gt _, },
    rw h_Iic_eq_Union,
    suffices h_neg_top : tendsto (Œª (r : ‚Ñö), rnd_measure œÅ a (Ioc (‚Üë-r) q)) at_top
      (ùìù (rnd_measure œÅ a (‚ãÉ (r : ‚Ñö), Ioc (‚Üë-r) q))),
    { have : (Œª (r : ‚Ñö), rnd_measure œÅ a (Ioc (‚Üër) q)) = (Œª r, rnd_measure œÅ a (Ioc (‚Üë-(-r)) q)),
      { simp_rw neg_neg, },
      rw this,
      exact h_neg_top.comp tendsto_neg_at_bot_at_top, },
    refine tendsto_measure_Union _,
    intros r r' hrr' x,
    simp only [rat.cast_neg, mem_Ioc, and_imp],
    refine Œª hrx hxq, ‚ü®(neg_le_neg _).trans_lt hrx, hxq‚ü©,
    exact_mod_cast hrr', },
  have h_tendsto_2 :tendsto (Œª r : ‚Ñö, rnd_measure œÅ a (Ioc r q)) at_bot
    (ùìù (ennreal.of_real (rnd' œÅ a q))),
  { simp_rw rnd_measure_Ioc,
    refine ennreal.tendsto_of_real _,
    nth_rewrite 0 ‚Üê sub_zero (rnd' œÅ a q),
    refine tendsto.const_sub _ _,
    exact tendsto_rnd'_at_bot œÅ a, },
  exact tendsto_nhds_unique h_tendsto_1 h_tendsto_2,
end

lemma rnd_measure_univ (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  rnd_measure œÅ a univ = 1 :=
begin
  have h_tendsto1 :
    tendsto (Œª q : ‚Ñö, rnd_measure œÅ a (Iic q)) at_top (ùìù (rnd_measure œÅ a univ)),
  { have : univ = ‚ãÉ q : ‚Ñö, Iic (q : ‚Ñù),
    { ext1 x,
      simp only [mem_univ, mem_Union, mem_Iic, true_iff],
      obtain ‚ü®r, hr‚ü© := exists_rat_gt x,
      exact ‚ü®r, hr.le‚ü©, },
    rw this,
    refine tendsto_measure_Union (Œª r q hr_le_q x, _),
    simp only [mem_Iic],
    refine Œª hxr, hxr.trans _,
    exact_mod_cast hr_le_q, },
  have h_tendsto2 :
    tendsto (Œª q : ‚Ñö, rnd_measure œÅ a (Iic q)) at_top (ùìù 1),
  { simp_rw rnd_measure_Iic œÅ a,
    rw ‚Üê ennreal.of_real_one,
    refine ennreal.tendsto_of_real _,
    exact tendsto_rnd'_at_top œÅ a, },
  exact tendsto_nhds_unique h_tendsto1 h_tendsto2,
end

instance (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) : is_probability_measure (rnd_measure œÅ a) :=
‚ü®rnd_measure_univ œÅ a‚ü©

lemma measurable_rnd_measure (œÅ : measure (Œ± √ó ‚Ñù)) :
  measurable (rnd_measure œÅ) :=
begin
  rw measure.measurable_measure,
  refine Œª s hs, measurable_space.induction_on_inter
    borel_eq_generate_from_Iic_rat is_pi_system_Iic_rat _ _ _ _ hs,
  { simp only [measure_empty, measurable_const], },
  { rintros S ‚ü®u, rfl‚ü©,
    simp_rw rnd_measure_Iic œÅ _ u,
    exact (measurable_rnd' œÅ u).ennreal_of_real, },
  { intros t ht ht_rnd,
    have : (Œª a, rnd_measure œÅ a t·∂ú) = (Œª a, rnd_measure œÅ a univ) - (Œª a, rnd_measure œÅ a t),
    { ext1 a,
      rw [measure_compl ht (measure_ne_top (rnd_measure œÅ a) _), pi.sub_apply], },
    simp_rw [this, rnd_measure_univ œÅ],
    exact measurable.sub measurable_const ht_rnd, },
  { intros f hf_disj hf_meas hf_rnd,
    simp_rw measure_Union hf_disj hf_meas,
    exact measurable.ennreal_tsum hf_rnd, },
end

noncomputable
def rnd_kernel (œÅ : measure (Œ± √ó ‚Ñù)) : kernel Œ± ‚Ñù :=
{ val := Œª a, rnd_measure œÅ a,
  property := measurable_rnd_measure œÅ }

lemma rnd_kernel_apply (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) :
  rnd_kernel œÅ a = rnd_measure œÅ a := rfl

lemma rnd_kernel_Iic (œÅ : measure (Œ± √ó ‚Ñù)) (a : Œ±) (r : ‚Ñö) :
  rnd_kernel œÅ a (Iic r) = ennreal.of_real (rnd' œÅ a r) :=
by rw [rnd_kernel_apply, rnd_measure_Iic œÅ]

instance (œÅ : measure (Œ± √ó ‚Ñù)) : is_markov_kernel (rnd_kernel œÅ) :=
‚ü®Œª a, by { rw rnd_kernel, apply_instance, } ‚ü©

lemma set_lintegral_rnd_kernel_Iic_rat (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] (r : ‚Ñö)
  {s : set Œ±} (hs : measurable_set s) :
  ‚à´‚Åª a in s, rnd_kernel œÅ a (Iic r) ‚àÇ(todo œÅ) = œÅ (s √óÀ¢ Iic r) :=
begin
  simp_rw [rnd_kernel_Iic œÅ],
  have : ‚àÄ·µê a ‚àÇ(todo œÅ), a ‚àà s ‚Üí ennreal.of_real (rnd' œÅ a r) = rnd_r œÅ r a,
  { filter_upwards [of_real_rnd'_ae_eq œÅ r] with a ha using Œª _, ha, },
  rw [set_lintegral_congr_fun hs this, set_lintegral_rnd_r_todo œÅ r hs],
  exact todo_r_apply œÅ r hs,
end

lemma set_lintegral_rnd_kernel_univ (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ]
  {s : set Œ±} (hs : measurable_set s) :
  ‚à´‚Åª a in s, rnd_kernel œÅ a univ ‚àÇ(todo œÅ) = œÅ (s √óÀ¢ univ) :=
begin
  have h_univ : univ = ‚ãÉ n : ‚Ñï, Iic (n : ‚Ñù),
  { ext1 x,
    simp only [mem_univ, mem_Union, mem_Iic, true_iff],
    obtain ‚ü®r, hr‚ü© := exists_nat_gt x,
    exact ‚ü®r, hr.le‚ü©, },
  have h_tendsto1 : tendsto (Œª n : ‚Ñï, ‚à´‚Åª a in s, rnd_kernel œÅ a (Iic n) ‚àÇ(todo œÅ)) at_top
    (ùìù (‚à´‚Åª a in s, rnd_kernel œÅ a univ ‚àÇ(todo œÅ))),
  { rw h_univ,
    refine tendsto_lintegral_of_dominated_convergence (Œª _, 1) _ _ _ _,
    { exact Œª n, kernel.measurable_coe _ measurable_set_Iic, },
    { refine Œª n, eventually_of_forall (Œª a, _),
      dsimp only,
      have : (n : ‚Ñù) = ‚Üë(n : ‚Ñö) := rfl,
      rw [this, rnd_kernel_Iic, ‚Üê ennreal.of_real_one],
      exact ennreal.of_real_le_of_real (rnd'_le_one œÅ a _), },
    { simp only [lintegral_one, measure.restrict_apply, measurable_set.univ, univ_inter, ne.def],
      exact measure_ne_top _ _, },
    { refine eventually_of_forall (Œª a, tendsto_measure_Union (Œª n m hnm x, _)),
      simp only [mem_Iic],
      refine Œª hxn, hxn.trans _,
      exact_mod_cast hnm, }, },
  have h_tendsto2 : tendsto (Œª n : ‚Ñï, ‚à´‚Åª a in s, rnd_kernel œÅ a (Iic n) ‚àÇ(todo œÅ)) at_top
    (ùìù (œÅ (s √óÀ¢ univ))),
  { have : ‚àÄ n : ‚Ñï, (n : ‚Ñù) = ‚Üë(n : ‚Ñö) := Œª n, rfl,
    simp_rw [this, set_lintegral_rnd_kernel_Iic_rat _ _ hs],
    have h_Union : s √óÀ¢ univ = ‚ãÉ n : ‚Ñï, s √óÀ¢ Iic ((n : ‚Ñö) : ‚Ñù),
    { rw ‚Üê prod_Union,
      congr,
      rw h_univ,
      congr, },
    rw h_Union,
    refine tendsto_measure_Union (Œª n m hnm x, _),
    simp only [rat.cast_coe_nat, mem_prod, mem_Iic, and_imp],
    refine Œª hxs hxn, ‚ü®hxs, hxn.trans _‚ü©,
    exact_mod_cast hnm, },
  exact tendsto_nhds_unique h_tendsto1 h_tendsto2,
end

lemma lintegral_rnd_kernel_univ (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  ‚à´‚Åª a, rnd_kernel œÅ a univ ‚àÇ(todo œÅ) = œÅ univ :=
by rw [‚Üê set_lintegral_univ, set_lintegral_rnd_kernel_univ œÅ measurable_set.univ, univ_prod_univ]

lemma set_lintegral_rnd_kernel_prod (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ]
  {s : set Œ±} (hs : measurable_set s) {t : set ‚Ñù} (ht : measurable_set t) :
  ‚à´‚Åª a in s, rnd_kernel œÅ a t ‚àÇ(todo œÅ) = œÅ (s √óÀ¢ t) :=
begin
  refine measurable_space.induction_on_inter borel_eq_generate_from_Iic_rat is_pi_system_Iic_rat
    _ _ _ _ ht,
  { simp only [measure_empty, lintegral_const, zero_mul, prod_empty], },
  { rintros t ‚ü®q, rfl‚ü©,
    exact set_lintegral_rnd_kernel_Iic_rat œÅ q hs, },
  { intros t ht ht_lintegral,
    have h_ne_top : ‚àÄ a, rnd_kernel œÅ a t ‚â† ‚àû := Œª a, measure_ne_top _ _,
    calc ‚à´‚Åª a in s, rnd_kernel œÅ a t·∂ú ‚àÇtodo œÅ
        = ‚à´‚Åª a in s, (rnd_kernel œÅ a univ) - rnd_kernel œÅ a t ‚àÇtodo œÅ :
      by { congr' with a, rw measure_compl ht (h_ne_top _), }
    ... = ‚à´‚Åª a in s, (rnd_kernel œÅ a univ) ‚àÇtodo œÅ - ‚à´‚Åª a in s, rnd_kernel œÅ a t ‚àÇtodo œÅ :
      begin
        rw lintegral_sub,
        { exact kernel.measurable_coe _ ht, },
        { rw ht_lintegral,
          exact measure_ne_top œÅ _, },
        { exact eventually_of_forall (Œª a, measure_mono (subset_univ _)), },
      end
    ... = œÅ (s √óÀ¢ univ) - œÅ (s √óÀ¢ t) : by rw [set_lintegral_rnd_kernel_univ œÅ hs, ht_lintegral]
    ... = œÅ (s √óÀ¢ t·∂ú) :
      begin
        rw ‚Üê measure_diff _ (hs.prod ht) (measure_ne_top œÅ _),
        { rw [prod_diff_prod, compl_eq_univ_diff],
          simp only [diff_self, empty_prod, union_empty], },
        { rw prod_subset_prod_iff,
          exact or.inl ‚ü®subset_rfl, subset_univ t‚ü©, },
      end, },
  { intros f hf_disj hf_meas hf_eq,
    simp_rw measure_Union hf_disj hf_meas,
    rw [lintegral_tsum (Œª i, (kernel.measurable_coe _ (hf_meas i)).ae_measurable.restrict),
      prod_Union, measure_Union],
    { congr' with i : 1,
      exact hf_eq i, },
    { intros i j hij,
      rw [function.on_fun, disjoint_prod],
      exact or.inr (hf_disj hij), },
    { exact Œª i, measurable_set.prod hs (hf_meas i), }, },
end

lemma lintegral_rnd_kernel (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ]
  {s : set (Œ± √ó ‚Ñù)} (hs : measurable_set s) :
  ‚à´‚Åª a, rnd_kernel œÅ a {x | (a, x) ‚àà s} ‚àÇ(todo œÅ) = œÅ s :=
begin
  refine measurable_space.induction_on_inter generate_from_prod.symm is_pi_system_prod _ _ _ _ hs,
  { simp only [mem_empty_iff_false, set_of_false, measure_empty, lintegral_const, zero_mul], },
  { intros t ht,
    rw mem_image2 at ht,
    obtain ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, rfl‚ü© := ht,
    have h_prod_eq_snd : ‚àÄ a ‚àà t‚ÇÅ, {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = t‚ÇÇ,
    { intros a ha,
      simp only [ha, prod_mk_mem_set_prod_eq, true_and, set_of_mem_eq], },
    cases eq_empty_or_nonempty t‚ÇÇ with h h,
    { simp only [h, prod_empty, mem_empty_iff_false, set_of_false, measure_empty, lintegral_const,
        zero_mul], },
    have h_int_eq : ‚à´‚Åª a, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇtodo œÅ
      = ‚à´‚Åª a in t‚ÇÅ, rnd_kernel œÅ a t‚ÇÇ ‚àÇtodo œÅ,
    { rw ‚Üê lintegral_add_compl _ ht‚ÇÅ,
      have h_eq1 : ‚à´‚Åª a in t‚ÇÅ, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇtodo œÅ
        = ‚à´‚Åª a in t‚ÇÅ, rnd_kernel œÅ a t‚ÇÇ ‚àÇtodo œÅ,
      { refine set_lintegral_congr_fun ht‚ÇÅ (eventually_of_forall (Œª a ha, _)),
        rw h_prod_eq_snd a ha, },
      have h_eq2 : ‚à´‚Åª a in t‚ÇÅ·∂ú, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} ‚àÇtodo œÅ = 0,
      { suffices h_eq_zero : ‚àÄ a ‚àà t‚ÇÅ·∂ú, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = 0,
        { rw set_lintegral_congr_fun ht‚ÇÅ.compl (eventually_of_forall h_eq_zero),
          simp only [lintegral_const, zero_mul], },
        intros a hat‚ÇÅ,
        suffices : {x : ‚Ñù | (a, x) ‚àà t‚ÇÅ √óÀ¢ t‚ÇÇ} = ‚àÖ, by rw [this, measure_empty],
        ext1 x,
        simp only [prod_mk_mem_set_prod_eq, mem_set_of_eq, mem_empty_iff_false, iff_false, not_and],
        exact Œª ha, absurd ha hat‚ÇÅ, },
      rw [h_eq1, h_eq2, add_zero], },
    rw h_int_eq,
    exact set_lintegral_rnd_kernel_prod œÅ ht‚ÇÅ ht‚ÇÇ, },
  { intros t ht ht_eq,
    calc ‚à´‚Åª a, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t·∂ú} ‚àÇtodo œÅ
        = ‚à´‚Åª a, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t}·∂ú ‚àÇtodo œÅ : rfl
    ... = ‚à´‚Åª a, rnd_kernel œÅ a univ - rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t} ‚àÇtodo œÅ :
      begin
        congr' with a : 1,
        rw measure_compl _ (measure_ne_top (rnd_kernel œÅ a) _),
        exact measurable_prod_mk_left ht,
      end
    ... = ‚à´‚Åª a, rnd_kernel œÅ a univ ‚àÇtodo œÅ - ‚à´‚Åª a, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t} ‚àÇtodo œÅ :
      begin
        have h_le : (Œª a, rnd_kernel œÅ a {x : ‚Ñù | (a, x) ‚àà t}) ‚â§·µê[todo œÅ] Œª a, rnd_kernel œÅ a univ,
        { exact eventually_of_forall (Œª a, measure_mono (subset_univ _)), },
        rw lintegral_sub _ _ h_le,
        { exact kernel.measurable_prod_mk_mem _ ht, },
        { refine ((lintegral_mono_ae h_le).trans_lt _).ne,
          rw lintegral_rnd_kernel_univ,
          exact measure_lt_top œÅ univ, },
      end
    ... = œÅ univ - œÅ t : by rw [ht_eq, lintegral_rnd_kernel_univ]
    ... = œÅ t·∂ú : (measure_compl ht (measure_ne_top _ _)).symm, },
  { intros f hf_disj hf_meas hf_eq,
    have h_eq : ‚àÄ a, {x | (a, x) ‚àà ‚ãÉ i, f i} = ‚ãÉ i, {x | (a, x) ‚àà f i},
    { intros a,
      ext1 x,
      simp only [mem_Union, mem_set_of_eq], },
    simp_rw h_eq,
    have h_disj : ‚àÄ a, pairwise (disjoint on (Œª i, {x | (a, x) ‚àà f i})),
    { intros a i j hij,
      have h_disj := hf_disj hij,
      rw [function.on_fun, disjoint_iff_inter_eq_empty] at h_disj ‚ä¢,
      ext1 x,
      simp only [mem_inter_iff, mem_set_of_eq, mem_empty_iff_false, iff_false],
      intros h_mem_both,
      suffices : (a, x) ‚àà ‚àÖ, by rwa mem_empty_iff_false at this,
      rwa [‚Üê h_disj, mem_inter_iff], },
    have h_meas : ‚àÄ a i, measurable_set {x | (a, x) ‚àà f i},
    { exact Œª a i, measurable_prod_mk_left (hf_meas i), },
    calc ‚à´‚Åª a, rnd_kernel œÅ a (‚ãÉ i, {x | (a, x) ‚àà f i}) ‚àÇ(todo œÅ)
        = ‚à´‚Åª a, ‚àë' i, rnd_kernel œÅ a {x | (a, x) ‚àà f i} ‚àÇ(todo œÅ) :
          by { congr' with a : 1, rw measure_Union (h_disj a) (h_meas a), }
    ... = ‚àë' i, ‚à´‚Åª a, rnd_kernel œÅ a {x | (a, x) ‚àà f i} ‚àÇ(todo œÅ) :
          begin
            rw lintegral_tsum (Œª i : ‚Ñï, measurable.ae_measurable _),
            exact kernel.measurable_prod_mk_mem _ (hf_meas i),
          end
    ... = ‚àë' i, œÅ (f i) : by { congr' with i : 1, exact hf_eq i, }
    ... = œÅ (Union f) : (measure_Union hf_disj hf_meas).symm, },
end

open_locale probability_theory

-- todo define someting to have a nicer expression?
theorem disintegration (œÅ : measure (Œ± √ó ‚Ñù)) [is_finite_measure œÅ] :
  œÅ = ((kernel.const unit (todo œÅ)) ‚äó‚Çñ (kernel.prod_mk_left (rnd_kernel œÅ) unit)) (unit.star) :=
begin
  ext1 s hs,
  rw [kernel.comp_prod_apply _ _ _ hs, kernel.const_apply],
  simp_rw kernel.prod_mk_left_apply,
  rw lintegral_rnd_kernel œÅ hs,
end

end probability_theory
