import topology.algebra.ring.basic
import algebra.big_operators.basic
import order.filter.at_top_bot
import analysis.specific_limits.normed
import topology.metric_space.cau_seq_filter
import tactic

open_locale big_operators topology

universe u

/--
`partial_sum f n` is the sum `f 0 + f 1 + f 2 + ... + f (n - 1)`. Note that this does not include
the term `f n`.
-/
def partial_sum {R : Type u} [add_comm_monoid R] (f : ‚Ñï ‚Üí R) (n : ‚Ñï) :=
‚àë i in finset.range n, f i

@[simp]
lemma partial_sum_zero {R : Type u} [add_comm_monoid R] (f : ‚Ñï ‚Üí R) : partial_sum f 0 = 0 :=
begin
  unfold partial_sum,
  simp,
end

lemma partial_sum_const_zero (R : Type u) [add_comm_monoid R] (n : ‚Ñï) : partial_sum (Œª _ : ‚Ñï, 0) n = 0 :=
finset.sum_eq_zero (Œª _ _, rfl)

lemma partial_sum_next {R : Type u} [add_comm_monoid R] (f : ‚Ñï ‚Üí R) (n : ‚Ñï) :
  partial_sum f (n + 1) = f n + partial_sum f n :=
begin
  unfold partial_sum,
  rw finset.range_succ,
  apply finset.sum_insert,
  exact finset.not_mem_range_self
end

def series_converges {R : Type u} [add_comm_monoid R] [topological_space R] (f : ‚Ñï ‚Üí R) :=
‚àÉ a : R, filter.tendsto (partial_sum f) filter.at_top (ùìù a)

def series_converges_absolutely {R : Type u} [add_comm_monoid R] [topological_space R] [has_norm R] (f : ‚Ñï ‚Üí R) :=
series_converges (Œª x, ‚Äñf x‚Äñ)

lemma tail_limit {R : Type u} [topological_space R] (f : ‚Ñï ‚Üí R) (T : R) (h : filter.tendsto f filter.at_top (ùìù T)) :
  filter.tendsto (Œª k, f (k + 1)) filter.at_top (ùìù T) :=
begin
  rw filter.tendsto_def at h ‚ä¢,
  intros s hs,
  specialize h s hs,
  rw filter.mem_at_top_sets at h ‚ä¢,
  cases h with a h,
  use a,
  intros b hb,
  exact h (b + 1) (nat.le_succ_of_le hb)
end

theorem terms_tendsto_zero {R : Type u} [add_comm_group R] [topological_space R] [topological_add_group R]
  (a : ‚Ñï ‚Üí R) (h : series_converges a) : filter.tendsto a filter.at_top (ùìù 0) :=
begin
  -- Since R is a topological group, it has a uniform space.
  -- Since R is abelian, it satisfies `uniform_add_group`
  letI : uniform_space R := topological_add_group.to_uniform_space R,
  haveI : uniform_add_group R := topological_add_comm_group_is_uniform,

  -- It suffices to show that for all neighborhoods `X` of 0, There exists an `N` such that for all
  -- `n ‚â• N`, `a n ‚àà X`.
  rw filter.tendsto_def,
  intros X hX,
  rw filter.mem_at_top_sets,

  -- Because `X ‚àà ùìù 0`, there exists an entourage `V` such that `V[0] ‚äÜ X`
  rcases uniform_space.mem_nhds_iff.mp hX with ‚ü®V, hV‚ÇÅ, hV‚ÇÇ‚ü©,

  let m := Œª (x : R √ó R), x.snd - x.fst,

  -- By the definition of an entourage in a topological group, there exists a neighbourhood `t` of 0
  -- such that `m ‚Åª¬π' t ‚äÜ V`
  rw uniformity_eq_comap_nhds_zero R at hV‚ÇÅ,
  rcases filter.mem_comap.mp hV‚ÇÅ with ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü©,

  -- Note that `m ‚Åª¬π' t` is itself an entourage.
  have hm : m ‚Åª¬π' t ‚àà uniformity R := begin
    rw uniformity_eq_comap_nhds_zero R,
    rw filter.mem_comap,
    use t,
    use ht‚ÇÅ,
  end,

  -- Let `U` by a "half-size" entourage of `m ‚Åª¬π' t` (so that `comp_rel U U ‚äÜ m ‚Åª¬π' t`)
  -- Let `W` by the largest symmetric relation which is a subset of `U`. `W` is an entourage.
  obtain ‚ü®U, hU‚ÇÅ, hU‚ÇÇ‚ü© := comp_mem_uniformity_sets hm,
  let W := symmetrize_rel U,
  have hW‚ÇÅ : W ‚àà uniformity R := symmetrize_mem_uniformity hU‚ÇÅ,
  have hW‚ÇÇ : symmetric_rel W := symmetric_symmetrize_rel U,
  have hW‚ÇÉ : W ‚äÜ U := symmetrize_rel_subset_self U,

  -- By hypothesis, the partial sums of `a` tend to some `T`. This means that given any
  -- neighbourhood of T, there exists an `N : ‚Ñï` such that for all `n ‚â• N`, the nth partial sum lies
  -- within that neighbourhood. Because `W[T]` is a neighbourhood of `T`, we use this to find our
  -- desired `N`.
  cases h with T h,
  rw filter.tendsto_def at h,
  specialize h (uniform_space.ball T W) (uniform_space.ball_mem_nhds T hW‚ÇÅ),
  obtain ‚ü®N, hN‚ü© := filter.mem_at_top_sets.mp h,

  -- Using the `N` we just found, we need to show that for all `n ‚â• N`, `a n ‚àà X`. Since `V[0] ‚äÜ X`,
  -- it suffices to show that `a n ‚àà V[0]`, or that `(0, a n) ‚àà V`.
  use N,
  intros n hn,
  rw set.mem_preimage,
  apply hV‚ÇÇ,
  unfold uniform_space.ball,
  rw set.mem_preimage,

  -- Since `m ‚Åª¬π t ‚äÜ V`, it suffices to show that `(0, a n) ‚àà m ‚Åª¬π t`, which is the same as showing
  -- that `m (0, a n) ‚àà t`. This is the same as showing that `a n - 0 ‚àà t`.
  apply ht‚ÇÇ,
  rw set.mem_preimage,
  change a n - 0 ‚àà t,

  -- Note that `a n - 0` is the same as the difference between the nth and (n+1)th partial sums
  -- (because of the way that partial sums are defined here).
  rw sub_zero,
  rw (show a n = partial_sum a (n + 1) - partial_sum a n, by simp [partial_sum_next a n]),

  -- Therefore, we need to show that `partial_sum a (n + 1) - partial_sum a n ‚àà t`, which is the
  -- same as showing that `(partial_sum a n, partial_sum a (n + 1)) ‚àà m ‚Åª¬π t`.
  change m (partial_sum a n, partial_sum a (n + 1)) ‚àà t,
  rw ‚Üêset.mem_preimage,

  -- Using what we deduced earlier from the hypothesis, `(T, partial_sum a n) ‚àà W` and
  -- `(T, partial_sum a (n + 1)) ‚àà W` (since `n ‚â• N` and `n + 1 ‚â• N`)
  have hn‚ÇÅ := set.mem_preimage.mp (hN n hn),
  have hn‚ÇÇ := set.mem_preimage.mp (hN (n + 1) (by linarith)),
  unfold uniform_space.ball at hn‚ÇÅ hn‚ÇÇ,
  rw set.mem_preimage at hn‚ÇÅ hn‚ÇÇ,

  -- `W` is a symmetric relation so `(partial_sum a n, T) ‚àà W`.
  rw symmetric_rel.mk_mem_comm hW‚ÇÇ at hn‚ÇÅ,

  -- Since `W ‚äÜ U`, `(partial_sum a n, T) ‚àà U` and `(T, partial_sum a (n + 1)) ‚àà U`,
  replace hn‚ÇÅ := hW‚ÇÉ hn‚ÇÅ,
  replace hn‚ÇÇ := hW‚ÇÉ hn‚ÇÇ,

  -- Because `comp_rel U U ‚äÜ m ‚Åª¬π' t`, `(partial_sum a n, partial_sum a (n + 1)) ‚àà m ‚Åª¬π t`.
  show (partial_sum a n, partial_sum a (n + 1)) ‚àà m ‚Åª¬π' t, from hU‚ÇÇ (mem_comp_rel.mpr ‚ü®T, ‚ü®hn‚ÇÅ, hn‚ÇÇ‚ü©‚ü©)
end

lemma partial_sums_le (a b : ‚Ñï ‚Üí ‚Ñù) (h : ‚àÄ n, a n ‚â§ b n) : ‚àÄ n, partial_sum a n ‚â§ partial_sum b n :=
begin
  intro n,
  induction n with n hi,
  { simp },
  calc partial_sum a (n + 1) = a n + partial_sum a n : partial_sum_next a n
    ... ‚â§ b n + partial_sum b n : add_le_add (h n) (hi)
    ... = partial_sum b (n + 1) : (partial_sum_next b n).symm
end

theorem summable_of_series_absolute_convergence_real {f : ‚Ñï ‚Üí ‚Ñù}
  (h : series_converges_absolutely f) : summable f :=
summable_of_absolute_convergence_real h

noncomputable def pos_terms (a : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) := if 0 ‚â§ a n then a n else 0
noncomputable def neg_terms (a : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) := if 0 ‚â§ a n then 0 else a n

lemma pos_terms_nonneg (a : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) : 0 ‚â§ pos_terms a n :=
begin
  unfold pos_terms,
  by_cases h : 0 ‚â§ a n; simp [h],
end

lemma monotone_partial_sums_norm_series (a : ‚Ñï ‚Üí ‚Ñù) : monotone (partial_sum (Œª n, ‚Äña n‚Äñ)) :=
begin
  unfold monotone,
  intros n m hnm,
  induction m with m ih,
  { rw nat.eq_zero_of_le_zero hnm },
  { by_cases h : n = m.succ,
    { rw h },
    { have : n ‚â§ m := nat.le_of_lt_succ (lt_of_le_of_ne hnm h),
      calc partial_sum (Œª n, ‚Äña n‚Äñ) n ‚â§ partial_sum (Œª n, ‚Äña n‚Äñ) m : ih this
                                  ... ‚â§ ‚Äña m‚Äñ + partial_sum (Œª n, ‚Äña n‚Äñ) m : by linarith [norm_nonneg (a m)]
                                  ... = partial_sum (Œª n, ‚Äña n‚Äñ) (m + 1) : by rw partial_sum_next } }
end

lemma monotone_partial_sums_pos_terms (a : ‚Ñï ‚Üí ‚Ñù) : monotone (partial_sum (pos_terms a)) :=
begin
  unfold monotone,
  intros n m hnm,
  induction m with m ih,
  { rw nat.eq_zero_of_le_zero hnm },
  { by_cases h : n = m.succ,
    { rw h },
    { have : n ‚â§ m := nat.le_of_lt_succ (lt_of_le_of_ne hnm h),
      have pt_nonneg : 0 ‚â§ pos_terms a m := pos_terms_nonneg a m,
      calc partial_sum (Œª n, pos_terms a n) n ‚â§ partial_sum (Œª n, pos_terms a n) m : ih this
                                  ... ‚â§ pos_terms a m + partial_sum (Œª n, pos_terms a n) m : by linarith
                                  ... = partial_sum (pos_terms a) (m + 1) : by rw partial_sum_next } }
end

lemma tendsto_at_top_of_conditional_convergence {a : ‚Ñï ‚Üí ‚Ñù}
  (h : ¬¨series_converges_absolutely a) :
    filter.tendsto (partial_sum (Œª n, ‚Äña n‚Äñ)) filter.at_top filter.at_top :=
begin
  cases tendsto_of_monotone (monotone_partial_sums_norm_series a),
  { assumption },
  { contradiction }
end

/-TODO: I'm not actually sure this lemma is useful-/
lemma pos_terms_ge_absolute_value (a : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) :
   partial_sum (pos_terms a) n ‚â§ partial_sum (Œª k : ‚Ñï, |a k|) n :=
begin
  revert n,
  apply partial_sums_le,
  intro k,
  unfold pos_terms,
  by_cases h : 0 ‚â§ a k,
  { simp [h, abs_eq_self.mpr h] },
  { simp [h] }
end

lemma partial_sums_pos_terms_tendsto_at_top_of_conditional_convergence {a : ‚Ñï ‚Üí ‚Ñù}
  (h‚ÇÅ : ¬¨series_converges_absolutely a) :
    filter.tendsto (partial_sum (pos_terms a)) filter.at_top filter.at_top :=
begin
  /-
  rw filter.tendsto_def,
  intros s hs,
  rw filter.mem_at_top_sets at ‚ä¢,
  unfold series_converges_absolutely at h‚ÇÇ,
  unfold series_converges at h‚ÇÇ,
  -- filter.tendsto_at_top_at_top_of_monotone,-/
  replace h‚ÇÅ := tendsto_at_top_of_conditional_convergence h‚ÇÅ,
  rw filter.tendsto_iff_eventually at h‚ÇÅ ‚ä¢,
  /-rw filter.tendsto_def at h‚ÇÅ ‚ä¢,
  intros s hs,
  specialize h‚ÇÅ s hs,
  rw filter.mem_at_top_sets at h‚ÇÅ ‚ä¢,-/
  sorry
end

lemma exists_positive_of_series_converges {a : ‚Ñï ‚Üí ‚Ñù} (h : series_converges a) (s : finset ‚Ñï) :
  ‚àÉ (n : ‚Ñï), 0 ‚â§ a n ‚àß n ‚àâ s :=
begin
  sorry
end

noncomputable def riemann_permute_aux (a : ‚Ñï ‚Üí ‚Ñù) (M : ‚Ñù) : ‚Ñï ‚Üí ‚Ñï √ó finset ‚Ñï √ó ‚Ñù
| 0 := ‚ü®0, ‚àÖ, 0‚ü©
| (k+1) :=
  let ‚ü®œÉk, ak, sk‚ü© := riemann_permute_aux k in
  if sk ‚â§ M then sorry
  else sorry


theorem riemann_rearrangement_theorem {a : ‚Ñï ‚Üí ‚Ñù} (h‚ÇÅ : series_converges a)
  (h‚ÇÇ : ¬¨series_converges_absolutely a) (M : ‚Ñù) : ‚àÉ (p : equiv.perm ‚Ñï),
    filter.tendsto (partial_sum (Œª n, a (p n))) filter.at_top (ùìù M) := sorry
