/-
Copyright (c) 2022 Mantas Bak≈°ys. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mantas Bak≈°ys
-/
import measure_theory.measure.lebesgue.eq_haar

/-!
# Cauchy's Functional Equation

This file contains the classical results about the Cauchy's functional equation
`f (x + y) = f x + f y` for functions `f : ‚Ñù ‚Üí ‚Ñù`. In this file, we prove that the solutions to this
equation are linear up to the case when `f` is a Lebesgue measurable functions, while also deducing
intermediate well-known variants.
-/

open add_monoid_hom measure_theory measure_theory.measure metric nnreal set
open_locale pointwise topology

section seminormed_group
open topological_space
variables {G H : Type*} [seminormed_add_group G] [topological_add_group G] [is_R_or_C H] {s : set G}

lemma add_monoid_hom.continuous_of_bounded_nhds_zero (f : G ‚Üí+ H) (hs : s ‚àà ùìù (0 : G))
  (hbounded : bounded (f '' s)) : continuous f :=
begin
  obtain ‚ü®Œ¥, hŒ¥, hUŒµ‚ü© := metric.mem_nhds_iff.mp hs,
  obtain ‚ü®C, hC‚ü© := (bounded_iff_subset_ball 0).1 (hbounded.mono $ image_subset f hUŒµ),
  refine continuous_of_continuous_at_zero _ (continuous_at_iff.2 $ Œª Œµ (hŒµ : _ < _), _),
  simp only [gt_iff_lt, dist_zero_right, _root_.map_zero, exists_prop],
  obtain ‚ü®n, hn‚ü© := exists_nat_gt (C / Œµ),
  obtain hC‚ÇÄ | hC‚ÇÄ := le_or_lt C 0,
  { refine ‚ü®Œ¥, hŒ¥, Œª x hxŒ¥, _‚ü©,
    rwa [eq_of_dist_eq_zero (dist_nonneg.antisymm' $ (mem_closed_ball.1 $ hC $ mem_image_of_mem f $
      mem_ball_zero_iff.2 hxŒ¥).trans hC‚ÇÄ), norm_zero] },
  have hnpos : 0 < (n : ‚Ñù) := (div_pos hC‚ÇÄ hŒµ).trans hn,
  refine ‚ü®Œ¥ / n, div_pos hŒ¥ hnpos, Œª x hxŒ¥, _‚ü©,
  have h2 : f (n ‚Ä¢ x) = n ‚Ä¢ f x := map_nsmul f _ _,
  have hn' : (n : H) ‚â† 0 := nat.cast_ne_zero.2 (by { rintro rfl, simpa using hnpos }),
  simp_rw [nsmul_eq_mul, mul_comm (n : H), ‚Üêdiv_eq_iff hn'] at h2,
  replace hxŒ¥ : ‚Äñn ‚Ä¢ x‚Äñ < Œ¥,
  { refine (norm_nsmul_le _ _).trans_lt _,
    simpa only [norm_mul, real.norm_coe_nat, lt_div_iff hnpos, mul_comm] using hxŒ¥ },
  rw [‚Üêh2, norm_div, is_R_or_C.norm_nat_cast, div_lt_iff' hnpos, ‚Üêmem_ball_zero_iff],
  rw div_lt_iff hŒµ at hn,
  exact hC.trans (closed_ball_subset_ball hn) (mem_image_of_mem _ $ mem_ball_zero_iff.2 hxŒ¥),
end

end seminormed_group

variables {Œπ : Type*} [fintype Œπ] {s : set ‚Ñù} {a : ‚Ñù}

local notation `‚Ñù‚Åø` := Œπ ‚Üí ‚Ñù

lemma add_monoid_hom.measurable_of_continuous (f : ‚Ñù ‚Üí+ ‚Ñù) (h : measurable f) : continuous f :=
let ‚ü®s, hs, hbdd‚ü© := h.exists_nhds_zero_bounded f in f.continuous_of_bounded_nhds_zero hs hbdd

-- do we want this one and where would it go?
lemma is_linear_map_iff_apply_eq_apply_one_mul {M : Type*} [comm_semiring M] (f : M ‚Üí+ M) :
  is_linear_map M f ‚Üî ‚àÄ x : M, f x = f 1 * x :=
begin
  refine ‚ü®Œª h x, _, Œª h, ‚ü®map_add f, Œª c x, _‚ü©‚ü©,
  { convert h.2 x 1 using 1,
    { simp only [algebra.id.smul_eq_mul, mul_one] },
    { simp only [mul_comm, algebra.id.smul_eq_mul] }},
  { rw [smul_eq_mul, smul_eq_mul, h (c * x), h x, ‚Üêmul_assoc, mul_comm _ c, mul_assoc] }
end

lemma is_linear_rat (f : ‚Ñù ‚Üí+ ‚Ñù) (q : ‚Ñö) : f q = f 1 * q :=
begin
  have := map_rat_cast_smul f ‚Ñö ‚Ñö q (1 : ‚Ñù),
  simpa [mul_comm] using this,
end

lemma additive_is_bounded_of_bounded_on_interval (f : ‚Ñù ‚Üí+ ‚Ñù) (hs : s ‚àà ùìù a)
  (h : bounded (f '' s)) : ‚àÉ V, V ‚àà ùìù (0 : ‚Ñù) ‚àß bounded (f '' V) :=
begin
  rcases metric.mem_nhds_iff.mp hs with ‚ü®Œ¥, hŒ¥, hŒ¥a‚ü©,
  refine ‚ü®ball 0 Œ¥, ball_mem_nhds 0 hŒ¥, _‚ü©,
  rw bounded_iff_forall_norm_le,
  simp only [mem_image, mem_ball_zero_iff, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ],
  obtain ‚ü®M, hM‚ü© := bounded_iff_forall_norm_le.1 h,
  simp only [mem_image, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ] at hM,
  refine ‚ü®M + M, Œª x hxŒ¥, (norm_le_add_norm_add _ $ f a).trans $ add_le_add _ $ hM _ $ hŒ¥a _‚ü©,
  { rw ‚Üêmap_add f,
    refine hM _ (hŒ¥a _),
    simp only [mem_ball],
    convert hxŒ¥,
    rw [‚Üêdist_zero_right, ‚Üêdist_add_right x 0 a, zero_add] },
  { simpa [mem_ball, dist_self] }
end

-- to generalize
lemma add_monoid_hom.continuous_at_iff_continuous_at_zero (f : ‚Ñù ‚Üí+ ‚Ñù) :
  continuous_at f a ‚Üî continuous_at f 0 :=
begin
  refine ‚ü®Œª ha, continuous_at_iff.2 $ Œª Œµ hŒµ, Exists‚ÇÇ.imp (Œª Œ¥ hŒ¥, _) (continuous_at_iff.1 ha Œµ hŒµ),
    Œª h, (continuous_of_continuous_at_zero f h).continuous_at‚ü©,
  refine Œª hŒ¥f y hyŒ¥, _,
  replace hyŒ¥ : dist (y + a) a < Œ¥,
  { convert hyŒ¥ using 1,
    simp only [dist_eq_norm, sub_zero, add_sub_cancel] },
  convert hŒ¥f hyŒ¥ using 1,
  simp only [dist_eq_norm, map_sub, _root_.map_add, _root_.map_zero, sub_zero, add_sub_cancel],
end

lemma continuous.is_linear_real (f : ‚Ñù ‚Üí+ ‚Ñù) (h : continuous f) : is_linear_map ‚Ñù f :=
(f.to_real_linear_map h).to_linear_map.is_linear

lemma is_linear_map_real_of_bounded_nhds (f : ‚Ñù ‚Üí+ ‚Ñù) (hs : s ‚àà ùìù a) (hf : bounded (f '' s)) :
  is_linear_map ‚Ñù f :=
let ‚ü®V, hV0, hVb‚ü© := additive_is_bounded_of_bounded_on_interval f hs hf in
  (f.continuous_of_bounded_nhds_zero hV0 hVb).is_linear_real f

lemma monotone_on.is_linear_map_real (f : ‚Ñù ‚Üí+ ‚Ñù) (hs : s ‚àà ùìù a) (hf : monotone_on f s) :
  is_linear_map ‚Ñù f :=
begin
  obtain ‚ü®t, ht, h‚ü© := metric.mem_nhds_iff.mp hs,
  refine is_linear_map_real_of_bounded_nhds f (closed_ball_mem_nhds a $ half_pos ht) _,
  replace h := (closed_ball_subset_ball $ half_lt_self ht).trans h,
  rw real.closed_ball_eq_Icc at ‚ä¢ h,
  have ha :  a - t / 2 ‚â§ a + t / 2 := by linarith,
  refine bounded_of_bdd_above_of_bdd_below (hf.map_bdd_above h _) (hf.map_bdd_below h _),
  { refine ‚ü®a + t / 2, _, h $ right_mem_Icc.2 ha‚ü©,
    rw upper_bounds_Icc ha,
    exact left_mem_Ici },
  { refine ‚ü®a - t / 2, _, h $ left_mem_Icc.2 ha‚ü©,
    rw lower_bounds_Icc ha,
    exact right_mem_Iic }
end
