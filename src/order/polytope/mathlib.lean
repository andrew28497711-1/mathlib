/-
Copyright (c) 2022 Ya√´l Dillies, Violeta Hern√°ndez Palacios. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Violeta Hern√°ndez Palacios, Grayson Burton, Vladimir Ivanov
-/
import algebra.big_operators.finsupp
import algebra.big_operators.order
import data.dfinsupp.order
import data.finsupp.order
import data.nat.succ_pred
import data.sum.order
import order.atoms
import order.locally_finite
import order.grade
import order.rel_iso.group
import order.zorn

/-!
# To move
-/

open finset function order

variables {Œπ ùïÜ ‚Ñô Œ± Œ≤ Œ≥ : Type*} {œÉ : Œπ ‚Üí Type*}

section order_dual
open order_dual
variables {a b : Œ±·µí·µà}

variables [preorder Œ±] [locally_finite_order Œ±]

lemma Icc_eq : Icc a b = (Icc (of_dual b) (of_dual a)).map to_dual.to_embedding := Icc_to_dual _ _
lemma Ico_eq : Ico a b = (Ioc (of_dual b) (of_dual a)).map to_dual.to_embedding := Ico_to_dual _ _
lemma Ioc_eq : Ioc a b = (Ico (of_dual b) (of_dual a)).map to_dual.to_embedding := Ioc_to_dual _ _
lemma Ioo_eq : Ioo a b = (Ioo (of_dual b) (of_dual a)).map to_dual.to_embedding := Ioo_to_dual _ _

@[simp] lemma card_Icc : (Icc a b).card = (Icc (of_dual b) (of_dual a)).card :=
by rw [Icc_eq, card_map]

@[simp] lemma card_Ico : (Ico a b).card = (Ioc (of_dual b) (of_dual a)).card :=
by rw [Ico_eq, card_map]

@[simp] lemma card_Ioc : (Ioc a b).card = (Ico (of_dual b) (of_dual a)).card :=
by rw [Ioc_eq, card_map]

@[simp] lemma card_Ioo : (Ioo a b).card = (Ioo (of_dual b) (of_dual a)).card :=
by rw [Ioo_eq, card_map]

end order_dual

section
variables [preorder Œ±]

/-- A constructor for a locally finite order from intervals that are "too big". -/
@[reducible] -- See note [reducible non-instances]
def locally_finite_order.of_decidable_le_lt [decidable_rel ((‚â§) : Œ± ‚Üí Œ± ‚Üí Prop)]
  [decidable_rel ((<) : Œ± ‚Üí Œ± ‚Üí Prop)] (Icc Ico Ioc Ioo : Œ± ‚Üí Œ± ‚Üí finset Œ±)
  (hIcc : ‚àÄ ‚¶Éa b x‚¶Ñ, a ‚â§ x ‚Üí x ‚â§ b ‚Üí x ‚àà Icc a b) (hIco : ‚àÄ ‚¶Éa b x‚¶Ñ, a ‚â§ x ‚Üí x < b ‚Üí x ‚àà Ico a b)
  (hIoc : ‚àÄ ‚¶Éa b x‚¶Ñ, a < x ‚Üí x ‚â§ b ‚Üí x ‚àà Ioc a b) (hIoo : ‚àÄ ‚¶Éa b x‚¶Ñ, a < x ‚Üí x < b ‚Üí x ‚àà Ioo a b) :
  locally_finite_order Œ± :=
{ finset_Icc := Œª a b, (Icc a b).filter (Œª x, a ‚â§ x ‚àß x ‚â§ b),
  finset_Ico := Œª a b, (Ico a b).filter (Œª x, a ‚â§ x ‚àß x < b),
  finset_Ioc := Œª a b, (Ioc a b).filter (Œª x, a < x ‚àß x ‚â§ b),
  finset_Ioo := Œª a b, (Ioo a b).filter (Œª x, a < x ‚àß x < b),
  finset_mem_Icc := by simpa using hIcc,
  finset_mem_Ico := by simpa using hIco,
  finset_mem_Ioc := by simpa using hIoc,
  finset_mem_Ioo := by simpa using hIoo }

/-- A constructor for a locally finite order from intervals that are "too big". -/
@[reducible] -- See note [reducible non-instances]
def locally_finite_order_bot.of_decidable_le_lt [decidable_rel ((‚â§) : Œ± ‚Üí Œ± ‚Üí Prop)]
  [decidable_rel ((<) : Œ± ‚Üí Œ± ‚Üí Prop)] (Iic Iio : Œ± ‚Üí finset Œ±)
  (hIic : ‚àÄ ‚¶Éb x‚¶Ñ, x ‚â§ b ‚Üí x ‚àà Iic b) (hIio : ‚àÄ ‚¶Éb x‚¶Ñ, x < b ‚Üí x ‚àà Iio b) :
  locally_finite_order_bot Œ± :=
{ finset_Iic := Œª b, (Iic b).filter (Œª x, x ‚â§ b),
  finset_Iio := Œª b, (Iio b).filter (Œª x, x < b),
  finset_mem_Iic := by simpa using hIic,
  finset_mem_Iio := by simpa using hIio }

/-- A constructor for a locally finite order from intervals that are "too big". -/
@[reducible] -- See note [reducible non-instances]
def locally_finite_order_top.of_decidable_le_lt [decidable_rel ((‚â§) : Œ± ‚Üí Œ± ‚Üí Prop)]
  [decidable_rel ((<) : Œ± ‚Üí Œ± ‚Üí Prop)] (Ici Ioi : Œ± ‚Üí finset Œ±)
  (hIci : ‚àÄ ‚¶Éa x‚¶Ñ, a ‚â§ x ‚Üí x ‚àà Ici a) (hIoi : ‚àÄ ‚¶Éa x‚¶Ñ, a < x ‚Üí x ‚àà Ioi a) :
  locally_finite_order_top Œ± :=
{ finset_Ici := Œª a, (Ici a).filter (Œª x, a ‚â§ x),
  finset_Ioi := Œª a, (Ioi a).filter (Œª x, a < x),
  finset_mem_Ici := by simpa using hIci,
  finset_mem_Ioi := by simpa using hIoi }

end

lemma is_chain_singleton (r : Œ± ‚Üí Œ± ‚Üí Prop) (a : Œ±) : is_chain r {a} := set.pairwise_singleton _ _

lemma is_chain_pair (r : Œ± ‚Üí Œ± ‚Üí Prop) {a b : Œ±} (h : r a b) : is_chain r {a, b} :=
(is_chain_singleton _ _).insert $ Œª _ hb _, or.inl $ (set.eq_of_mem_singleton hb).symm.rec_on ‚Äπ_‚Ä∫

section
variables [preorder Œ±] {a b c : Œ±}

lemma ne_bot_of_lt [order_bot Œ±] {a b : Œ±} (h : a < b) : b ‚â† ‚ä• := (bot_le.trans_lt h).ne'

lemma ne_top_of_gt [order_top Œ±] {a b : Œ±} (h : a < b) : a ‚â† ‚ä§ := (h.trans_le le_top).ne

lemma not_covby_of_lt_lt {c : Œ±} (hab : a < b) (hbc : b < c) : ¬¨ a ‚ãñ c := Œª h, h.2 hab hbc

alias not_covby_of_lt_lt ‚Üê has_lt.lt.not_covby_of_lt

section
variables {p : Œ± ‚Üí Prop}

open subtype

lemma subtype.coe_strict_mono : strict_mono (coe : subtype p ‚Üí Œ±) := Œª _ _, coe_lt_coe.1

end
end

section preorder
variables [preorder Œ±] [preorder Œ≤]

@[simp] lemma is_min_map (e : Œ± ‚âÉo Œ≤) {a : Œ±} : is_min (e a) ‚Üî is_min a :=
e.forall_congr_left.symm.trans $ by simp [is_min]

@[simp] lemma is_max_map (e : Œ± ‚âÉo Œ≤) {a : Œ±} : is_max (e a) ‚Üî is_max a :=
e.forall_congr_left.symm.trans $ by simp [is_max]

end preorder

namespace order_iso

/-- The tautological action by `Œ± ‚âÉo Œ±` on `Œ±`. -/
instance apply_mul_action (Œ± : Type*) [preorder Œ±] : mul_action (Œ± ‚âÉo Œ±) Œ± :=
{ smul := coe_fn,
  one_smul := Œª _, rfl,
  mul_smul := Œª _ _ _, rfl }

@[simp] lemma smul_def {Œ± : Type*} [preorder Œ±] (f : Œ± ‚âÉo Œ±) (a : Œ±) : f ‚Ä¢ a = f a := rfl

end order_iso

namespace flag
section preorder
variables [preorder Œ±] {s : flag Œ±} {c : set Œ±} {a b : Œ±}

/-- Reinterpret a maximal chain as a flag. -/
@[simps] protected def _root_.is_max_chain.flag (hc : is_max_chain (‚â§) c) : flag Œ± :=
‚ü®c, hc.is_chain, hc.2‚ü©

lemma _root_.is_chain.exists_subset_flag (hc : is_chain (‚â§) c) : ‚àÉ s : flag Œ±, c ‚äÜ s :=
let ‚ü®s, hs, hcs‚ü© := hc.exists_max_chain in ‚ü®hs.flag, hcs‚ü©

lemma exists_mem (a : Œ±) : ‚àÉ s : flag Œ±, a ‚àà s :=
let ‚ü®s, hs‚ü© := set.subsingleton_singleton.is_chain.exists_subset_flag in ‚ü®s, hs rfl‚ü©

lemma exists_mem_mem (hab : a ‚â§ b) : ‚àÉ s : flag Œ±, a ‚àà s ‚àß b ‚àà s :=
by simpa [set.insert_subset] using (is_chain_pair _ hab).exists_subset_flag

instance : nonempty (flag Œ±) := ‚ü®max_chain_spec.flag‚ü©

lemma mem_iff_forall_le_or_ge : a ‚àà s ‚Üî ‚àÄ ‚¶Éb‚¶Ñ, b ‚àà s ‚Üí a ‚â§ b ‚à® b ‚â§ a :=
‚ü®Œª ha b, s.le_or_le ha, Œª hb, of_not_not $ Œª ha, set.ne_insert_of_not_mem _ ‚Äπ_‚Ä∫ $ s.max_chain.2
  (s.chain_le.insert $ Œª c hc _, hb hc) $ set.subset_insert _ _‚ü©

end preorder

section partial_order
variables [partial_order Œ±] {s : flag Œ±}

@[simp] lemma coe_covby_coe {a b : s} : (a : Œ±) ‚ãñ b ‚Üî a ‚ãñ b :=
begin
  refine and_congr_right' ‚ü®Œª h c hac, h hac, Œª h c hac hcb,
    @h ‚ü®c, mem_iff_forall_le_or_ge.2 $ Œª d hd, _‚ü© hac hcb‚ü©,
  classical,
  obtain hda | had := le_or_lt (‚ü®d, hd‚ü© : s) a,
  { exact or.inr ((subtype.coe_le_coe.2 hda).trans hac.le) },
  obtain hbd | hdb := le_or_lt b ‚ü®d, hd‚ü©,
  { exact or.inl (hcb.le.trans hbd) },
  { cases h had hdb }
end

@[simp] lemma is_max_coe {a : s} : is_max (a : Œ±) ‚Üî is_max a :=
‚ü®Œª h b hab, h hab, Œª h b hab, @h ‚ü®b, mem_iff_forall_le_or_ge.2 $ Œª c hc,
  by { classical, exact or.inr (hab.trans' $ h.is_top ‚ü®c, hc‚ü©) }‚ü© hab‚ü©

@[simp] lemma is_min_coe {a : s} : is_min (a : Œ±) ‚Üî is_min a :=
‚ü®Œª h b hba, h hba, Œª h b hba, @h ‚ü®b, mem_iff_forall_le_or_ge.2 $ Œª c hc,
  by { classical, exact or.inl (hba.trans $ h.is_bot ‚ü®c, hc‚ü©) }‚ü© hba‚ü©

instance [preorder ùïÜ] [grade_order ùïÜ Œ±] (s : flag Œ±) : grade_order ùïÜ s :=
grade_order.lift_right coe subtype.coe_strict_mono $ Œª _ _, coe_covby_coe.2

instance [preorder ùïÜ] [grade_min_order ùïÜ Œ±] (s : flag Œ±) : grade_min_order ùïÜ s :=
grade_min_order.lift_right coe subtype.coe_strict_mono (Œª _ _, coe_covby_coe.2) $ Œª _, is_min_coe.2

instance [preorder ùïÜ] [grade_max_order ùïÜ Œ±] (s : flag Œ±) : grade_max_order ùïÜ s :=
grade_max_order.lift_right coe subtype.coe_strict_mono (Œª _ _, coe_covby_coe.2) $ Œª _, is_max_coe.2

instance [preorder ùïÜ] [grade_bounded_order ùïÜ Œ±] (s : flag Œ±) : grade_bounded_order ùïÜ s :=
grade_bounded_order.lift_right coe subtype.coe_strict_mono (Œª _ _, coe_covby_coe.2)
  (Œª _, is_min_coe.2) (Œª _, is_max_coe.2)

@[simp, norm_cast] lemma grade_coe [preorder ùïÜ] [grade_order ùïÜ Œ±] (a : s) :
  grade ùïÜ (a : Œ±) = grade ùïÜ a := rfl

end partial_order
end flag

namespace flag
variables [preorder Œ±] [preorder Œ≤]
open_locale pointwise

instance : has_smul (Œ± ‚âÉo Œ±) (flag Œ±) :=
‚ü®Œª e s,
  { carrier := e ‚Ä¢ s,
    chain' := s.chain_le.image _ _ _ e.monotone,
    max_chain' := Œª t ht hst, (smul_eq_iff_eq_inv_smul _).2 $ s.max_chain.2
      (ht.image _ _ _ e.symm.monotone) $ set.set_smul_subset_iff.1 hst }‚ü©

@[simp, norm_cast] lemma coe_smul (e : Œ± ‚âÉo Œ±) (s : flag Œ±) : (‚Üë(e ‚Ä¢ s) : set Œ±) = e ‚Ä¢ s := rfl

instance : mul_action (Œ± ‚âÉo Œ±) (flag Œ±) := set_like.coe_injective.mul_action _ coe_smul

end flag

section
variables [preorder Œ±] [comm_group Œ±] [covariant_class Œ± Œ± (*) (‚â§)] {a b c : Œ±}

open order_dual

/-- `equiv.div_left` as an `order_iso`. -/
@[to_additive "`equiv.sub_left` as an `order_iso`.", simps to_equiv apply {simp_rhs := tt}]
def order_iso.div_left (a : Œ±) : Œ± ‚âÉo Œ±·µí·µà :=
{ map_rel_iff' := Œª b c, div_le_div_iff_left _, to_equiv := (equiv.div_left a).trans to_dual }

/-- `equiv.div_right` as an `order_iso`. -/
@[to_additive "`equiv.sub_right` as an `order_iso`.", simps to_equiv apply {simp_rhs := tt}]
def order_iso.div_right (a : Œ±) : Œ± ‚âÉo Œ± :=
{ map_rel_iff' := Œª b c, div_le_div_iff_right _, to_equiv := equiv.div_right a }

end

section
variables [preorder Œ±] [comm_group Œ±] [covariant_class Œ± Œ± (*) (‚â§)] {a b c : Œ±}

@[simp, to_additive] lemma mul_covby_mul_left : a * b ‚ãñ a * c ‚Üî b ‚ãñ c :=
apply_covby_apply_iff $ order_iso.mul_left a

@[simp, to_additive] lemma mul_covby_mul_right : a * c ‚ãñ b * c ‚Üî a ‚ãñ b :=
apply_covby_apply_iff $ order_iso.mul_right c

alias mul_covby_mul_left ‚Üî covby.of_mul_left covby.mul_left
alias mul_covby_mul_right ‚Üî covby.of_mul_right covby.mul_right

@[simp, to_additive] lemma div_covby_div_left : a / b ‚ãñ a / c ‚Üî c ‚ãñ b :=
to_dual_covby_to_dual_iff.symm.trans $ apply_covby_apply_iff $ order_iso.div_left a

@[simp, to_additive] lemma div_covby_div_right : a / c ‚ãñ b / c ‚Üî a ‚ãñ b :=
apply_covby_apply_iff $ order_iso.div_right c

alias div_covby_div_left ‚Üî covby.of_div_left covby.div_left
alias div_covby_div_right ‚Üî covby.of_div_right covby.div_right

end

section
variables [canonically_linear_ordered_add_monoid Œ±] [has_sub Œ±] [has_ordered_sub Œ±]
 [covariant_class Œ± Œ± (+) (<)] [contravariant_class Œ± Œ± (+) (‚â§)] {a b c : Œ±}

lemma covby.add_left' (h : b ‚ãñ c) (a : Œ±) : a + b ‚ãñ a + c :=
‚ü®add_lt_add_left h.lt _, Œª d hb hc,
  h.2 (lt_tsub_iff_left.2 hb) ((tsub_lt_iff_left $ le_self_add.trans hb.le).2 hc)‚ü©

lemma covby.add_right' (h : b ‚ãñ c) (a : Œ±) : b + a ‚ãñ c + a :=
‚ü®add_lt_add_right h.lt _, Œª d hb hc,
  h.2 (lt_tsub_iff_right.2 hb) ((tsub_lt_iff_right $ le_add_self.trans hb.le).2 hc)‚ü©

lemma covby.tsub_left (hca : c ‚â§ a) (h : b ‚ãñ c) : a - c ‚ãñ a - b :=
‚ü®(tsub_lt_tsub_iff_left_of_le hca).2 h.lt, Œª d hb hc, h.2 (lt_tsub_comm.1 hc) $
  (tsub_lt_iff_left $ hc.le.trans tsub_le_self).2 $ lt_add_of_tsub_lt_right hb‚ü©

lemma covby.tsub_right (hab : a ‚â§ b) (h : b ‚ãñ c) : b - a ‚ãñ c - a :=
‚ü®tsub_lt_tsub_right_of_le hab h.lt, Œª d hb hc,
  h.2 ((tsub_lt_iff_left $ hab).1 hb) (lt_tsub_iff_left.1 hc)‚ü©

end

namespace pi
variables [Œ† i, preorder (œÉ i)] {a : Œ† i, œÉ i}

lemma _root_.is_min.apply' (ha : is_min a) (i : Œπ) : is_min (a i) :=
Œª c hc,
  by { classical, exact (ha (update_le_iff.2 ‚ü®hc, Œª j _, le_rfl‚ü©) i).trans_eq (update_same _ _ _) }

lemma is_min_iff : is_min a ‚Üî ‚àÄ i, is_min (a i) :=
‚ü®is_min.apply', Œª h b hb i, h _ $ hb i‚ü©

end pi

namespace sum
variables [preorder Œ±] [preorder Œ≤] {a : Œ±} {b : Œ≤}

@[simp] lemma is_min_inl_iff : is_min (inl a : Œ± ‚äï Œ≤) ‚Üî is_min a :=
begin
  refine ‚ü®Œª h b hb, inl_le_inl_iff.1 $ h $ inl_le_inl_iff.2 hb, Œª h b hb, _‚ü©,
  cases b,
  { exact inl_le_inl_iff.2 (h $ inl_le_inl_iff.1 hb) },
  { cases hb }
end

@[simp] lemma is_min_inr_iff : is_min (inr b : Œ± ‚äï Œ≤) ‚Üî is_min b :=
begin
  refine ‚ü®Œª h b hb, inr_le_inr_iff.1 $ h $ inr_le_inr_iff.2 hb, Œª h b hb, _‚ü©,
  cases b,
  { cases hb },
  { exact inr_le_inr_iff.2 (h $ inr_le_inr_iff.1 hb) }
end

@[simp] lemma is_max_inl_iff : is_max (inl a : Œ± ‚äï Œ≤) ‚Üî is_max a :=
begin
  refine ‚ü®Œª h b hb, inl_le_inl_iff.1 $ h $ inl_le_inl_iff.2 hb, Œª h b hb, _‚ü©,
  cases b,
  { exact inl_le_inl_iff.2 (h $ inl_le_inl_iff.1 hb) },
  { cases hb }
end

@[simp] lemma is_max_inr_iff : is_max (inr b : Œ± ‚äï Œ≤) ‚Üî is_max b :=
begin
  refine ‚ü®Œª h b hb, inr_le_inr_iff.1 $ h $ inr_le_inr_iff.2 hb, Œª h b hb, _‚ü©,
  cases b,
  { cases hb },
  { exact inr_le_inr_iff.2 (h $ inr_le_inr_iff.1 hb) }
end

end sum

section
variables [preorder Œ±] [preorder Œ≤] [preorder Œ≥] {f : Œ± ‚Üí Œ≥} {g : Œ≤ ‚Üí Œ≥}

open sum

lemma strict_mono.sum_elim (hf : strict_mono f) (hg : strict_mono g) : strict_mono (sum.elim f g)
| (inl a) (inl b) (lift_rel.inl h) := hf h
| (inr a) (inr b) (lift_rel.inr h) := hg h

lemma strict_anti.sum_elim (hf : strict_anti f) (hg : strict_anti g) : strict_anti (sum.elim f g)
| (inl a) (inl b) (lift_rel.inl h) := hf h
| (inr a) (inr b) (lift_rel.inr h) := hg h

end

/-! #### Lifting a graded order -/

section grade_order
variables [preorder ùïÜ] [preorder ‚Ñô] [preorder Œ±] [preorder Œ≤]

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_order_left [grade_order ùïÜ Œ±] (f : ùïÜ ‚âÉo ‚Ñô) : grade_order ‚Ñô Œ± :=
grade_order.lift_left _ f.strict_mono $ Œª _ _, (apply_covby_apply_iff f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_min_order_left [grade_min_order ùïÜ Œ±] (f : ùïÜ ‚âÉo ‚Ñô) : grade_min_order ‚Ñô Œ± :=
grade_min_order.lift_left _ f.strict_mono (Œª _ _, (apply_covby_apply_iff f).2) $ Œª _,
  (is_min_map f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_max_order_left [grade_max_order ùïÜ Œ±] (f : ùïÜ ‚âÉo ‚Ñô) : grade_max_order ‚Ñô Œ± :=
grade_max_order.lift_left _ f.strict_mono (Œª _ _, (apply_covby_apply_iff f).2) $ Œª _,
  (is_max_map f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_bounded_order_left [grade_bounded_order ùïÜ Œ±] (f : ùïÜ ‚âÉo ‚Ñô) :
  grade_bounded_order ‚Ñô Œ± :=
grade_bounded_order.lift_left _ f.strict_mono (Œª _ _, (apply_covby_apply_iff f).2)
  (Œª _, (is_min_map f).2) $ Œª _, (is_max_map f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_order_right [grade_order ùïÜ Œ≤] (f : Œ± ‚âÉo Œ≤) : grade_order ùïÜ Œ± :=
grade_order.lift_right _ f.strict_mono $ Œª _ _, (apply_covby_apply_iff f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_min_order_right [grade_min_order ùïÜ Œ≤] (f : Œ± ‚âÉo Œ≤) : grade_min_order ùïÜ Œ± :=
grade_min_order.lift_right _ f.strict_mono (Œª _ _, (apply_covby_apply_iff f).2) $ Œª _,
  (is_min_map f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_max_order_right [grade_max_order ùïÜ Œ≤] (f : Œ± ‚âÉo Œ≤) : grade_max_order ùïÜ Œ± :=
grade_max_order.lift_right _ f.strict_mono (Œª _ _, (apply_covby_apply_iff f).2) $ Œª _,
  (is_max_map f).2

/-- Transfer a graded order across an order isomorphism. -/
@[reducible] -- See note [reducible non-instances]
def order_iso.grade_bounded_order_right [grade_bounded_order ùïÜ Œ≤] (f : Œ± ‚âÉo Œ≤) :
  grade_bounded_order ùïÜ Œ± :=
grade_bounded_order.lift_right _ f.strict_mono (Œª _ _, (apply_covby_apply_iff f).2)
  (Œª _, (is_min_map f).2) $ Œª _, (is_max_map f).2

end grade_order

namespace list
variables {l : list Œ±} {a : Œ±}

lemma sublist.rfl : l <+ l := sublist.refl _

lemma sublist_singleton : Œ† {l} {a : Œ±}, l <+ [a] ‚Üí l = [] ‚à® l = [a]
| _ _ (sublist.cons  _ _  _ _ ) := or.inl $ by rwa ‚Üêsublist_nil_iff_eq_nil
| _ _ (sublist.cons2 l [] a hl) := or.inr $ by rw sublist_nil_iff_eq_nil.1 hl

lemma sublist_singleton_iff : l <+ [a] ‚Üî l = [] ‚à® l = [a] :=
‚ü®sublist_singleton, begin
  rintro (rfl | rfl),
  { exact nil_sublist _ },
  { exact sublist.rfl }
end‚ü©

lemma subperm.rfl : l <+~ l := subperm.refl _

lemma subperm_singleton : l <+~ [a] ‚Üí l = nil ‚à® l = [a] :=
begin
  rintro ‚ü®l', hl, hl'‚ü©,
  obtain rfl | rfl := sublist_singleton hl',
  { exact or.inl hl.symm.eq_nil },
  { exact or.inr hl.symm.eq_singleton }
end

lemma subperm_singleton_iff' : l <+~ [a] ‚Üî l = nil ‚à® l = [a] :=
‚ü®subperm_singleton, begin
  rintro (rfl | rfl),
  { exact nil_subperm },
  { exact subperm.rfl }
end‚ü©

end list

namespace multiset
variables {s t : multiset Œ±} {a : Œ±}

@[simp] lemma cons_lt_cons_iff : a ::‚Çò s < a ::‚Çò t ‚Üî s < t :=
lt_iff_lt_of_le_iff_le' (cons_le_cons_iff _) (cons_le_cons_iff _)

lemma cons_lt_cons (a : Œ±) (h : s < t) : a ::‚Çò s < a ::‚Çò t := cons_lt_cons_iff.2 h

lemma le_singleton_iff : s ‚â§ {a} ‚Üî s = 0 ‚à® s = {a} :=
quot.induction_on s $ Œª l, by simp only [cons_zero, ‚Üêcoe_singleton, quot_mk_to_coe'', coe_le,
  coe_eq_zero, coe_eq_coe, list.perm_singleton, list.subperm_singleton_iff']

lemma lt_singleton_iff : s < {a} ‚Üî s = 0 :=
begin
  simp [lt_iff_le_and_ne, le_singleton_iff, or_and_distrib_right, or_iff_left (and_not_self _).1,
    and_iff_left_of_imp],
  rintro rfl,
  exact (singleton_ne_zero _).symm,
end

lemma covby_cons (m : multiset Œ±) (a : Œ±) : m ‚ãñ a ::‚Çò m :=
‚ü®lt_cons_self _ _, begin
  simp_rw lt_iff_cons_le,
  rintros m' ‚ü®b, hbm'‚ü© ‚ü®c, hcm'‚ü©,
  apply @irrefl _ (<) _ m,
  have h := lt_of_le_of_lt hbm' (lt_cons_self _ c),
  replace h := lt_of_lt_of_le h hcm',
  clear hbm' hcm',
  induction m using multiset.induction with d m hm,
  { rw [cons_zero a, lt_singleton_iff] at h,
    exact (cons_ne_zero h).elim },
  { simp_rw cons_swap _ d at h,
    rw cons_lt_cons_iff at h ‚ä¢,
    exact hm h }
end‚ü©

lemma _root_.covby.exists_multiset_cons (h : s ‚ãñ t) : ‚àÉ a, t = a ::‚Çò s :=
(lt_iff_cons_le.1 h.lt).imp $ Œª a ha, ha.eq_of_not_gt $ h.2 $ lt_cons_self _ _

lemma covby_iff : s ‚ãñ t ‚Üî ‚àÉ a, t = a ::‚Çò s :=
‚ü®covby.exists_multiset_cons, by { rintro ‚ü®a, rfl‚ü©, exact covby_cons _ _ }‚ü©

lemma _root_.covby.card_multiset (h : s ‚ãñ t) : s.card ‚ãñ t.card :=
by { obtain ‚ü®a, rfl‚ü© := h.exists_multiset_cons, rw card_cons, exact covby_succ _ }

lemma card_strict_mono : strict_mono (card : multiset Œ± ‚Üí ‚Ñï) := Œª _ _, card_lt_of_lt

end multiset

namespace finset
variables {s t : finset Œ±}

-- golf using `image_covby_iff`
@[simp] lemma val_covby_iff : s.1 ‚ãñ t.1 ‚Üî s ‚ãñ t :=
begin
  split;
  rintro ‚ü®hlt, no_intermediate‚ü©;
  split;
  simp at *;
  rwa [‚Üêval_lt_iff] at *;
  intros c hsc hct;
  simp at *;
  rw [‚Üêval_lt_iff] at *,
  { apply @no_intermediate c.val; assumption },
  { apply @no_intermediate ‚ü®c, multiset.nodup_of_le hct.1 t.nodup‚ü©;
    rw ‚Üêval_lt_iff;
    assumption }
end

alias val_covby_iff ‚Üî _ covby.finset_val

lemma _root_.covby.card_finset (h : s ‚ãñ t) : s.card ‚ãñ t.card := (val_covby_iff.2 h).card_multiset

lemma _root_.is_min.eq_empty : is_min s ‚Üí s = ‚àÖ := is_min.eq_bot

lemma val_strict_mono : strict_mono (val : finset Œ± ‚Üí multiset Œ±) := Œª _ _, val_lt_iff.2

lemma card_strict_mono : strict_mono (card : finset Œ± ‚Üí ‚Ñï) := Œª _ _, card_lt_card

end finset

namespace finsupp
variables [canonically_ordered_add_monoid Œ±] [canonically_ordered_add_monoid Œ≤] {f g : Œπ ‚Üí‚ÇÄ Œ±}
  {m : Œπ ‚Üí Œ± ‚Üí Œ≤}

lemma support_mono : monotone (support : (Œπ ‚Üí‚ÇÄ Œ≤) ‚Üí finset Œπ) :=
Œª f g h i hi, by { rw [mem_support_iff, ‚Üêbot_eq_zero] at ‚ä¢ hi, exact ne_bot_of_le_ne_bot hi (h i) }

lemma sum_le_sum (h : f ‚â§ g) (hm : ‚àÄ i, monotone (m i)) : f.sum m ‚â§ g.sum m :=
(finset.sum_le_sum_of_subset_of_nonneg (support_mono h) $ Œª _ _ _, zero_le _).trans $
  sum_le_sum $ Œª i _, hm i $ h i

end finsupp

namespace dfinsupp
variables [decidable_eq Œπ] [Œ† i, canonically_ordered_add_monoid (œÉ i)]
  [Œ† i (x : œÉ i), decidable (x ‚â† 0)] [canonically_ordered_add_monoid Œ±] {f g : Œ†‚ÇÄ i, œÉ i}
  {m : Œ† i, œÉ i ‚Üí Œ±}

lemma support_mono : monotone (support : (Œ†‚ÇÄ i, œÉ i) ‚Üí finset Œπ) :=
Œª f g h i hi, by { rw [mem_support_iff, ‚Üêbot_eq_zero] at ‚ä¢ hi, exact ne_bot_of_le_ne_bot hi (h i) }

lemma sum_le_sum (h : f ‚â§ g) (hm : ‚àÄ i, monotone (m i)) : f.sum m ‚â§ g.sum m :=
(finset.sum_le_sum_of_subset_of_nonneg (support_mono h) $ Œª _ _ _, zero_le _).trans $
  sum_le_sum $ Œª i _, hm i $ h i

end dfinsupp

namespace fin
variables {n : ‚Ñï} {a b : fin n}

@[simp] lemma coe_inj : (a : ‚Ñï) = b ‚Üî a = b := coe_eq_coe _ _

end fin

namespace nat

/-- A set of nats without gaps is an interval. The sizes of the gaps and intervals we consider are
bounded by `n`, so that we may induct on it. -/
private lemma all_ioo_of_ex_ioo {S : set ‚Ñï} (n : ‚Ñï) {a b c}
  (hS : ‚àÄ {a b c} (hle : b ‚â§ a + n) (ha : a ‚àà S) (hb : b ‚àà S) (hac : a < c) (hcb : c < b),
    (S ‚à© set.Ioo a b).nonempty)
  (hle : b ‚â§ a + n) (ha : a ‚àà S) (hb : b ‚àà S) (hac : a < c) (hcb : c < b) : c ‚àà S :=
begin
  revert a b c,
  induction n with n hS',
  { exact Œª a b c hle ha hb hac hcb, (not_lt_of_ge hle (lt_trans hac hcb)).elim },
  intros a b c hle ha hb hac hcb,
  rcases hS hle ha hb hac hcb with ‚ü®d, hd, had, hdb‚ü©,
  cases eq_or_ne c d with hcd hcd, { rwa hcd },
  have hxy : ‚àÉ x y, y ‚â§ x + n ‚àß x ‚àà S ‚àß y ‚àà S ‚àß x < c ‚àß c < y := begin
    cases ne.lt_or_lt hcd with hcd hdc,
    { refine ‚ü®a, d, nat.le_of_lt_succ _, ha, hd, hac, hcd‚ü©,
      rw ‚Üênat.add_succ,
      exact lt_of_lt_of_le hdb hle },
    { refine ‚ü®d, b, nat.le_of_lt_succ _, hd, hb, hdc, hcb‚ü©,
      rw ‚Üênat.add_succ,
      exact lt_of_le_of_lt hle (add_lt_add_right had _) }
  end,
  rcases hxy with ‚ü®x, y, hle, hx, hy, hxc, hcy‚ü©,
  exact hS' (Œª a b c hle ha hb hac hcb, hS (hle.trans (le_succ _)) ha hb hac hcb) hle hx hy hxc hcy
end

/-- A set of nats without gaps is an interval. -/
lemma all_icc_of_ex_ioo {S : set ‚Ñï}
  (H : ‚àÄ {a b c} (ha : a ‚àà S) (hb : b ‚àà S) (hac : a < c) (hcb : c < b), (S ‚à© set.Ioo a b).nonempty)
  {a b c} (ha : a ‚àà S) (hb : b ‚àà S) (hac : a ‚â§ c) (hcb : c ‚â§ b) : c ‚àà S :=
begin
  cases eq_or_lt_of_le hac with hac hac, { rwa ‚Üêhac },
  cases eq_or_lt_of_le hcb with hcb hcb, { rwa  hcb },
  exact all_ioo_of_ex_ioo b (Œª a b c _ ha hb hac hcb, H ha hb hac hcb) (le_add_self) ha hb hac hcb
end

end nat
