import combinatorics.quiver.basic
import combinatorics.quiver.single_obj
import group_theory.group_action.basic
import group_theory.group_action.group
import combinatorics.quiver.covering
import group_theory.subgroup.basic
import group_theory.coset
import group_theory.quotient_group
import group_theory.group_action.quotient

universes u v w

namespace quiver

section basic

/--
Alias for the Schreier graph vertex type.
-/
def schreier_graph (V : Type*) {M : Type*} [has_smul M V] {S : Type*} (Œπ : S ‚Üí M) := V

/--
Converting between the original vertex type and the alias.
-/
@[simps] def equiv_schreier_graph {V : Type*} {M : Type*} [has_smul M V] {S : Type*} {Œπ : S ‚Üí M} :
  V ‚âÉ schreier_graph V Œπ := equiv.refl V

variables (V : Type*) {M : Type*} [has_smul M V] {S : Type*} (Œπ : S ‚Üí M)

instance : has_smul M (schreier_graph V Œπ) :=
{ smul := Œª x y, equiv_schreier_graph $ x ‚Ä¢ (equiv_schreier_graph.symm y)}

/--
The `quiver` instance on `schreier_graph V Œπ`.
The set of arrow from `x` to `y` is the subset of `S` such that `(Œπ s) x = y`.
-/
instance schreier_graph.quiver : quiver (schreier_graph V Œπ) :=
{ hom := Œª x y, {s : S // (Œπ s) ‚Ä¢ x = y} }

/--
Any arrow in `schreier_graph V Œπ` is labelled by an element of `S`.
This is encoded as mapping to the `single_obj S` quiver.
-/
@[simps] def schreier_graph_labelling : (schreier_graph V Œπ) ‚•§q single_obj S :=
{ obj := Œª (x : schreier_graph V Œπ), single_obj.star S,
  map := Œª x y e, subtype.rec_on e (Œª s h, s), }

end basic

section group_action

variables (V : Type*) {M : Type*} [group M] [mul_action M V] {S : Type*} (Œπ : S ‚Üí M)

instance : mul_action M (schreier_graph V Œπ) :=
{ smul := has_smul.smul,
  one_smul := mul_action.one_smul,
  mul_smul := mul_action.mul_smul }

lemma schreier_graph_labelling_is_covering : (schreier_graph_labelling V Œπ).is_covering :=
begin
  refine ‚ü®Œª u, ‚ü®_, _‚ü©, Œª u, ‚ü®_, _‚ü©‚ü©,
  { rintro ‚ü®v,‚ü®x,hx‚ü©‚ü© ‚ü®w,‚ü®y,hy‚ü©‚ü© h,
    simp only [prefunctor.star_apply, schreier_graph_labelling_map, single_obj.to_hom_apply,
               eq_iff_true_of_subsingleton, heq_iff_eq, true_and] at h,
    subst_vars, },
  { rintro ‚ü®‚ü®‚ü©,x‚ü©, exact ‚ü®‚ü®(Œπ x) ‚Ä¢ u, ‚ü®x, rfl‚ü©‚ü©, rfl‚ü©, },
  { rintro ‚ü®v,‚ü®x,hx‚ü©‚ü© ‚ü®w,‚ü®y,hy‚ü©‚ü© h,
    simp only [prefunctor.costar_apply, schreier_graph_labelling_map, single_obj.to_hom_apply,
               eq_iff_true_of_subsingleton, heq_iff_eq, true_and] at h,
    subst_vars,
    simp only [smul_left_cancel_iff] at hy,
    subst hy, },
  { rintro ‚ü®‚ü®‚ü©,x‚ü©,
    exact ‚ü®‚ü®(Œπ x) ‚Åª¬π ‚Ä¢ u, ‚ü®x, by simp‚ü©‚ü©, by simp‚ü©, },
end

abbreviation schreier_coset_graph (H : subgroup M) := schreier_graph (M ‚ß∏ H) Œπ

@[simps] noncomputable def from_coset_graph (v‚ÇÄ : V) :
  schreier_coset_graph Œπ (mul_action.stabilizer M v‚ÇÄ) ‚•§q schreier_graph (mul_action.orbit M v‚ÇÄ) Œπ :=
{ obj := (mul_action.orbit_equiv_quotient_stabilizer M v‚ÇÄ).symm,
  map := Œª X Y e, ‚ü®e.val, by obtain ‚ü®e,rfl‚ü© := e;
                          simp only [mul_action.smul_orbit_equiv_quotient_stabilizer_symm_apply]‚ü© }

set_option profiler true

lemma from_coset_graph_labelling (v‚ÇÄ : V) :
  (from_coset_graph V Œπ v‚ÇÄ) ‚ãôq schreier_graph_labelling (mul_action.orbit M v‚ÇÄ) Œπ =
  schreier_graph_labelling (M ‚ß∏ mul_action.stabilizer M v‚ÇÄ) Œπ :=
begin
  dsimp only [from_coset_graph, schreier_graph_labelling],
  fapply prefunctor.ext,
  { simp only [eq_iff_true_of_subsingleton, implies_true_iff], },
  { rintros _ _ ‚ü®e, he‚ü©,
    simp only [prefunctor.comp_map, eq_rec_constant], },
end

@[simps] noncomputable def to_coset_graph (v‚ÇÄ : V) :
  schreier_graph (mul_action.orbit M v‚ÇÄ) Œπ ‚•§q schreier_coset_graph Œπ (mul_action.stabilizer M v‚ÇÄ) :=
{ obj := (mul_action.orbit_equiv_quotient_stabilizer M v‚ÇÄ),
  map := Œª X Y e, ‚ü®e.val, by obtain ‚ü®e,rfl‚ü© := e;
                          simp only [mul_action.smul_orbit_equiv_quotient_stabilizer_apply]‚ü© }

lemma to_coset_graph_labelling (v‚ÇÄ : V) :
  (to_coset_graph V Œπ v‚ÇÄ) ‚ãôq schreier_graph_labelling (M ‚ß∏ mul_action.stabilizer M v‚ÇÄ) Œπ =
  schreier_graph_labelling (mul_action.orbit M v‚ÇÄ) Œπ:=
begin
  dsimp only [to_coset_graph, schreier_graph_labelling],
  fapply prefunctor.ext,
  { simp only [eq_iff_true_of_subsingleton, implies_true_iff], },
  { rintros _ _ ‚ü®e,he‚ü©,
    simp only [prefunctor.comp_map, eq_rec_constant], },
end

lemma from_coset_graph_to_coset_graph (v‚ÇÄ : V) :
  from_coset_graph V Œπ v‚ÇÄ ‚ãôq to_coset_graph V Œπ v‚ÇÄ = ùü≠q _ :=
begin
  have obj : ‚àÄ x, (from_coset_graph V Œπ v‚ÇÄ ‚ãôq to_coset_graph V Œπ v‚ÇÄ).obj x = (ùü≠q _).obj x, by
  { rintro _,
    simp only [to_coset_graph, from_coset_graph, prefunctor.comp_obj, equiv.apply_symm_apply,
               prefunctor.id_obj, id.def], },
  apply prefunctor.ext obj,
  rintro u v e,
  let hu := obj u,
  let hv := obj v,
  change (from_coset_graph V Œπ v‚ÇÄ ‚ãôq to_coset_graph V Œπ v‚ÇÄ).map e =
         eq.rec_on hv.symm (eq.rec_on hu.symm ((ùü≠q _).map e)),
  sorry,
end

lemma to_coset_graph_from_coset_graph (v‚ÇÄ : V) :
  to_coset_graph V Œπ v‚ÇÄ ‚ãôq from_coset_graph V Œπ v‚ÇÄ = ùü≠q _ :=
begin
  dsimp only [to_coset_graph, from_coset_graph],
  fapply prefunctor.ext,
  { rintro ‚ü®_,_‚ü©,
    simp, },
  { rintro ‚ü®_,_‚ü© ‚ü®_,_‚ü© ‚ü®_,h‚ü©, sorry, }
end

abbreviation cayley_graph := schreier_coset_graph Œπ (‚ä• : subgroup M)

end group_action

end quiver
