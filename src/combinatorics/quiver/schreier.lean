import combinatorics.quiver.basic
import combinatorics.quiver.single_obj
import group_theory.group_action.basic
import group_theory.group_action.group
import combinatorics.quiver.covering
import group_theory.subgroup.basic
import group_theory.coset
import group_theory.quotient_group
import group_theory.group_action.quotient
import combinatorics.quiver.iso

/-

## TODO

* Should `action_graph` be defined just for `[has_smul M V]` without the `Œπ : S ‚Üí M`, and then
  specialized when talking about group actions ?

-/

universes u v w

namespace quiver

section basic

/--
Alias for the Schreier graph vertex type.
-/
def action_graph (V : Type*) {M : Type*} [has_smul M V] {S : Type*} (Œπ : S ‚Üí M) := V

/--
Converting between the original vertex type and the alias.
-/
@[simps] def equiv_action_graph {V : Type*} {M : Type*} [has_smul M V] {S : Type*} {Œπ : S ‚Üí M} :
  V ‚âÉ action_graph V Œπ := equiv.refl V

variables (V : Type*) {M : Type*} [has_smul M V] {S : Type*} (Œπ : S ‚Üí M)

/-- Transporting the action to the alias -/
instance : has_smul M (action_graph V Œπ) :=
{ smul := Œª x y, equiv_action_graph $ x ‚Ä¢ (equiv_action_graph.symm y)}

/--
The `quiver` instance on `action_graph V Œπ`.
The set of arrow from `x` to `y` is the subset of `S` such that `(Œπ s) x = y`.
-/
instance action_graph.quiver : quiver (action_graph V Œπ) :=
{ hom := Œª x y, {s : S // (Œπ s) ‚Ä¢ x = y} }

/--
Any arrow in `action_graph V Œπ` is labelled by an element of `S`.
This is encoded as mapping to the `single_obj S` quiver.
-/
@[simps] def action_graph_labelling : (action_graph V Œπ) ‚•§q single_obj S :=
{ obj := Œª (x : action_graph V Œπ), single_obj.star S,
  map := Œª x y e, subtype.rec_on e (Œª s h, s), }

notation `ùë®` := action_graph
notation `ùë®'` := action_graph_labelling

end basic

section group_action
/-!
### Schreier graphs for group actions.

In that case, the labelling is a covering, meaning that the stars and costars around each vertex
are in bijection with `S`.
-/

variables (V : Type*) {M : Type*} [group M] [mul_action M V] {S : Type*} (Œπ : S ‚Üí M)

instance : mul_action M (action_graph V Œπ) :=
{ smul := has_smul.smul,
  one_smul := mul_action.one_smul,
  mul_smul := mul_action.mul_smul }

lemma action_graph_labelling_is_covering : (ùë®' V Œπ).is_covering :=
begin
  refine ‚ü®Œª u, ‚ü®_, _‚ü©, Œª u, ‚ü®_, _‚ü©‚ü©,
  { rintro ‚ü®v,‚ü®x,hx‚ü©‚ü© ‚ü®w,‚ü®y,hy‚ü©‚ü© h,
    simp only [prefunctor.star_apply, action_graph_labelling_map, single_obj.to_hom_apply,
               eq_iff_true_of_subsingleton, heq_iff_eq, true_and] at h,
    subst_vars, },
  { rintro ‚ü®‚ü®‚ü©,x‚ü©, exact ‚ü®‚ü®(Œπ x) ‚Ä¢ u, ‚ü®x, rfl‚ü©‚ü©, rfl‚ü©, },
  { rintro ‚ü®v,‚ü®x,hx‚ü©‚ü© ‚ü®w,‚ü®y,hy‚ü©‚ü© h,
    simp only [prefunctor.costar_apply, action_graph_labelling_map, single_obj.to_hom_apply,
               eq_iff_true_of_subsingleton, heq_iff_eq, true_and] at h,
    subst_vars,
    simp only [smul_left_cancel_iff] at hy,
    subst hy, },
  { rintro ‚ü®‚ü®‚ü©,x‚ü©,
    exact ‚ü®‚ü®(Œπ x) ‚Åª¬π ‚Ä¢ u, ‚ü®x, by simp‚ü©‚ü©, by simp‚ü©, },
end

notation `ùë®c` := action_graph_labelling_is_covering

/-
The sorry should be easy but would benefit from infrastructure:
* `symmetrify (single_obj Œ±)` is isomorphic to `single_obj (Œ± ‚äï Œ±)`
* need a usable def of isomorphisms
* isomorphisms induce equivalence of `star_path` etc

-/
noncomputable def action_graph.path_star_equiv (x : action_graph V Œπ) :
  path_star (symmetrify.of.obj x) ‚âÉ list (S ‚äï S) :=
calc  path_star (symmetrify.of.obj x)
    ‚âÉ path_star (symmetrify.of.obj (single_obj.star S) : symmetrify (single_obj S)) :
      equiv.of_bijective _ (prefunctor.path_star_bijective _
        (action_graph_labelling_is_covering V Œπ).symmetrify x)
... ‚âÉ path_star (single_obj.star (S ‚äï S)) : sorry
... ‚âÉ list (S ‚äï S) : single_obj.path_star_equiv _

/- need to fine a usable def probably in `free_group` -/
@[simp] def val : list (S ‚äï S) ‚Üí M
| list.nil := 1
| (list.cons (sum.inl s) l) := (Œπ s) * (val l)
| (list.cons (sum.inr s) l) := (Œπ s) ‚Åª¬π * (val l)

lemma _root_.subgroup.closure_eq_range_val :
  (subgroup.closure $ set.range Œπ).carrier = set.range (val Œπ) :=
begin
  apply subset_antisymm,
  { rintro x hx, apply subgroup.closure_induction hx,
    { rintro _ ‚ü®s, rfl‚ü©, refine ‚ü®[sum.inl s], mul_one _‚ü©, },
    { refine ‚ü®[], rfl‚ü©, },
    { rintro _ _ ‚ü®x, rfl‚ü© ‚ü®y, rfl‚ü©, refine ‚ü®x.append y, _‚ü©, sorry, },
    { rintro _ ‚ü®x, rfl‚ü©, refine ‚ü®x.reverse, _‚ü©,  sorry, }, },
  { rintro _ ‚ü®x, rfl‚ü©, induction x,
    simp only [subgroup.one_mem, val, subgroup.mem_carrier],
    cases x_hd,
    sorry,
    sorry, },
end

/-
I'm using `id p.1` because `symmetrify` has no converse to `of`
That should be remedied.
-/
lemma action_graph.path_star_equiv_end_eq_mul
  (x : action_graph V Œπ) (p : path_star $ symmetrify.of.obj x) :
  (id p.1 : action_graph V Œπ) = (val Œπ $ (action_graph.path_star_equiv V Œπ x) p) ‚Ä¢ x := sorry


/--
Using the equivalence above:
* paths starting at `x` are in bijection with words over `S`
* this bijection maps the end of the path to the value of the path applied to `x`
Thus:
* Now use `_root_.subgroup.closure_eq_range_val`
-/
lemma action_graph.reachable_iff (x y : action_graph V Œπ) :
  nonempty (path (symmetrify.of.obj x) (symmetrify.of.obj y)) ‚Üî
  ‚àÉ g ‚àà (subgroup.closure $ set.range Œπ), g ‚Ä¢ x = y := sorry

/- A endomorphism of the graph (with labelling) commutes with the `smul`. -/
lemma action_graph.action_commute (œÜ : ùë® V Œπ ‚•§q ùë® V Œπ) (œÜm : œÜ ‚ãôq ùë®' V Œπ = ùë®' V Œπ)
  (v : ùë® V Œπ) (s : S) : œÜ.obj (Œπ s ‚Ä¢ v) = Œπ s ‚Ä¢ (œÜ.obj v) :=
begin
  sorry,
end

/--
Given a pretransitive action, and assuming `set.range Œπ` generates the group,
any automorphism is uniquely determined by where it sends one vertex.
Barring those two conditions, the statement would be that the choice of image of a vertex determines
the automorphism on the weakly connected component of the vertex.
-/
lemma eq_of_eq_on  (œÜ œà : ùë®' V Œπ ‚âÉqc ùë®' V Œπ) (v‚ÇÄ : V)
  (ha : mul_action.is_pretransitive M V)
  (hv‚ÇÄ : œÜ.to_prefunctor.obj v‚ÇÄ = œà.to_prefunctor.obj v‚ÇÄ)
  (h : subgroup.closure (set.range Œπ) = (‚ä§ : subgroup M)) : œÜ = œà :=
begin
  apply covering_iso.ext,
  apply iso.ext,
  apply (ùë®c _ _).eq_of_eq_of_preconnected _ _ hv‚ÇÄ,
  { rw [œÜ.commute_left, œà.commute_left], },
  { rintro u v,
    refine (action_graph.reachable_iff V Œπ u v).mpr _,
    simp only [h, subgroup.mem_top, exists_true_left],
    exact ha.exists_smul_eq u v, },
end

section schreier_graph

/--
A¬†Schreier coset graph is the Schreier graph of the action of a group `M` on the cosets `M ‚ß∏ H`.
-/
abbreviation schreier_graph (H : subgroup M) := action_graph (M ‚ß∏ H) Œπ
abbreviation schreier_graph_labelling (H : subgroup M) := action_graph_labelling (M ‚ß∏ H) Œπ

notation `ùë∫` := schreier_graph
notation `ùë∫l` := schreier_graph_labelling

@[simps] noncomputable def from_coset_graph (v‚ÇÄ : V) :
  schreier_graph Œπ (mul_action.stabilizer M v‚ÇÄ) ‚•§q action_graph (mul_action.orbit M v‚ÇÄ) Œπ :=
{ obj := (mul_action.orbit_equiv_quotient_stabilizer M v‚ÇÄ).symm,
  map := Œª X Y e, ‚ü®e.val, by obtain ‚ü®e,rfl‚ü© := e;
                          simp only [mul_action.smul_orbit_equiv_quotient_stabilizer_symm_apply]‚ü© }

lemma from_coset_graph_labelling (v‚ÇÄ : V) :
  (from_coset_graph V Œπ v‚ÇÄ) ‚ãôq action_graph_labelling (mul_action.orbit M v‚ÇÄ) Œπ =
  action_graph_labelling (M ‚ß∏ mul_action.stabilizer M v‚ÇÄ) Œπ :=
begin
  dsimp only [from_coset_graph, action_graph_labelling],
  fapply prefunctor.ext,
  { simp only [eq_iff_true_of_subsingleton, implies_true_iff], },
  { rintros _ _ ‚ü®e, he‚ü©,
    simp only [prefunctor.comp_map, eq_rec_constant], },
end

@[simps] noncomputable def to_coset_graph (v‚ÇÄ : V) :
  action_graph (mul_action.orbit M v‚ÇÄ) Œπ ‚•§q schreier_graph Œπ (mul_action.stabilizer M v‚ÇÄ) :=
{ obj := (mul_action.orbit_equiv_quotient_stabilizer M v‚ÇÄ),
  map := Œª X Y e, ‚ü®e.val, by obtain ‚ü®e,rfl‚ü© := e;
                          simp only [mul_action.smul_orbit_equiv_quotient_stabilizer_apply]‚ü© }

lemma to_coset_graph_labelling (v‚ÇÄ : V) :
  (to_coset_graph V Œπ v‚ÇÄ) ‚ãôq action_graph_labelling (M ‚ß∏ mul_action.stabilizer M v‚ÇÄ) Œπ =
  action_graph_labelling (mul_action.orbit M v‚ÇÄ) Œπ:=
begin
  dsimp only [to_coset_graph, action_graph_labelling],
  fapply prefunctor.ext,
  { simp only [eq_iff_true_of_subsingleton, implies_true_iff], },
  { rintros _ _ ‚ü®_,_‚ü©,
    simp only [prefunctor.comp_map, eq_rec_constant], },
end

lemma from_coset_graph_to_coset_graph (v‚ÇÄ : V) :
  from_coset_graph V Œπ v‚ÇÄ ‚ãôq to_coset_graph V Œπ v‚ÇÄ = ùü≠q _ :=
begin
  apply (ùë®c _ _).eq_of_eq_obj,
  { simp only [to_coset_graph_labelling, from_coset_graph_labelling, prefunctor.comp_assoc,
               prefunctor.id_comp], },
  { ext ‚ü®_‚ü©,
    simp only [prefunctor.comp_obj, from_coset_graph_obj, to_coset_graph_obj,
               equiv.apply_symm_apply, prefunctor.id_obj, id.def], },
end

lemma to_coset_graph_from_coset_graph (v‚ÇÄ : V) :
  to_coset_graph V Œπ v‚ÇÄ ‚ãôq from_coset_graph V Œπ v‚ÇÄ = ùü≠q _ :=
begin
  apply (ùë®c _ _).eq_of_eq_obj,
  { simp only [to_coset_graph_labelling, from_coset_graph_labelling, prefunctor.comp_assoc,
               prefunctor.id_comp], },
  { ext _,
    simp only [prefunctor.comp_obj, to_coset_graph_obj, from_coset_graph_obj,
               equiv.symm_apply_apply, prefunctor.id_obj, id.def], },
end

def covering_iso_lol (v‚ÇÄ : V) : action_graph_labelling (mul_action.orbit M v‚ÇÄ) Œπ ‚âÉqc
                                ùë∫l Œπ (mul_action.stabilizer M v‚ÇÄ) := sorry


section automs

variables {N : subgroup M} [Nn : N.normal]
include Nn

@[simps] def as_autom (g : M) : schreier_graph Œπ N ‚•§q schreier_graph Œπ N :=
{ obj := Œª x, equiv_action_graph ((equiv_action_graph.symm x) * (g‚Åª¬π)),
  map := Œª x y a, ‚ü®a.val, by
    begin
      obtain ‚ü®a,rfl‚ü© := a,
      obtain ‚ü®x‚ü© := x,
      change Œπ a ‚Ä¢ ((‚Üëx : M ‚ß∏ N) * (‚Üëg)‚Åª¬π) = Œπ a ‚Ä¢ (‚Üëx : M ‚ß∏ N) * (‚Üëg)‚Åª¬π,
      simpa only [mul_action.quotient.smul_coe, smul_eq_mul, quotient_group.coe_mul, mul_assoc],
    end‚ü© }

lemma as_autom_labelling (g : M) :
  as_autom Œπ g ‚ãôq ùë∫l Œπ N = ùë∫l Œπ N :=
begin
  dsimp only [as_autom, action_graph_labelling],
  fapply prefunctor.ext,
  { simp only [eq_iff_true_of_subsingleton, implies_true_iff], },
  { rintro _ _ ‚ü®_, rfl‚ü©,
    simp [subtype.coe_mk, prefunctor.comp_map, action_graph_labelling_map,
    eq_rec_constant], },
end

lemma as_autom_one : as_autom Œπ 1 = ùü≠q (ùë∫ Œπ N) :=
begin
  fapply (ùë®c _ _).eq_of_eq_obj,
  { rw [as_autom_labelling, prefunctor.id_comp], },
  { ext x,
    simp only [equiv_action_graph_symm_apply, quotient_group.coe_one, inv_one, mul_one,
               equiv_action_graph_apply, prefunctor.id_obj, id.def, as_autom], },
end

lemma as_autom_mul (g h : M) :
  (as_autom Œπ (g * h) : ùë∫ Œπ N ‚•§q  ùë∫ Œπ N) = (as_autom Œπ h) ‚ãôq (as_autom Œπ g) :=
begin
  fapply (ùë®c _ _).eq_of_eq_obj,
  { simp_rw [prefunctor.comp_assoc, as_autom_labelling], },
  { ext x,
    simp only [equiv_action_graph_symm_apply, equiv_action_graph_apply, as_autom,
               quotient_group.coe_mul, mul_inv_rev, prefunctor.comp_obj, mul_assoc], },
end

lemma as_autom_eq_iff (g‚ÇÅ g‚ÇÇ : M) :
  (as_autom Œπ g‚ÇÅ : ùë∫ Œπ N ‚•§q ùë∫ Œπ N) = (as_autom Œπ g‚ÇÇ : ùë∫ Œπ N ‚•§q ùë∫ Œπ N) ‚Üî g‚ÇÅ / g‚ÇÇ ‚àà N :=
begin
  refine ‚ü®Œª h, _, Œª h, _‚ü©,
  { dsimp only [as_autom] at h,
    simp only [subtype.val_eq_coe, equiv_action_graph_symm_apply,
               equiv_action_graph_apply] at h ‚ä¢,
    simpa [‚Üêquotient_group.coe_one, quotient_group.eq_iff_div_mem] using
            (congr_fun h.left (equiv_action_graph 1)), },
  { fapply (ùë®c _ _).eq_of_eq_obj,
    { simp_rw [as_autom_labelling], },
    { ext ‚ü®x‚ü©,
      change (‚Üëx : M ‚ß∏ N) * (g‚ÇÅ)‚Åª¬π = (‚Üëx : M ‚ß∏ N) * (‚Üëg‚ÇÇ)‚Åª¬π,
      simpa [quotient_group.eq_iff_div_mem] using h, }, },
end

lemma exists_as_autom {œÜ œà : ùë∫ Œπ N ‚•§q ùë∫ Œπ N} {g : M}
  (œÜœà : œÜ ‚ãôq œà = ùü≠q _) (œàœÜ : œà ‚ãôq œÜ = ùü≠q _) (œÜc : œÜ ‚ãôq ùë∫l Œπ N = ùë∫l Œπ N)
  (h : subgroup.closure (set.range Œπ) = (‚ä§ : subgroup M))
  (hv : œÜ.obj (1 : M ‚ß∏ N) = quotient_group.mk g) : œÜ = as_autom Œπ (g‚Åª¬π) :=
begin
  sorry,
  /-
  œÜ 1 = ‚ü¶g‚üß = ‚ü¶1‚üß * ‚ü¶g‚Åª¬π ‚Åª¬π‚üß = (as_autom g‚Åª¬π) 1
  If œÜ x = as_autom x and `x ‚ü∂ Œπ s ‚Ä¢ x`, then
  `œÜ (Œπ s ‚Ä¢ x) = Œπ s ‚Ä¢ (œÜ x) = Œπ s ‚Ä¢ (as_autom g‚Åª¬π x) = as_autom g‚Åª¬π (Œπ s ‚Ä¢ x)`
  -/
end


end automs

end schreier_graph

/--
The Cayley graph of `M` w.r.t. `Œπ : S ‚Üí M` is the Schreier coset graph where `H` is the trivial
subgroup of `M`.
-/
abbreviation cayley_graph := schreier_graph Œπ (‚ä• : subgroup M)
abbreviation cayley_graph_labelling := action_graph_labelling (M ‚ß∏ (‚ä• : subgroup M)) Œπ

notation `ùë™` := cayley_graph
notation `ùë™l` := cayley_graph_labelling

namespace cayley_graph

variables {N : subgroup M} [Nn : N.normal]
include Nn

def cayley_iso_schreier : ùë™l ((quotient_group.mk : M ‚Üí M ‚ß∏ N) ‚àò Œπ) ‚âÉqc (ùë∫l Œπ N) := sorry


end cayley_graph

end group_action

end quiver
