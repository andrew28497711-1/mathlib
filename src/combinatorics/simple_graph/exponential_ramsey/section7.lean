import combinatorics.simple_graph.exponential_ramsey.section6

namespace simple_graph

open_locale big_operators exponential_ramsey

open filter finset nat real asymptotics

lemma pow_sum {Œ± M : Type*} [comm_monoid M] {s : finset Œ±} {f : Œ± ‚Üí ‚Ñï} {b : M} :
  b ^ (‚àë a in s, f a) = ‚àè a in s, b ^ f a :=
begin
  induction s using finset.cons_induction_on with a s has ih,
  { rw [prod_empty, sum_empty, pow_zero] },
  rw [prod_cons, ‚Üêih, sum_cons, pow_add],
end

variables {V : Type*} [decidable_eq V] [fintype V] {œá : top_edge_labelling V (fin 2)}
variables {Œº p‚ÇÄ : ‚Ñù} {k l : ‚Ñï} {ini : book_config œá} {i : ‚Ñï}

meta def my_X : tactic unit := tactic.to_expr ```((algorithm Œº k l ini ·æ∏).X) >>= tactic.exact
meta def my_t : tactic unit := tactic.to_expr ```((red_steps Œº k l ini).card) >>= tactic.exact
meta def my_s : tactic unit := tactic.to_expr ```((density_steps Œº k l ini).card) >>= tactic.exact
meta def my_h : tactic unit := tactic.to_expr ```(height k ini.p ·æ∏) >>= tactic.exact

local notation `X_` := Œª ·æ∏, by my_X
local notation `p_` := Œª ·æ∏, by my_p
local notation `h_` := Œª ·æ∏, by my_h
local notation `‚Ñõ` := by my_R
local notation `‚Ñ¨` := by my_B
local notation `ùíÆ` := by my_S
local notation `ùíü` := by my_D
local notation `t` := by my_t
local notation `s` := by my_s
local notation `Œµ` := by my_Œµ

lemma seven_two_single (Œº : ‚Ñù) (hŒº‚ÇÅ : Œº < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá,
  ‚àÄ i ‚àà ‚Ñõ, 2 ^ (-2 * (1 / ((1 - Œº) * k))) * (1 - Œº) ‚â§ (X_ (i + 1)).card / (X_ i).card :=
begin
  have h34 : (0 : ‚Ñù) < 3 / 4, { norm_num1 },
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) _ _ := tendsto_coe_nat_at_top_at_top,
  have := (tendsto_nat_ceil_at_top.comp (tendsto_rpow_at_top h34)).comp tt,
  filter_upwards [top_adjuster (tt.eventually_gt_at_top 0),
    top_adjuster (tt.eventually_ge_at_top (2 * (1 / (1 - Œº)))),
    this.eventually_ge_at_top 2] with l hk‚ÇÄ hk‚ÇÅ hk‚ÇÇ
    k hlk n œá hœá ini i hi,
  have hi' : i < final_step Œº k l ini,
  { have := red_steps_subset_red_or_density_steps hi,
    rw [red_or_density_steps, mem_filter, mem_range] at this,
    exact this.1 },
  rw [le_div_iff],
  swap,
  { rw [nat.cast_pos, card_pos],
    exact X_nonempty hi' },
  rw [red_applied hi, book_config.red_step_basic_X, card_red_neighbors_inter],
  have : (1 - Œº) * (algorithm Œº k l ini i).X.card - 1 ‚â§
    (1 - blue_X_ratio Œº k l ini i) * (algorithm Œº k l ini i).X.card - 1,
  { rw [sub_le_sub_iff_right],
    refine mul_le_mul_of_nonneg_right _ (nat.cast_nonneg _),
    rw [sub_le_sub_iff_left],
    exact blue_X_ratio_le_mu (red_steps_subset_red_or_density_steps hi) },
  refine this.trans' _,
  have : (2 : ‚Ñù) ^ (-2 * (1 / ((1 - Œº) * k))) ‚â§ 1 - 1 / ((1 - Œº) * k),
  { refine two_approx _ _,
    { rw one_div_nonneg,
      exact mul_nonneg (sub_nonneg_of_le hŒº‚ÇÅ.le) (nat.cast_nonneg _) },
    rw [‚Üêdiv_div, le_div_iff', mul_div_assoc', div_le_iff, one_mul],
    { exact hk‚ÇÅ k hlk },
    { exact hk‚ÇÄ k hlk },
    { exact two_pos } },
  rw [mul_assoc],
  refine (mul_le_mul_of_nonneg_right this _).trans _,
  { exact mul_nonneg (sub_nonneg_of_le hŒº‚ÇÅ.le) (nat.cast_nonneg _) },
  rw [one_sub_mul, sub_le_sub_iff_left, mul_comm, mul_one_div, mul_div_mul_left, one_le_div,
    nat.cast_le],
  { refine (ramsey_number_lt_of_lt_final_step hi').le.trans' _,
    refine (ramsey_number.mono_two le_rfl hk‚ÇÇ).trans_eq' _,
    rw ramsey_number_two_right },
  { exact hk‚ÇÄ k hlk },
  exact ne_of_gt (sub_pos_of_lt hŒº‚ÇÅ),
end

lemma seven_two (Œº : ‚Ñù) (hŒº‚ÇÅ : Œº < 1) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá,
  -- 2 ^ f k * (1 - Œº) ^ t ‚â§ ‚àè i in ‚Ñõ, (X_ (i + 1)).card / (X_ i).card :=
  2 ^ f k * (1 - Œº) ^ (red_steps Œº k l ini).card ‚â§
    ‚àè i in red_steps Œº k l ini,
      ((algorithm Œº k l ini (i + 1)).X).card / ((algorithm Œº k l ini i).X).card :=
begin
  refine ‚ü®Œª k, (-2 / (1 - Œº)) * 1, _, _‚ü©,
  { refine is_o.const_mul_left _ _,
    suffices : (Œª k : ‚Ñù, (1 : ‚Ñù)) =o[at_top] (Œª x : ‚Ñù, x),
    { exact this.comp_tendsto tendsto_coe_nat_at_top_at_top },
    simpa only [rpow_one] using is_o_one_rpow zero_lt_one },
  filter_upwards [seven_two_single Œº hŒº‚ÇÅ,
    top_adjuster (eventually_gt_at_top 0)] with l hl hk‚ÇÄ
    k hlk n œá hœá ini,
  refine (finset.prod_le_prod _ (hl k hlk n œá hœá ini)).trans' _,
  { intros i hi,
    exact mul_nonneg (rpow_nonneg_of_nonneg (by norm_num1) _) (sub_nonneg_of_le hŒº‚ÇÅ.le) },
  rw [prod_const, mul_pow],
  refine mul_le_mul_of_nonneg_right _ (pow_nonneg (sub_pos_of_lt hŒº‚ÇÅ).le _),
  rw [‚Üêrpow_nat_cast, ‚Üêrpow_mul],
  swap, { norm_num1 },
  refine rpow_le_rpow_of_exponent_le (by norm_num1) _,
  rw [‚Üêone_div_mul_one_div, ‚Üêmul_assoc, mul_right_comm, mul_one_div, mul_one_div, mul_div_assoc],
  refine mul_le_mul_of_nonpos_left (div_le_one_of_le _ (nat.cast_nonneg _))
    (div_nonpos_of_nonpos_of_nonneg (by norm_num) (sub_pos_of_lt hŒº‚ÇÅ).le),
  rw nat.cast_le,
  exact four_four_red Œº (hk‚ÇÄ k hlk).ne' (hk‚ÇÄ l le_rfl).ne' hœá ini,
end

lemma seven_three_aux_one {m : ‚Ñï} (hm : m ‚â§ final_step Œº k l ini) :
  ‚àë i in (‚Ñ¨ ‚à© range m), (book_config.get_book œá Œº (algorithm Œº k l ini i).X).1.card +
    (density_steps Œº k l ini ‚à© range m).card ‚â§ (algorithm Œº k l ini m).B.card :=
begin
  induction m with m ih,
  { simp },
  rw [range_succ],
  rw nat.succ_le_iff at hm,
  rcases cases_of_lt_final_step hm with hir | hib | his | hid,
  { rw [inter_insert_of_not_mem, inter_insert_of_not_mem, red_applied hir,
      book_config.red_step_basic_B],
    { exact ih hm.le },
    { exact finset.disjoint_left.1 red_steps_disjoint_density_steps hir },
    refine finset.disjoint_right.1 big_blue_steps_disjoint_red_or_density_steps _,
    exact red_steps_subset_red_or_density_steps hir },
  { rw [inter_insert_of_mem hib, inter_insert_of_not_mem, big_blue_applied hib, sum_insert,
      add_assoc, book_config.big_blue_step_B, card_union_eq, add_comm, add_le_add_iff_right],
    { exact ih hm.le },
    { exact (algorithm Œº k l ini m).hXB.symm.mono_right book_config.get_book_fst_subset },
    { simp },
    { intro h,
      refine finset.disjoint_right.1 big_blue_steps_disjoint_red_or_density_steps _ hib,
      exact density_steps_subset_red_or_density_steps h } },
  { rw [inter_insert_of_not_mem, inter_insert_of_mem his, card_insert_of_not_mem,
      density_applied his, book_config.density_boost_step_basic_B, card_insert_of_not_mem,
      ‚Üêadd_assoc, add_le_add_iff_right],
    { exact ih hm.le },
    { refine finset.disjoint_left.1 (algorithm Œº k l ini m).hXB _,
      exact book_config.get_central_vertex_mem_X _ _ _ },
    { simp },
    refine finset.disjoint_right.1 big_blue_steps_disjoint_red_or_density_steps _,
    exact density_steps_subset_red_or_density_steps his },
  { have := finset.disjoint_left.1
      degree_steps_disjoint_big_blue_steps_union_red_or_density_steps hid,
    rw [mem_union, not_or_distrib] at this,
    rw [inter_insert_of_not_mem this.1, inter_insert_of_not_mem, degree_regularisation_applied hid,
      book_config.degree_regularisation_step_B],
    { exact ih hm.le },
    intro h,
    exact this.2 (density_steps_subset_red_or_density_steps h) },
end

lemma seven_three_aux_two :
  ‚àë i in ‚Ñ¨, (book_config.get_book œá Œº (X_ i)).1.card + s ‚â§ (end_state Œº k l ini).B.card :=
begin
  refine (seven_three_aux_one le_rfl).trans' _,
  rw [(inter_eq_left_iff_subset _ _).2, (inter_eq_left_iff_subset _ _).2],
  { exact density_steps_subset_red_or_density_steps.trans (filter_subset _ _) },
  { exact filter_subset _ _ },
end

lemma seven_three_aux_three
  (hœá : ¬¨ (‚àÉ (m : finset V) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card)) :
  ‚àë i in big_blue_steps Œº k l ini, (book_config.get_book œá Œº (X_ i)).1.card + s < l :=
begin
  refine seven_three_aux_two.trans_lt _,
  by_contra' hl,
  refine hœá ‚ü®_, _, (end_state Œº k l ini).blue_B, _‚ü©,
  simpa using hl,
end

lemma s_lt_l (hœá : ¬¨ (‚àÉ (m : finset V) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card)) :
  (density_steps Œº k l ini).card < l :=
(seven_three_aux_three hœá).trans_le' le_add_self

lemma seven_three (Œº : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá,
  -- 2 ^ f k * (1 - Œº) ^ t ‚â§ ‚àè i in ‚Ñõ, (X_ (i + 1)).card / (X_ i).card :=
  2 ^ f k * Œº ^ (l - (density_steps Œº k l ini).card) ‚â§
    ‚àè i in big_blue_steps Œº k l ini,
      ((algorithm Œº k l ini (i + 1)).X).card / ((algorithm Œº k l ini i).X).card :=
begin
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) _ _ := tendsto_coe_nat_at_top_at_top,
  refine ‚ü®Œª k, - k ^ (3 / 4 : ‚Ñù), _, _‚ü©,
  { suffices : (Œª k : ‚Ñù, - (k ^ (3 / 4 : ‚Ñù))) =o[at_top] (Œª x : ‚Ñù, x),
    { exact this.comp_tendsto tt },
    refine is_o.neg_left _,
    simpa only [rpow_one] using is_o_rpow_rpow (show (3 / 4 : ‚Ñù) < 1, by norm_num) },
  filter_upwards [four_three Œº hŒº‚ÇÄ] with l hl
    k hlk n œá hœá ini,
  have : ‚àÄ i ‚àà big_blue_steps Œº k l ini,
    Œº ^ (book_config.get_book œá Œº (algorithm Œº k l ini i).X).1.card / 2 ‚â§
    (algorithm Œº k l ini (i + 1)).X.card / (algorithm Œº k l ini i).X.card,
  { intros i hi,
    rw [big_blue_applied hi, book_config.big_blue_step_X, le_div_iff, div_mul_eq_mul_div],
    { exact book_config.get_book_relative_card },
    rw [nat.cast_pos, card_pos],
    refine X_nonempty _,
    rw [big_blue_steps, mem_filter, mem_range] at hi,
    exact hi.1 },
  refine (prod_le_prod _ this).trans' _,
  { intros i hi,
    exact div_nonneg (pow_nonneg hŒº‚ÇÄ.le _) two_pos.le },
  rw [prod_div_distrib, ‚Üêpow_sum, prod_const, div_eq_mul_inv (_ ^ _), ‚Üêrpow_nat_cast 2,
    ‚Üêrpow_neg two_pos.le, mul_comm],
  refine mul_le_mul (pow_le_pow_of_le_one hŒº‚ÇÄ.le hŒº‚ÇÅ.le _) (rpow_le_rpow_of_exponent_le one_le_two
    (neg_le_neg ((hl k hlk n œá hœá ini).trans (rpow_le_rpow (nat.cast_nonneg _) (nat.cast_le.2 hlk)
    (by norm_num1))))) (rpow_nonneg_of_nonneg two_pos.le _) (pow_nonneg hŒº‚ÇÄ.le _),
  refine le_tsub_of_add_le_right _,
  exact (seven_three_aux_three hœá).le
end

lemma height_p_zero : height k p‚ÇÄ p‚ÇÄ = 1 := height_eq_one le_rfl

noncomputable def moderate_steps (Œº) (k l) (ini : book_config œá) : finset ‚Ñï :=
(density_steps Œº k l ini).filter $
  Œª i, (height k ini.p (p_ (i + 1)) : ‚Ñù) - height k ini.p (p_ i) ‚â§ k ^ (1 / 16 : ‚Ñù)

meta def my_S_star : tactic unit := tactic.to_expr ```(moderate_steps Œº k l ini) >>= tactic.exact

local notation `ùíÆ‚Å∫` := by my_S_star

lemma range_filter_odd_eq_union :
  (range (final_step Œº k l ini)).filter odd =
    red_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini ‚à™ density_steps Œº k l ini :=
begin
  ext i,
  split,
  { rw [mem_filter, mem_range, and_comm, and_imp],
    exact mem_union_of_odd },
  rw [union_right_comm, red_steps_union_density_steps, red_or_density_steps, big_blue_steps,
    ‚Üêfilter_or, mem_filter, ‚Üêand_or_distrib_left, mem_filter, ‚Üênat.odd_iff_not_even, ‚Üêand_assoc],
  exact and.left
end

lemma sum_range_odd_telescope' {k : ‚Ñï} (f : ‚Ñï ‚Üí ‚Ñù) {c : ‚Ñù} (hc' : ‚àÄ i, f i - f 0 ‚â§ c) :
  ‚àë i in (range k).filter odd, (f (i + 1) - f (i - 1)) ‚â§ c :=
begin
  have : (range k).filter odd = (range (k / 2)).map ‚ü®bit1, Œª i i', nat.bit1_inj‚ü©,
  { ext i,
    simp only [mem_filter, mem_range, finset.mem_map, odd_iff_exists_bit1,
      function.embedding.coe_fn_mk, exists_prop],
    split,
    { rintro ‚ü®hi, i, rfl‚ü©,
      refine ‚ü®i, _, rfl‚ü©,
      rw ‚Üêbit1_lt_bit1,
      refine hi.trans_le _,
      rw [bit1, bit0_eq_two_mul],
      cases nat.even_or_odd k,
      { rw nat.two_mul_div_two_of_even h,
        simp },
      rw nat.two_mul_div_two_add_one_of_odd h },
    rintro ‚ü®i, hi, rfl‚ü©,
    refine ‚ü®_, i, rfl‚ü©,
    rw [‚Üênat.add_one_le_iff, bit1, add_assoc, ‚Üêbit0, ‚Üêbit0_add],
    rw [‚Üênat.add_one_le_iff, ‚Üêbit0_le_bit0] at hi,
    refine hi.trans _,
    rw bit0_eq_two_mul,
    exact nat.mul_div_le _ _ },
  rw [this, sum_map],
  simp only [function.embedding.coe_fn_mk],
  have : ‚àÄ x, f (bit1 x + 1) - f (bit1 x - 1) = f (2 * (x + 1)) - f (2 * x),
  { intro x,
    rw [bit1, add_assoc, ‚Üêbit0, nat.add_sub_cancel, ‚Üêbit0_add, ‚Üêbit0_eq_two_mul,
      ‚Üêbit0_eq_two_mul] },
  simp only [this],
  rw sum_range_sub (Œª x, f (2 * x)),
  dsimp,
  rw mul_zero,
  exact hc' _
end

lemma sum_range_odd_telescope {k : ‚Ñï} (f : ‚Ñï ‚Üí ‚Ñù) {c : ‚Ñù} (hc' : ‚àÄ i, f i ‚â§ c)
  (hc : 0 ‚â§ f 0) :
  ‚àë i in (range k).filter odd, (f (i + 1) - f (i - 1)) ‚â§ c :=
begin
  refine sum_range_odd_telescope' _ _,
  intros i,
  exact (sub_le_self _ hc).trans (hc' _)
end

-- a merge of eqs 25 and 26
lemma eqn_25_26 (Œº : ‚Ñù) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
  ‚àë i in (range (final_step Œº k l ini)).filter odd, (h_ (p_ (i + 1)) - h_ (p_ (i - 1)) : ‚Ñù) ‚â§
    2 / Œµ * log k :=
begin
  filter_upwards [top_adjuster height_upper_bound] with l hl
    k hlk n œá ini,
  refine sum_range_odd_telescope (Œª i, h_ (algorithm Œº k l ini i).p) _ _,
  { intro i,
    exact hl k hlk _ col_density_nonneg _ col_density_le_one },
  exact nat.cast_nonneg _
end

lemma eqn_25_26' (Œº : ‚Ñù) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
  ‚àë i in (range (final_step Œº k l ini)).filter odd, (h_ (p_ (i + 1)) - h_ (p_ (i - 1)) : ‚Ñù) ‚â§
    f k :=
begin
  refine ‚ü®Œª k, 2 / Œµ * log k, _, eqn_25_26 Œº‚ü©,
  simp only [div_mul_eq_mul_div, mul_div_assoc, neg_div],
  refine is_o.const_mul_left _ _,
  simp only [rpow_neg (nat.cast_nonneg _), div_inv_eq_mul],
  suffices : (Œª k : ‚Ñù, log k * k ^ (1 / 4 : ‚Ñù)) =o[at_top] (Œª x : ‚Ñù, x),
  { exact this.comp_tendsto tendsto_coe_nat_at_top_at_top },
  refine ((is_o_log_rpow_at_top (show (0 : ‚Ñù) < 3 / 4, by norm_num)).mul_is_O
    (is_O_refl _ _)).congr' (eventually_eq.rfl) _,
  filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
  rw [‚Üêrpow_add hx],
  norm_num
end

-- (28)
lemma height_diff_blue (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  f k ‚â§ ‚àë i in ‚Ñ¨, (h_ (p_ (i + 1)) - h_ (p_ (i - 1)) : ‚Ñù) :=
begin
  refine ‚ü®Œª k, (-2 * k ^ (1 / 8 : ‚Ñù)) * k ^ (3 / 4 : ‚Ñù), _, _‚ü©,
  { simp only [mul_assoc],
    refine is_o.const_mul_left _ _,
    suffices : (Œª k : ‚Ñù, k ^ (1 / 8 : ‚Ñù) * k ^ (3 / 4 : ‚Ñù)) =o[at_top] (Œª x : ‚Ñù, x),
    { exact this.comp_tendsto tendsto_coe_nat_at_top_at_top },
    refine is_o.congr' (is_o_rpow_rpow (show (7 / 8 : ‚Ñù) < 1, by norm_num)) _ _,
    { filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
      rw [‚Üêrpow_add hx],
      norm_num },
    simp only [rpow_one] },
  filter_upwards [four_three Œº hŒº‚ÇÄ, six_five_blue Œº p‚ÇÄ hŒº‚ÇÄ] with l hl‚ÇÑ‚ÇÉ hl‚ÇÜ‚ÇÖ
    k hlk n œá hœá ini hini,
  replace hl‚ÇÑ‚ÇÉ : ((big_blue_steps Œº k l ini).card : ‚Ñù) ‚â§ k ^ (3 / 4 : ‚Ñù),
  { refine (hl‚ÇÑ‚ÇÉ k hlk n œá hœá ini).trans _,
    exact rpow_le_rpow (nat.cast_nonneg _) (nat.cast_le.2 hlk) (by norm_num1) },
  replace hl‚ÇÜ‚ÇÖ : ‚àÄ i ‚àà ‚Ñ¨, ((-2 : ‚Ñù) * (k ^ (1 / 8 : ‚Ñù))) ‚â§ h_ (p_ (i + 1)) - h_ (p_ (i - 1)),
  { intros i hi,
    rw [neg_mul, neg_le, neg_sub, sub_le_comm],
    exact hl‚ÇÜ‚ÇÖ k hlk n œá ini hini i hi },
  refine (card_nsmul_le_sum _ _ _ hl‚ÇÜ‚ÇÖ).trans' _,
  rw [nsmul_eq_mul, mul_comm],
  refine mul_le_mul_of_nonpos_right hl‚ÇÑ‚ÇÉ _,
  rw [neg_mul, right.neg_nonpos_iff],
  positivity
end

lemma red_or_density_height_diff (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àë i in ‚Ñõ ‚à™ ùíÆ, (h_ (p_ (i + 1)) - h_ (p_ (i - 1)) : ‚Ñù) ‚â§ f k :=
begin
  obtain ‚ü®f‚ÇÅ, hf‚ÇÅ, h'f‚ÇÅ‚ü© := eqn_25_26' Œº,
  obtain ‚ü®f‚ÇÇ, hf‚ÇÇ, h'f‚ÇÇ‚ü© := height_diff_blue Œº p‚ÇÄ hŒº‚ÇÄ,
  refine ‚ü®Œª k, f‚ÇÅ k - f‚ÇÇ k, hf‚ÇÅ.sub hf‚ÇÇ, _‚ü©,
  filter_upwards [h'f‚ÇÅ, h'f‚ÇÇ] with l h‚ÇÅ h‚ÇÇ
    k hlk n œá hœá ini hini,
  clear h'f‚ÇÅ h'f‚ÇÇ,
  specialize h‚ÇÅ k hlk n œá ini,
  specialize h‚ÇÇ k hlk n œá hœá ini hini,
  rw [range_filter_odd_eq_union, union_right_comm, red_steps_union_density_steps,
    sum_union big_blue_steps_disjoint_red_or_density_steps.symm, ‚Üêred_steps_union_density_steps,
    ‚Üêle_sub_iff_add_le] at h‚ÇÅ,
  refine h‚ÇÅ.trans _,
  exact sub_le_sub_left h‚ÇÇ _,
end

lemma red_height_diff (Œº p‚ÇÄ : ‚Ñù) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  (-2 : ‚Ñù) * k ‚â§ ‚àë i in ‚Ñõ, (h_ (p_ (i + 1)) - h_ (p_ (i - 1)) : ‚Ñù) :=
begin
  filter_upwards [top_adjuster (eventually_gt_at_top 0),
    six_five_red Œº p‚ÇÄ, six_five_degree Œº] with l hl‚ÇÄ hk hk'
    k hlk n œá hœá ini hini,
  have := four_four_red Œº (hl‚ÇÄ k hlk).ne' (hl‚ÇÄ l le_rfl).ne' hœá ini,
  rw ‚Üê@nat.cast_le ‚Ñù at this,
  refine (mul_le_mul_of_nonpos_left this (by norm_num1)).trans _,
  rw [mul_comm, ‚Üênsmul_eq_mul],
  refine card_nsmul_le_sum _ _ _ _,
  intros i hi,
  obtain ‚ü®hi', hid‚ü© := red_steps_sub_one_mem_degree hi,
  rw [le_sub_iff_add_le', ‚Üêsub_eq_add_neg, ‚Üênat.cast_two],
  refine nat.cast_sub_le.trans _,
  rw nat.cast_le,
  refine (hk k hlk _ _ ini _ hi).trans' _,
  refine nat.sub_le_sub_right _ _,
  refine (hk' k hlk n œá ini (i - 1) hid).trans_eq _,
  rw nat.sub_add_cancel hi'
end

lemma density_height_diff (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ((ùíÆ \ ùíÆ‚Å∫).card : ‚Ñù) * k ^ (1 / 16 : ‚Ñù) ‚â§
    ‚àë i in ùíÆ, (h_ (p_ (i + 1)) - h_ (p_ (i - 1)) : ‚Ñù) :=
begin
  filter_upwards [six_five_density Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, six_five_degree Œº] with l hl hl'
    k hlk n œá hœá ini hini,
  have : moderate_steps Œº k l ini ‚äÜ density_steps Œº k l ini := filter_subset _ _,
  rw [‚Üêsum_sdiff this, ‚Üênsmul_eq_mul],
  have : (0 : ‚Ñù) ‚â§ ‚àë i in moderate_steps Œº k l ini,
    ((height k ini.p (algorithm Œº k l ini (i + 1)).p) -
     (height k ini.p (algorithm Œº k l ini (i - 1)).p)),
  { refine sum_nonneg _,
    intros i hi,
    rw [sub_nonneg, nat.cast_le],
    refine (hl k hlk n œá ini hini i (this hi)).trans' _,
    obtain ‚ü®hi', hid‚ü© := density_steps_sub_one_mem_degree (this hi),
    refine (hl' k hlk n œá ini _ hid).trans _,
    rw nat.sub_add_cancel hi' },
  refine (le_add_of_nonneg_right this).trans' _,
  refine card_nsmul_le_sum _ _ _ _,
  intros x hx,
  rw [moderate_steps, ‚Üêfilter_not, mem_filter, not_le] at hx,
  refine hx.2.le.trans (sub_le_sub_left _ _),
  obtain ‚ü®hi', hid‚ü© := density_steps_sub_one_mem_degree hx.1,
  rw nat.cast_le,
  refine (hl' k hlk n œá ini _ hid).trans _,
  rw nat.sub_add_cancel hi'
end

lemma seven_five (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
 ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ((ùíÆ \ ùíÆ‚Å∫).card : ‚Ñù) ‚â§ 3 * k ^ (15 / 16 : ‚Ñù) :=
begin
  obtain ‚ü®f, hf', hf‚ü© := red_or_density_height_diff Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ,
  filter_upwards [red_height_diff Œº p‚ÇÄ, density_height_diff Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (hf'.bound zero_lt_one), hf,
    top_adjuster (eventually_gt_at_top 0)] with l hr hb hf'' hrb hk'
    k hlk n œá hœá ini hini,
  clear hf hf',
  specialize hr k hlk n œá hœá ini hini,
  specialize hb k hlk n œá hœá ini hini,
  specialize hrb k hlk n œá hœá ini hini,
  specialize hf'' k hlk,
  rw [one_mul, norm_coe_nat, norm_eq_abs] at hf'',
  replace hf'' := le_of_abs_le hf'',
  rw [sum_union red_steps_disjoint_density_steps] at hrb,
  have := ((add_le_add hr hb).trans hrb).trans hf'',
  rw [‚Üêle_sub_iff_add_le', neg_mul, sub_neg_eq_add, ‚Üêone_add_mul, add_comm, ‚Üêbit1,
    ‚Üêle_div_iff, mul_div_assoc, div_eq_mul_inv, ‚Üêrpow_neg (nat.cast_nonneg k), mul_comm (k : ‚Ñù),
    ‚Üêrpow_add_one] at this,
  { refine this.trans_eq _,
    norm_num },
  { rw nat.cast_ne_zero,
    exact (hk' k hlk).ne' },
  refine rpow_pos_of_pos _ _,
  rw nat.cast_pos,
  exact hk' k hlk
end

noncomputable def beta (Œº : ‚Ñù) (k l : ‚Ñï) (ini : book_config œá) : ‚Ñù :=
if ùíÆ‚Å∫ = ‚àÖ then Œº
  else (moderate_steps Œº k l ini).card * (‚àë i in ùíÆ‚Å∫, 1 / blue_X_ratio Œº k l ini i)‚Åª¬π

lemma beta_prop (hS : finset.nonempty ùíÆ‚Å∫) :
  1 / beta Œº k l ini = 1 / (moderate_steps Œº k l ini).card *
    ‚àë i in ùíÆ‚Å∫, 1 / blue_X_ratio Œº k l ini i :=
begin
  rw nonempty_iff_ne_empty at hS,
  rw [beta, if_neg hS, ‚Üêone_div_mul_one_div, one_div, one_div, inv_inv],
end

lemma beta_nonneg (hŒº‚ÇÄ : 0 < Œº) : 0 ‚â§ beta Œº k l ini :=
begin
  rw beta,
  split_ifs,
  { exact hŒº‚ÇÄ.le },
  refine mul_nonneg (nat.cast_nonneg _) (inv_nonneg_of_nonneg (sum_nonneg _)),
  intros i hi,
  rw one_div,
  refine inv_nonneg_of_nonneg _,
  exact blue_X_ratio_nonneg
end

lemma beta_le_Œº (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí beta Œº k l ini ‚â§ Œº :=
begin
  filter_upwards [blue_X_ratio_pos Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hŒ≤ k hlk n œá ini hini,
  rw beta,
  split_ifs,
  { refl },
  rw [‚Üêdiv_eq_mul_inv],
  refine div_le_of_nonneg_of_le_mul (sum_nonneg _) hŒº‚ÇÄ.le _,
  { intros i hi,
    rw one_div,
    refine inv_nonneg_of_nonneg _,
    exact blue_X_ratio_nonneg },
  rw [‚Üêdiv_le_iff' hŒº‚ÇÄ, div_eq_mul_one_div, ‚Üênsmul_eq_mul],
  refine card_nsmul_le_sum _ _ _ _,
  intros i hi,
  refine one_div_le_one_div_of_le _ _,
  { exact hŒ≤ k hlk n œá ini hini _ (filter_subset _ _ hi) },
  refine blue_X_ratio_le_mu _,
  refine density_steps_subset_red_or_density_steps _,
  exact (filter_subset _ _ hi)
end

lemma beta_le_one (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí beta Œº k l ini < 1 :=
begin
  filter_upwards [beta_le_Œº Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl k hlk n œá ini hini,
  exact (hl k hlk n œá ini hini).trans_lt hŒº‚ÇÅ
end

lemma prod_rpow {Œ± : Type*} {y : finset Œ±} {f : Œ± ‚Üí ‚Ñù} {r : ‚Ñù}
  (hf : ‚àÄ i ‚àà y, 0 ‚â§ f i) :
  (‚àè i in y, f i) ^ r = ‚àè i in y, (f i ^ r) :=
begin
  induction y using finset.cons_induction_on with a y has ih,
  { simp },
  simp only [mem_cons, forall_eq_or_imp] at hf,
  rw [prod_cons, prod_cons, mul_rpow hf.1 (prod_nonneg hf.2), ih hf.2],
end

lemma my_ineq {Œ± : Type*} {y : finset Œ±} (hy : y.nonempty) {f : Œ± ‚Üí ‚Ñù}
  (hf : ‚àÄ i ‚àà y, 0 < f i) :
  ((y.card : ‚Ñù) * (‚àë i in y, 1 / f i)‚Åª¬π) ^ y.card ‚â§ ‚àè i in y, f i :=
begin
  have hy' : 0 < y.card, { rwa card_pos },
  simp only [one_div],
  rw [‚Üêinv_le_inv, ‚Üêprod_inv_distrib, ‚Üêrpow_nat_cast, ‚Üêinv_rpow, mul_inv, inv_inv,
    ‚Üêrpow_le_rpow_iff, ‚Üêrpow_mul, mul_inv_cancel, rpow_one, mul_sum, prod_rpow],
  refine geom_mean_le_arith_mean_weighted _ _ _ _ _ _,
  { intros, positivity },
  { simp only [sum_const, nsmul_eq_mul],
    rw mul_inv_cancel,
    positivity },
  { intros i hi,
    have := hf i hi,
    positivity },
  { intros i hi,
    have := hf i hi,
    positivity },
  { positivity },
  { refine mul_nonneg (by positivity) (sum_nonneg (Œª i hi, _)),
    have := hf i hi,
    positivity },
  { refine prod_nonneg (Œª i hi, _),
    have := hf i hi,
    positivity },
  { refine rpow_nonneg_of_nonneg (mul_nonneg (by positivity) (sum_nonneg (Œª i hi, _))) _,
    have := hf i hi,
    positivity },
  { positivity },
  { refine mul_nonneg (by positivity) (inv_nonneg_of_nonneg (sum_nonneg (Œª i hi, _))),
    have := hf i hi,
    positivity },
  { refine prod_pos hf },
  { refine pow_pos (mul_pos (by positivity) (inv_pos.2 (sum_pos (Œª i hi, _) hy))) _,
    have := hf i hi,
    positivity },
end

lemma seven_four (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  2 ^ f k * (beta Œº k l ini) ^ s ‚â§
    ‚àè i in ùíÆ, ((algorithm Œº k l ini (i + 1)).X).card / ((algorithm Œº k l ini i).X).card :=
begin
  refine ‚ü®Œª k, (log 2)‚Åª¬π * (log k * (-2) * (3 * k ^ (15 / 16 : ‚Ñù))), _, _‚ü©,
  { refine is_o.const_mul_left _ _,
    simp only [mul_left_comm],
    refine is_o.const_mul_left _ _,
    simp only [mul_comm _ (-2 : ‚Ñù), mul_assoc],
    refine is_o.const_mul_left _ _,
    suffices : (Œª k : ‚Ñù, log k * k ^ (15 / 16 : ‚Ñù)) =o[at_top] (Œª x : ‚Ñù, x),
    { exact this.comp_tendsto tendsto_coe_nat_at_top_at_top },
    refine ((is_o_log_rpow_at_top (show (0 : ‚Ñù) < 1 / 16, by norm_num)).mul_is_O
      (is_O_refl _ _)).congr' (eventually_eq.rfl) _,
    filter_upwards [eventually_gt_at_top (0 : ‚Ñù)] with x hx,
    rw [‚Üêrpow_add hx],
    norm_num },
  filter_upwards [seven_five Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, top_adjuster (eventually_gt_at_top 0),
    five_three_right Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    beta_le_one Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    blue_X_ratio_pos Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl hk‚ÇÄ h‚ÇÖ‚ÇÉ hŒ≤ hŒ≤'
    k hlk n œá hœá ini hini,
  specialize hl k hlk n œá hœá ini hini,
  specialize h‚ÇÖ‚ÇÉ k hlk n œá ini hini,
  rw [rpow_def_of_pos two_pos, mul_inv_cancel_left‚ÇÄ, mul_assoc, ‚Üêrpow_def_of_pos],
  rotate,
  { rw nat.cast_pos,
    exact hk‚ÇÄ k hlk },
  { exact (log_pos one_lt_two).ne' },
  have : ‚àÄ i ‚àà density_steps Œº k l ini,
    (((algorithm Œº k l ini (i + 1)).X).card : ‚Ñù) / ((algorithm Œº k l ini i).X).card =
      blue_X_ratio Œº k l ini i,
  { intros i hi,
    rw [density_applied hi, book_config.density_boost_step_basic_X, blue_X_ratio_eq] },
  rw [prod_congr rfl this, rpow_mul (nat.cast_nonneg k), rpow_neg (nat.cast_nonneg k),
    rpow_two, ‚Üêone_div],
  have : moderate_steps Œº k l ini ‚äÜ density_steps Œº k l ini := filter_subset _ _,
  rw [‚Üêprod_sdiff this],
  have : ((1 : ‚Ñù) / k ^ 2) ^ (3 * (k : ‚Ñù) ^ (15 / 16 : ‚Ñù)) ‚â§
    ‚àè i in density_steps Œº k l ini \ moderate_steps Œº k l ini,
      blue_X_ratio Œº k l ini i,
  { refine (finset.prod_le_prod _ (Œª i hi, h‚ÇÖ‚ÇÉ i _)).trans' _,
    { intros i hi,
      rw one_div_nonneg,
      exact pow_nonneg (nat.cast_nonneg _) _ },
    { exact sdiff_subset _ _ hi },
    rw [prod_const, ‚Üêrpow_nat_cast (_ / _)],
    refine rpow_le_rpow_of_exponent_ge' _ _ (nat.cast_nonneg _) hl,
    { rw one_div_nonneg,
      exact pow_nonneg (nat.cast_nonneg _) _ },
    rw one_div,
    refine inv_le_one _,
    rw [one_le_sq_iff_one_le_abs, nat.abs_cast, nat.one_le_cast, nat.succ_le_iff],
    exact hk‚ÇÄ k hlk },
  refine mul_le_mul this _ (pow_nonneg (beta_nonneg hŒº‚ÇÄ) _)
    (prod_nonneg (Œª i _, blue_X_ratio_nonneg)),
  have : beta Œº k l ini ^ (density_steps Œº k l ini).card ‚â§
    beta Œº k l ini ^ (moderate_steps Œº k l ini).card,
  { refine pow_le_pow_of_le_one (beta_nonneg hŒº‚ÇÄ) _ (card_le_of_subset (filter_subset _ _)),
    exact (hŒ≤ _ hlk _ _ _ hini).le },
  refine this.trans _,
  rw [beta],
  split_ifs,
  { rw [h, prod_empty, card_empty, pow_zero] },
  refine my_ineq (nonempty_iff_ne_empty.2 h) _,
  intros i hi,
  exact hŒ≤' k hlk n œá ini hini i (filter_subset _ _ hi),
end

lemma seven_seven_aux {Œ± : Type*} [fintype Œ±] [decidable_eq Œ±] {œá : top_edge_labelling Œ± (fin 2)}
  {p q : ‚Ñù} {X0 X1 Y0 Y1 : finset Œ±} (hY : Y0 = Y1) (hp : p = col_density œá 0 X0 Y0)
  (hY' : Y0.nonempty) (h : X1 = X0.filter (Œª x, (p - q) * Y0.card ‚â§ (red_neighbors œá x ‚à© Y0).card))
  (hX1 : X1.nonempty) :
  ((X0 \ X1).card / X1.card : ‚Ñù) * q ‚â§ col_density œá 0 X1 Y1 - col_density œá 0 X0 Y0 :=
begin
  cases hY,
  have hX : X1 ‚äÜ X0,
  { rw h,
    exact filter_subset _ _ },
  have : X0.nonempty,
  { refine nonempty.mono hX hX1 },
  cases finset.eq_empty_or_nonempty (X0 \ X1) with h_1 hX01,
  { have : X0 = X1,
    { rw sdiff_eq_empty_iff_subset at h_1,
      rw [finset.subset.antisymm_iff, and_iff_right h_1],
      exact hX },
    rw [h_1, card_empty, nat.cast_zero, zero_div, zero_mul, this, sub_self] },
  have e : red_density œá X0 Y0 * X0.card =
    red_density œá (X0 \ X1) Y0 * (X0 \ X1).card + red_density œá X1 Y0 * X1.card,
  { rw [col_density_eq_average, col_density_eq_average, col_density_eq_average,
      div_mul_cancel, div_mul_cancel, div_mul_cancel, sum_sdiff hX],
    { rwa [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero, card_pos] },
    { rwa [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero, card_pos] },
    { rwa [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero, card_pos] } },
  have : col_density œá 0 (X0 \ X1) Y0 ‚â§ (p - q),
  { rw [col_density_eq_average, div_le_iff', ‚Üênsmul_eq_mul],
    rotate,
    { rwa [nat.cast_pos, card_pos] },
    refine sum_le_card_nsmul _ _ _ _,
    intro x,
    rw [h, ‚Üêfilter_not, mem_filter, not_le],
    rintro ‚ü®_, h'‚ü©,
    rw div_le_iff,
    { exact h'.le },
    rwa [nat.cast_pos, card_pos] },
  have := (add_le_add_right (mul_le_mul_of_nonneg_right this (nat.cast_nonneg _)) _).trans_eq' e,
  rw [div_mul_eq_mul_div, div_le_iff, cast_card_sdiff hX, sub_mul, sub_mul, ‚Üêhp],
  swap,
  { rwa [nat.cast_pos, card_pos] },
  rw [‚Üêhp, cast_card_sdiff hX, sub_mul, mul_sub, mul_sub] at this,
  linarith only [this]
end

lemma seven_seven' (hi : i ‚àà degree_steps Œº k l ini) (h : (X_ (i + 1)).nonempty)
  (h' : (algorithm Œº k l ini i).Y.nonempty) :
  ((X_ i \ X_ (i + 1)).card / (X_ (i + 1)).card : ‚Ñù) * (k ^ (1 / 8 : ‚Ñù) * Œ±_function k (h_ (p_ i)))
    ‚â§ p_ (i + 1) - p_ i :=
begin
  dsimp,
  refine seven_seven_aux _ rfl h' _ h,
  { rw [degree_regularisation_applied hi, book_config.degree_regularisation_step_Y] },
  { rw [degree_regularisation_applied hi, book_config.degree_regularisation_step_X],
    refl },
end

lemma one_div_k_lt_p (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i, i ‚â§ final_step Œº k l ini ‚Üí 1 / (k : ‚Ñù) < p_ i :=
begin
  have h : tendsto (Œª k : ‚Ñï, (1 : ‚Ñù) / k + 3 * k ^ (- 1 / 4 : ‚Ñù)) at_top (nhds (0 + 3 * 0)),
  { refine tendsto.add _ _,
    { refine tendsto_const_div_at_top_nhds_0_nat _ },
    refine tendsto.const_mul _ _,
    rw neg_div,
    refine (tendsto_rpow_neg_at_top _).comp tendsto_coe_nat_at_top_at_top,
    norm_num },
  have : (0 : ‚Ñù) + 3 * 0 < p‚ÇÄ,
  { rwa [zero_add, mul_zero] },
  filter_upwards [six_two Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (h.eventually (eventually_lt_nhds this))] with l hl hl'
    k hlk n œá hœá ini hini i hi,
  refine (hl k hlk n œá hœá ini hini i hi).trans_lt' _,
  rw lt_sub_iff_add_lt,
  refine hini.trans_lt' _,
  exact hl' k hlk
end

lemma X_Y_nonempty (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i, i ‚â§ final_step Œº k l ini ‚Üí
  (algorithm Œº k l ini i).X.nonempty ‚àß (algorithm Œº k l ini i).Y.nonempty :=
begin
  filter_upwards [one_div_k_lt_p Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl
    k hlk n œá hœá ini hini i hi,
  have : (0 : ‚Ñù) ‚â§ 1 / k,
  { simp },
  replace hl : 0 < col_density _ _ _ _ := (hl k hlk n œá hœá ini hini i hi).trans_le' this,
  split,
  { refine nonempty_of_ne_empty _,
    intro h,
    rw [h, col_density_empty_left] at hl,
    simpa using hl },
  { refine nonempty_of_ne_empty _,
    intro h,
    rw [h, col_density_empty_right] at hl,
    simpa using hl },
end

lemma seven_seven (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i, i ‚àà ùíü ‚Üí
  ((X_ i \ X_ (i + 1)).card / (X_ (i + 1)).card : ‚Ñù) * (k ^ (1 / 8 : ‚Ñù) * Œ±_function k (h_ (p_ i)))
    ‚â§ p_ (i + 1) - p_ i  :=
begin
  filter_upwards [X_Y_nonempty Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl
    k hlk n œá hœá ini hini i hi,
  refine seven_seven' hi _ _,
  { refine (hl k hlk n œá hœá ini hini _ _).1,
    rw [nat.add_one_le_iff, ‚Üêmem_range],
    exact filter_subset _ _ hi },
  refine Y_nonempty _,
  rw [‚Üêmem_range],
  exact filter_subset _ _ hi
end

lemma seven_eight (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚àà ùíü ‚Üí ((X_ i).card : ‚Ñù) / k ^ 2 ‚â§ (X_ (i + 1)).card :=
begin
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù ) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have h : (0 : ‚Ñù) < 1 / 8 + ((-1) / 4 + 1) := by norm_num,
  filter_upwards [seven_seven Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, top_adjuster (eventually_gt_at_top 0),
    top_adjuster (((tendsto_rpow_at_top h).comp tt).eventually_ge_at_top 2),
    X_Y_nonempty Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (((tendsto_pow_at_top two_ne_zero).comp tt).eventually_ge_at_top 2)]
    with l hl hk‚ÇÄ hk‚ÇÇ hX hk‚ÇÇ'
    k hlk n œá hœá ini hini i hi,
  specialize hk‚ÇÄ k hlk,
  specialize hl k hlk n œá hœá ini hini i hi,
  specialize hX k hlk n œá hœá ini hini,
  have h' : (2 : ‚Ñù) / k ^ 2 ‚â§ k ^ (1 / 8 : ‚Ñù) *
    Œ±_function k (height k ini.p (algorithm Œº k l ini i).p),
  { refine (mul_le_mul_of_nonneg_left five_seven_left (rpow_nonneg_of_nonneg (nat.cast_nonneg _)
      _)).trans' _,
    rw [div_le_iff, mul_assoc, div_mul_eq_mul_div, sq, ‚Üêmul_assoc, mul_div_cancel, ‚Üêrpow_add_one,
      ‚Üêrpow_add' (nat.cast_nonneg _)],
    { exact hk‚ÇÇ k hlk },
    { norm_num1 },
    { rwa [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero] },
    { rwa [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero] },
    { refine pow_pos _ _,
      rwa nat.cast_pos } },
  have : (algorithm Œº k l ini (i + 1)).p - (algorithm Œº k l ini i).p ‚â§ 1,
  { exact (sub_le_self _ col_density_nonneg).trans col_density_le_one },
  have := (mul_le_mul_of_nonneg_left h' (by positivity)).trans (hl.trans this),
  rw [div_mul_eq_mul_div, div_le_iff, one_mul] at this,
  swap,
  { rwa [nat.cast_pos, card_pos],
    refine (hX _ _).1,
    rw [nat.add_one_le_iff, ‚Üêmem_range],
    exact filter_subset _ _ hi },
  rw [cast_card_sdiff (X_subset _), sub_mul, sub_le_iff_le_add, mul_div_assoc', mul_comm,
    mul_div_assoc] at this,
  swap,
  { rw ‚Üêmem_range,
    exact filter_subset _ _ hi },
  refine le_of_mul_le_mul_left (this.trans _) two_pos,
  rw [two_mul, add_le_add_iff_left],
  refine mul_le_of_le_one_right (nat.cast_nonneg _) _,
  refine div_le_one_of_le _ (by positivity),
  exact hk‚ÇÇ' k hlk,
end

lemma log_inequality {x a : ‚Ñù} (hx : 0 ‚â§ x) (hxa : x ‚â§ a) :
  x * (log (1 + a) / a) ‚â§ log (1 + x) :=
begin
  rcases eq_or_ne a 0 with rfl | ha,
  { simp [hxa.antisymm hx] },
  set u := x * (log (1 + a) / a) with hu',
  have ha' : 0 < a := lt_of_le_of_ne' (hx.trans hxa) ha,
  have ha'' : 0 < log (1 + a),
  { refine log_pos _,
    simpa using ha' },
  have hu : 0 ‚â§ u :=
    mul_nonneg hx (div_nonneg ha''.le ha'.le),
  have : x * (log (1 + a) / a) ‚â§ log (1 + a),
  { rw [mul_div_assoc', div_le_iff' ha'],
    refine mul_le_mul_of_nonneg_right hxa ha''.le },
  rw le_log_iff_exp_le,
  swap,
  { exact add_pos_of_pos_of_nonneg one_pos hx },
  refine (general_convex_thing hu this ha''.ne').trans_eq _,
  rw [add_right_inj, exp_log, add_sub_cancel', hu', mul_div_assoc', mul_div_cancel' _ ha'.ne',
    mul_div_cancel _ ha''.ne'],
  exact add_pos_of_pos_of_nonneg one_pos ha'.le,
end

lemma first_ineq : 3 / 4 ‚â§ log (1 + 1 / 2) / (1 / 2) :=
begin
  rw [div_le_iff, div_mul_eq_mul_div, mul_div_assoc, mul_comm, ‚Üêlog_rpow, le_log_iff_exp_le,
    ‚Üêexp_one_rpow],
  refine (rpow_le_rpow (exp_pos _).le exp_one_lt_d9.le (by norm_num1)).trans _,
  all_goals {norm_num}
end

lemma q_height_le_p {k : ‚Ñï} {p‚ÇÄ p : ‚Ñù} (h' : p‚ÇÄ ‚â§ p) :
  q_function k p‚ÇÄ (height k p‚ÇÄ p - 1) ‚â§ p :=
begin
  cases lt_or_eq_of_le (@one_le_height k p‚ÇÄ p),
  { exact (q_height_lt_p h).le },
  rwa [h, nat.sub_self, q_function_zero],
end

lemma seven_nine_asymp : ‚àÄ·∂† y : ‚Ñù in nhds 0, 0 < y ‚Üí (1 + y ^ 4) ^ (3 / 2 * y‚Åª¬π) ‚â§ 1 + 2 * y ^ 3 :=
begin
  have := eventually_le_nhds (show (0 : ‚Ñù) ^ 3 < 1 / 2 / 2, by norm_num),
  filter_upwards [(tendsto.pow tendsto_id 3).eventually this] with y hy' hy,
  have h‚ÇÄ : 1 + y ^ 4 ‚â§ exp (y ^ 4),
  { rw add_comm,
    exact add_one_le_exp _ },
  have h‚ÇÇ : 0 < 1 + y ^ 4,
  { positivity },
  refine (rpow_le_rpow h‚ÇÇ.le h‚ÇÄ (by positivity)).trans _,
  have h‚ÇÅ : 0 < 1 + 2 * y ^ 3,
  { positivity },
  rw [‚Üêexp_one_rpow, ‚Üêrpow_mul (exp_pos _).le, exp_one_rpow, ‚Üêle_log_iff_exp_le h‚ÇÅ, mul_comm,
    mul_assoc, pow_succ, inv_mul_cancel_left‚ÇÄ hy.ne'],
  have : 2 * y ^ 3 ‚â§ 1 / 2,
  { rw ‚Üêle_div_iff',
    { exact hy' },
    { exact two_pos } },
  refine (log_inequality (by positivity) this).trans' _,
  refine (mul_le_mul_of_nonneg_left first_ineq (by positivity)).trans_eq' _,
  linarith only,
end

lemma seven_nine_inner (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚àà ùíü ‚Üí
    ini.p ‚â§ p_ i ‚Üí (h_ (p_ (i + 1)) : ‚Ñù) ‚â§ h_ (p_ i) + k ^ (1 / 16 : ‚Ñù) ‚Üí
    p_ (i + 1) - p_ i ‚â§ 2 * k ^ (1 / 16 : ‚Ñù) * Œ±_function k (h_ (p_ i)) :=
begin
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have h16 : (0 : ‚Ñù) < 1 / 16 := by norm_num,
  filter_upwards [top_adjuster (eventually_gt_at_top 0), six_five_degree Œº,
    top_adjuster (((tendsto_rpow_at_top h16).comp tt).eventually_ge_at_top 2),
    top_adjuster (((tendsto_rpow_neg_at_top h16).comp tt).eventually seven_nine_asymp)]
    with l hk‚ÇÄ hd hk16 hŒµ
    k hlk n œá hœá ini hini i hi hp‚ÇÅ hp‚ÇÇ,
  specialize hk‚ÇÄ k hlk,
  have h‚ÇÅ : p_ (i + 1) ‚â§ q_function k ini.p (h_ (p_ (i + 1))) :=
    height_spec hk‚ÇÄ.ne' col_density_nonneg col_density_le_one,
  have h‚ÇÇ : q_function k ini.p (h_ (p_ i) - 1) ‚â§ p_ i := q_height_le_p hp‚ÇÅ,
  refine (sub_le_sub h‚ÇÅ h‚ÇÇ).trans _,
  dsimp,
  have : height k ini.p (algorithm Œº k l ini i).p ‚â§ height k ini.p (algorithm Œº k l ini (i + 1)).p,
  { exact hd k hlk n œá ini i hi },
  have : q_function k ini.p (height k ini.p (algorithm Œº k l ini (i + 1)).p) -
    q_function k ini.p (height k ini.p (algorithm Œº k l ini i).p - 1) =
    ((1 + k ^ (-1 / 4 : ‚Ñù)) ^ (h_ (p_ (i + 1)) - h_ (p_ i) + 1) - 1) / k ^ (- 1 / 4 : ‚Ñù) *
    Œ±_function k (h_ (p_ i)),
  { dsimp,
    rw [Œ±_function, div_mul_div_comm, mul_left_comm, mul_div_mul_left, q_function, q_function,
      add_sub_add_left_eq_sub, ‚Üêsub_div, sub_sub_sub_cancel_right, sub_one_mul, ‚Üêpow_add,
      add_right_comm, ‚Üêadd_tsub_assoc_of_le one_le_height, tsub_add_cancel_of_le this,
      tsub_add_cancel_of_le one_le_height],
    refine (rpow_pos_of_pos _ _).ne',
    rw nat.cast_pos,
    exact hk‚ÇÄ },
  rw this,
  refine mul_le_mul_of_nonneg_right _ (Œ±_nonneg _ _),
  clear this h‚ÇÅ h‚ÇÇ,
  dsimp,
  have : (1 + (k : ‚Ñù) ^ (- 1 / 4 : ‚Ñù)) ^ (h_ (p_ (i + 1)) - h_ (p_ i) + 1) ‚â§
    (1 + (k : ‚Ñù) ^ (- 1 / 4 : ‚Ñù)) ^ (3 / 2 * (k : ‚Ñù) ^ (1 / 16 : ‚Ñù)),
  { rw ‚Üêrpow_nat_cast,
    refine rpow_le_rpow_of_exponent_le _ _,
    { simp only [le_add_iff_nonneg_right],
      positivity },
    rw [nat.cast_add_one, nat.cast_sub this],
    rw ‚Üêsub_le_iff_le_add' at hp‚ÇÇ,
    refine (add_le_add_right hp‚ÇÇ _).trans _,
    suffices : 2 ‚â§ (k : ‚Ñù) ^ (1 / 16 : ‚Ñù),
    { linarith },
    exact hk16 k hlk },
  refine (div_le_div_of_le (by positivity) (sub_le_sub_right this _)).trans _,
  rw [div_le_iff, sub_le_iff_le_add', mul_assoc, ‚Üêrpow_add],
  rotate,
  { positivity },
  { positivity },
  set y : ‚Ñù := k ^ (- (1 / 16) : ‚Ñù) with hy,
  convert_to (1 + y ^ 4) ^ (3 / 2 * y‚Åª¬π) ‚â§ 1 + 2 * y ^ 3 using 3,
  { rw [hy, ‚Üêrpow_nat_cast, ‚Üêrpow_mul (nat.cast_nonneg _)],
    norm_num },
  { rw [hy, rpow_neg (nat.cast_nonneg _), inv_inv] },
  { rw [hy, ‚Üêrpow_nat_cast, ‚Üêrpow_mul (nat.cast_nonneg _)],
    norm_num },
  refine hŒµ k hlk _,
  dsimp,
  positivity
end

lemma seven_nine (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚àà ùíü ‚Üí
    ini.p ‚â§ p_ i ‚Üí (h_ (p_ (i + 1)) : ‚Ñù) ‚â§ h_ (p_ i) + k ^ (1 / 16 : ‚Ñù) ‚Üí
    (1 - 2 * k ^ (- 1 / 16 : ‚Ñù) : ‚Ñù) * (X_ i).card ‚â§ (X_ (i + 1)).card :=
begin
  filter_upwards [seven_nine_inner Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    seven_seven Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (eventually_gt_at_top 0),
    X_Y_nonempty Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl hl' hk‚ÇÄ hX
    k hlk n œá hœá ini hini i hi h‚ÇÅ h‚ÇÇ,
  specialize hl k hlk n œá hœá ini hini i hi h‚ÇÅ h‚ÇÇ,
  specialize hl' k hlk n œá hœá ini hini i hi,
  have hk‚ÇÄ' : 0 < k := hk‚ÇÄ k hlk,
  have : 0 < Œ±_function k (height k ini.p (algorithm Œº k l ini i).p),
  { refine five_seven_left.trans_lt' _,
    positivity },
  dsimp at this,
  rw [‚Üêmul_assoc] at hl',
  have := le_of_mul_le_mul_right (hl'.trans hl) this,
  have hi' : i < final_step Œº k l ini,
  { rw ‚Üêmem_range,
    exact filter_subset _ _ hi },
  rw [div_mul_eq_mul_div, div_le_iff, ‚Üêle_div_iff, ‚Üêdiv_mul_eq_mul_div,
    cast_card_sdiff (X_subset hi')] at this,
  rotate,
  { positivity },
  { rw [nat.cast_pos, card_pos],
    exact (hX k hlk n œá hœá ini hini (i + 1) hi').1 },
  have z : (2 : ‚Ñù) * k ^ (1 / 16 : ‚Ñù) / k ^ (1 / 8 : ‚Ñù) * (algorithm Œº k l ini (i + 1)).X.card ‚â§
    (2 : ‚Ñù) * k ^ (- 1 / 16 : ‚Ñù) * (algorithm Œº k l ini i).X.card,
  { rw [mul_div_assoc, ‚Üêrpow_sub],
    swap,
    { rwa nat.cast_pos },
    norm_num1,
    refine mul_le_mul_of_nonneg_left _ (by positivity),
    rw nat.cast_le,
    exact card_le_of_subset (X_subset hi') },
  replace this := this.trans z,
  rw [sub_le_comm, ‚Üêone_sub_mul] at this,
  exact this
end

lemma seven_ten (Œº p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  (((red_or_density_steps Œº k l ini).filter
    (Œª i, (h_ (p_ (i - 1)) : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) ‚â§ h_ (p_ i))).card : ‚Ñù) ‚â§
    3 * k ^ (15 / 16 : ‚Ñù) :=
begin
  obtain ‚ü®f, hf', hf‚ü© := red_or_density_height_diff Œº p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ,
  filter_upwards [hf, top_adjuster (hf'.bound zero_lt_one),
    six_five_red Œº p‚ÇÄ, six_five_degree Œº, six_five_density Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (eventually_gt_at_top 0)] with l hl hf'' hr hd hs hl‚ÇÄ
    k hlk n œá hœá ini hini,
  clear hf,
  specialize hf'' k hlk,
  specialize hr k hlk n œá ini,
  specialize hd k hlk n œá ini,
  specialize hs k hlk n œá ini hini,
  rw [one_mul, norm_coe_nat, norm_eq_abs] at hf'',
  replace hf'' := le_of_abs_le hf'',
  replace hl := (hl k hlk n œá hœá ini hini).trans hf'',
  set q : ‚Ñï ‚Üí Prop := Œª i, (height k ini.p (algorithm Œº k l ini (i - 1)).p : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) ‚â§
    height k ini.p (algorithm Œº k l ini i).p,
  change (((red_or_density_steps Œº k l ini).filter q).card : ‚Ñù) ‚â§ _,
  have h‚ÇÅ : (-2 : ‚Ñù) * k ‚â§ ‚àë i in red_or_density_steps Œº k l ini,
    ((height k ini.p (algorithm Œº k l ini (i + 1)).p : ‚Ñù) -
      height k ini.p (algorithm Œº k l ini i).p),
  { have := four_four_red Œº (hl‚ÇÄ k hlk).ne' (hl‚ÇÄ l le_rfl).ne' hœá ini,
    rw ‚Üê@nat.cast_le ‚Ñù at this,
    refine (mul_le_mul_of_nonpos_left this (by norm_num1)).trans _,
    rw [mul_comm, ‚Üênsmul_eq_mul, ‚Üêred_steps_union_density_steps,
      sum_union red_steps_disjoint_density_steps],
    refine (le_add_of_nonneg_right _).trans' _,
    { refine sum_nonneg _,
      intros i hi,
      rw [sub_nonneg, nat.cast_le],
      exact hs i hi },
    refine card_nsmul_le_sum _ _ _ _,
    intros i hi,
    obtain ‚ü®hi', hid‚ü© := red_steps_sub_one_mem_degree hi,
    rw [le_sub_iff_add_le', ‚Üêsub_eq_add_neg, ‚Üênat.cast_two],
    refine nat.cast_sub_le.trans _,
    rw nat.cast_le,
    exact hr _ hi },
  have h‚ÇÇ : ((red_or_density_steps Œº k l ini).filter q).card ‚Ä¢ (k : ‚Ñù) ^ (1 / 16 : ‚Ñù) ‚â§
    ‚àë i in red_or_density_steps Œº k l ini,
    ((height k ini.p (algorithm Œº k l ini i).p : ‚Ñù) -
      height k ini.p (algorithm Œº k l ini (i - 1)).p),
  { rw [‚Üêsum_filter_add_sum_filter_not _ q],
    refine (le_add_of_nonneg_right _).trans' _,
    { refine sum_nonneg _,
      intros i hi,
      rw [sub_nonneg, nat.cast_le],
      obtain ‚ü®hi', hid‚ü© := red_or_density_steps_sub_one_mem_degree (filter_subset _ _ hi),
      refine (hd _ hid).trans_eq _,
      rw nat.sub_add_cancel hi' },
    refine card_nsmul_le_sum _ _ _ _,
    intros i hi,
    rw [mem_filter] at hi,
    rw le_sub_iff_add_le',
    exact hi.2 },
  rw red_steps_union_density_steps at hl,
  have := add_le_add h‚ÇÅ h‚ÇÇ,
  simp only [‚Üêsum_add_distrib, sub_add_sub_cancel] at this,
  replace this := this.trans hl,
  rw [‚Üêle_sub_iff_add_le', neg_mul, sub_neg_eq_add, ‚Üêone_add_mul, add_comm, ‚Üêbit1, nsmul_eq_mul,
    ‚Üêle_div_iff, mul_div_assoc, div_eq_mul_inv (k : ‚Ñù), ‚Üêrpow_neg (nat.cast_nonneg k),
    mul_comm (k : ‚Ñù), ‚Üêrpow_add_one] at this,
  refine this.trans_eq _,
  { norm_num },
  { rw nat.cast_ne_zero,
    exact (hl‚ÇÄ k hlk).ne' },
  refine rpow_pos_of_pos _ _,
  rw nat.cast_pos,
  exact hl‚ÇÄ k hlk
end

noncomputable def q_star (k : ‚Ñï) (p‚ÇÄ : ‚Ñù) : ‚Ñù := p‚ÇÄ + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1
lemma q_star_eq (k : ‚Ñï) (p‚ÇÄ : ‚Ñù) : q_star k p‚ÇÄ = p‚ÇÄ + k ^ (-19 / 16 : ‚Ñù) :=
begin
  rcases k.eq_zero_or_pos with rfl | hk,
  { norm_num [q_star] },
  have hk' : 0 < (k : ‚Ñù),
  { positivity },
  rw [q_star, add_right_inj, Œ±_one, mul_div_assoc', ‚Üêrpow_add hk', ‚Üêrpow_sub_one hk'.ne'],
  norm_num,
end

-- if p‚ÇÄ ‚â§ 1/2, which it should be, this only needs something like k ‚â• 2,
-- but it gives big k if p‚ÇÄ close to 1
lemma q_star_le_one (p‚ÇÅ : ‚Ñù) (hp‚ÇÅ : p‚ÇÅ < 1) : ‚àÄ·∂† k : ‚Ñï in at_top,
  ‚àÄ inip, inip ‚â§ p‚ÇÅ ‚Üí q_star k inip < 1 :=
begin
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have : (0 : ‚Ñù) < 19 / 16, by norm_num,
  filter_upwards [((tendsto_rpow_neg_at_top this).comp tt).eventually
    (eventually_lt_nhds (sub_pos_of_lt hp‚ÇÅ))] with k hk inip hinip,
  rw [q_star_eq, ‚Üêlt_sub_iff_add_lt', neg_div],
  exact hk.trans_le (sub_le_sub_left hinip _),
end

-- (1 + y ^ 4) ^ (3 / 2 * y‚Åª¬π) ‚â§ 1 + 2 * y ^ 3


-- lemma general_convex_thing {a x : ‚Ñù} (hx : 0 ‚â§ x) (hxa : x ‚â§ a) :
--   exp x ‚â§ 1 + (exp a - 1) * x / a :=

-- log_inequality

-- lemma log_inequality {x a : ‚Ñù} (hx : 0 ‚â§ x) (hxa : x ‚â§ a) (ha : a ‚â† 0) :
--   x * (log (1 + a) / a) ‚â§ log (1 + x) :=

lemma quick_calculation : 3 / 4 ‚â§ log (1 + 2 / 3) / (2 / 3) :=
begin
  rw [le_div_iff, le_log_iff_exp_le, ‚Üêexp_one_rpow],
  norm_num1,
  rw [‚Üêsqrt_eq_rpow, sqrt_le_left],
  refine exp_one_lt_d9.le.trans _,
  all_goals {norm_num1},
end

lemma height_q_star_le (p‚ÇÅ : ‚Ñù) (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† k : ‚Ñï in at_top, ‚àÄ inip, 0 ‚â§ inip ‚Üí inip ‚â§ p‚ÇÅ ‚Üí
  (height k inip (q_star k inip) : ‚Ñù) ‚â§ 2 * k ^ (1 / 16 : ‚Ñù) :=
begin
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have hh‚ÇÅ : (0 : ‚Ñù) < 1 / 16, by norm_num,
  have hh‚ÇÇ : (0 : ‚Ñù) < 1 / 4, by norm_num,
  have hh‚ÇÉ : (0 : ‚Ñù) < 2 / 3, by norm_num,
  have := (((tendsto_rpow_at_top hh‚ÇÅ).const_mul_at_top (zero_lt_two' ‚Ñù)).comp tt).eventually
    (eventually_le_floor (2 / 3) (by norm_num1)),
  filter_upwards [
    ((tendsto_rpow_at_top hh‚ÇÅ).comp tt).eventually_ge_at_top (1 / 2 : ‚Ñù),
    eventually_ne_at_top 0, this,
    ((tendsto_rpow_neg_at_top hh‚ÇÇ).comp tt).eventually (eventually_le_nhds hh‚ÇÉ),
    q_star_le_one p‚ÇÅ hp‚ÇÅ] with k hk hk‚ÇÄ hk‚ÇÇ hk‚ÇÉ hq inip h‚ÇÄinip hinip,
  have hk' : (0 : ‚Ñù) < k, by positivity,
  dsimp at hk‚ÇÇ,
  rw [‚Üêmul_assoc, div_mul_eq_mul_div, ‚Üêbit0_eq_two_mul] at hk‚ÇÇ,
  rw ‚Üênat.le_floor_iff,
  swap,
  { positivity },
  refine height_min _ h‚ÇÄinip (hq inip hinip).le _ _,
  { exact hk‚ÇÄ },
  { rw [ne.def, nat.floor_eq_zero, not_lt, ‚Üêdiv_le_iff' (zero_lt_two' ‚Ñù)],
    exact hk },
  rw [q_function, q_star, add_le_add_iff_left, Œ±_one, mul_div_assoc'],
  refine div_le_div_of_le (nat.cast_nonneg _) _,
  rw [le_sub_iff_add_le, ‚Üêrpow_nat_cast],
  refine (rpow_le_rpow_of_exponent_le _ hk‚ÇÇ).trans' _,
  { simp only [le_add_iff_nonneg_right],
    exact (rpow_pos_of_pos hk' _).le },
  refine (add_one_le_exp _).trans _,
  rw [mul_comm, ‚Üêexp_one_rpow, rpow_mul, exp_one_rpow, rpow_mul],
  rotate,
  { positivity },
  { exact (exp_pos _).le },
  refine rpow_le_rpow (exp_pos _).le _ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
  rw [‚Üêle_log_iff_exp_le, log_rpow],
  rotate,
  { positivity },
  { positivity },
  rw [‚Üêdiv_le_iff', div_div_eq_mul_div, mul_div_assoc],
  swap,
  { norm_num },
  have : (k : ‚Ñù) ^ (-1 / 4 : ‚Ñù) ‚â§ 2 / 3,
  { rwa [neg_div] },
  refine (log_inequality (by positivity) this).trans' (mul_le_mul_of_nonneg_left _ (by positivity)),
  exact quick_calculation
end

-- t ‚â§ k
-- - Œ±_ (h(q*) + 2) * t ‚â• - 2 Œ±‚ÇÅ * k
-- Œ±_ (h(q*) + 2) * t ‚â§ 2 Œ±‚ÇÅ * k
-- Œ±_ (h(q*) + 2) ‚â§ 2 Œ±‚ÇÅ
-- (1 + Œµ) ^ (h(q*) + 1)  ‚â§ 2
-- (1 + Œµ) ^ (2 * Œµ^(-1/4) + 1) ‚â§ 2
-- exp (Œµ * (2 * Œµ^(-1/4) + 1)) ‚â§ 2


lemma min_simpler {x y z w : ‚Ñù} (h : y - w ‚â§ x) (hw : 0 ‚â§ w) : - w ‚â§ min x z - min y z :=
begin
  rcases min_cases x z with (‚ü®h‚ÇÅ, h‚ÇÇ‚ü© | ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©);
  rcases min_cases y z with (‚ü®h‚ÇÉ, h‚ÇÑ‚ü© | ‚ü®h‚ÇÉ, h‚ÇÑ‚ü©);
  linarith,
end

lemma seven_eleven_red_termwise (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ)
  (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  ‚àÄ i ‚àà ‚Ñõ,
  - Œ±_function k (height k ini.p (q_star k ini.p) + 2) ‚â§
    min (p_ (i + 1)) (q_star k ini.p) - min (p_ i) (q_star k ini.p) :=
begin
  filter_upwards [top_adjuster (q_star_le_one p‚ÇÅ hp‚ÇÅ), six_five_red Œº p‚ÇÄ,
    top_adjuster (eventually_ne_at_top 0)] with l hq h‚ÇÅ h‚ÇÄ
    k hlk n œá hœá ini hini hini' i hi,
  cases le_or_lt (height k ini.p (p_ i)) (height k ini.p (q_star k ini.p) + 2),
  { refine (min_simpler (six_four_red hi) (Œ±_nonneg _ _)).trans' _,
    exact neg_le_neg (Œ±_increasing h) },
  dsimp at h,
  have := h‚ÇÅ k hlk n œá ini i hi,
  rw ‚Üêlt_tsub_iff_right at h,
  have h‚ÇÅ : q_star k ini.p ‚â§ p_ (i + 1),
  { by_contra' h',
    refine (h.trans_le this).not_le (height_mono (h‚ÇÄ k hlk) col_density_nonneg _ h'.le),
    exact (hq _ hlk _ hini').le },
  have h‚ÇÇ : q_star k ini.p ‚â§ p_ i,
  { by_contra' h',
    refine (h.trans_le (nat.sub_le _ _)).not_le (height_mono (h‚ÇÄ k hlk) col_density_nonneg _ h'.le),
    exact (hq _ hlk _ hini').le },
  rw [min_eq_right h‚ÇÅ, min_eq_right h‚ÇÇ, sub_self, right.neg_nonpos_iff],
  exact Œ±_nonneg _ _
end

lemma seven_eleven_red (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  - 2 * Œ±_function k 1 * k ‚â§
    ‚àë i in ‚Ñõ, (min (p_ (i + 1)) (q_star k ini.p) - min (p_ i) (q_star k ini.p)) :=
begin
  have h : tendsto (Œª k : ‚Ñù, 2 * k ^ (-1 / 4 + 1 / 16 : ‚Ñù) + k ^ (-1 / 4 : ‚Ñù)) at_top
    (nhds (2 * 0 + 0)),
  { refine (tendsto.const_mul _ _).add _,
    { norm_num1,
      refine tendsto_rpow_neg_at_top _,
      norm_num },
    { norm_num1,
      refine tendsto_rpow_neg_at_top _,
      norm_num } },
  rw [mul_zero, add_zero] at h,
  filter_upwards [top_adjuster (height_q_star_le p‚ÇÅ hp‚ÇÅ),
    seven_eleven_red_termwise Œº p‚ÇÄ p‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ hp‚ÇÅ,
    top_adjuster (eventually_gt_at_top 0),
    top_adjuster
      ((h.comp tendsto_coe_nat_at_top_at_top).eventually (eventually_le_nhds (log_pos one_lt_two)))]
    with l hq hr h‚ÇÄ h‚ÇÅ
    k hlk n œá hœá ini hini hini',
  refine (card_nsmul_le_sum _ _ _ (hr k hlk n œá hœá ini hini hini')).trans' _,
  rw [nsmul_eq_mul', neg_mul, neg_mul, neg_mul, neg_le_neg_iff],
  refine mul_le_mul _ (nat.cast_le.2 (four_four_red Œº (h‚ÇÄ _ hlk).ne' (h‚ÇÄ _ le_rfl).ne' hœá ini))
    (nat.cast_nonneg _) (mul_nonneg zero_lt_two.le (Œ±_nonneg _ _)),
  rw [Œ±_one, Œ±_function, mul_div_assoc', mul_comm, nat.add_succ_sub_one],
  refine div_le_div_of_le (nat.cast_nonneg _) (mul_le_mul_of_nonneg_right _ (by positivity)),
  rw add_comm,
  refine (pow_le_pow_of_le_left (by positivity) (add_one_le_exp _) _).trans _,
  rw [‚Üêexp_one_rpow, ‚Üêrpow_nat_cast, ‚Üêrpow_mul (exp_pos _).le, nat.cast_add_one, exp_one_rpow,
    ‚Üêle_log_iff_exp_le zero_lt_two],
  refine (mul_le_mul_of_nonneg_left (add_le_add_right (hq _ hlk _ col_density_nonneg
    hini') _) (by positivity)).trans _,
  rw [mul_add_one, mul_left_comm, ‚Üêrpow_add],
  swap,
  { exact nat.cast_pos.2 (h‚ÇÄ k hlk) },
  exact h‚ÇÅ k hlk
end

lemma seven_eleven_red_or_density (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ)
  (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  - 2 * Œ±_function k 1 * k ‚â§
    ‚àë i in ‚Ñõ ‚à™ ùíÆ, (min (p_ (i + 1)) (q_star k ini.p) - min (p_ i) (q_star k ini.p)) :=
begin
  filter_upwards [seven_eleven_red Œº p‚ÇÄ p‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ hp‚ÇÅ,
    six_four_density Œº p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l h‚ÇÅ h‚ÇÇ
    k hlk n œá hœá ini hini hini',
  rw sum_union red_steps_disjoint_density_steps,
  refine (h‚ÇÅ k hlk n œá hœá ini hini hini').trans _,
  rw [le_add_iff_nonneg_right, sum_sub_distrib, sub_nonneg],
  refine sum_le_sum _,
  intros i hi,
  refine min_le_min _ le_rfl,
  exact h‚ÇÇ k hlk n œá ini hini i hi,
end

lemma seven_eleven_blue_termwise (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ)
  (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  ‚àÄ i ‚àà ‚Ñ¨,
  - (k : ‚Ñù) ^ (1 / 8 : ‚Ñù) *
    Œ±_function k (height k ini.p (q_star k ini.p) + ‚åä2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù)‚åã‚Çä) ‚â§
    min (p_ (i + 1)) (q_star k ini.p) - min (p_ (i - 1)) (q_star k ini.p) :=
begin
  filter_upwards [top_adjuster (q_star_le_one p‚ÇÅ hp‚ÇÅ), six_five_blue Œº p‚ÇÄ hŒº‚ÇÄ,
    top_adjuster (eventually_gt_at_top 0)] with l hq h‚ÇÅ h‚ÇÄ
    k hlk n œá hœá ini hini hini' i hi,
  have : (0 : ‚Ñù) ‚â§ k ^ (1 / 8 : ‚Ñù),
  { positivity },
  cases le_or_lt (height k ini.p (p_ (i - 1)))
    (height k ini.p (q_star k ini.p) + ‚åä2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù)‚åã‚Çä),
  { refine (min_simpler (six_four_blue hŒº‚ÇÄ hi) _).trans' _,
    { exact mul_nonneg (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) (Œ±_nonneg _ _) },
    rw [neg_mul, neg_le_neg_iff],
    exact mul_le_mul_of_nonneg_left (Œ±_increasing h) (by positivity) },
  dsimp at h,
  have := h‚ÇÅ k hlk n œá ini hini i hi,
  rw [add_comm, ‚Üênat.floor_add_nat, nat.floor_lt, ‚Üêlt_sub_iff_add_lt'] at h,
  rotate,
  { positivity },
  { positivity },
  have h‚ÇÅ : q_star k ini.p ‚â§ p_ (i + 1),
  { by_contra' h',
    refine (h.trans_le this).not_le _,
    rw nat.cast_le,
    refine height_mono (h‚ÇÄ k hlk).ne' col_density_nonneg _ h'.le,
    exact (hq _ hlk _ hini').le },
  have h‚ÇÇ : q_star k ini.p ‚â§ p_ (i - 1),
  { by_contra' h',
    refine (h.trans_le (sub_le_self _ _)).not_le _,
    { positivity },
    rw nat.cast_le,
    refine height_mono (h‚ÇÄ k hlk).ne' col_density_nonneg _ h'.le,
    exact (hq _ hlk _ hini').le },
  rw [min_eq_right h‚ÇÅ, min_eq_right h‚ÇÇ, sub_self, neg_mul, right.neg_nonpos_iff],
  exact mul_nonneg (by positivity) (Œ±_nonneg _ _),
end

lemma seven_eleven_blue (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  - Œ±_function k 1 * k ‚â§
    ‚àë i in ‚Ñ¨, (min (p_ (i + 1)) (q_star k ini.p) - min (p_ (i - 1)) (q_star k ini.p)) :=
begin
  have h : tendsto (Œª k : ‚Ñù, (2 * k ^ (1 / 16 + -1 / 4 : ‚Ñù) + 2 * k ^ (1 / 8 + -1 / 4 : ‚Ñù)) -
    k ^ (-1 / 4 : ‚Ñù)) at_top (nhds ((2 * 0 + 2 * 0) - 0)),
  { refine ((tendsto.const_mul _ _).add (tendsto.const_mul _ _)).sub _,
    { norm_num1,
      refine tendsto_rpow_neg_at_top _,
      norm_num },
    { norm_num1,
      refine tendsto_rpow_neg_at_top _,
      norm_num },
    { norm_num1,
      refine tendsto_rpow_neg_at_top _,
      norm_num } },
  rw [mul_zero, add_zero, sub_zero] at h,
  filter_upwards [top_adjuster (height_q_star_le p‚ÇÅ hp‚ÇÅ),
    seven_eleven_blue_termwise Œº p‚ÇÄ p‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ hp‚ÇÅ,
    top_adjuster (eventually_gt_at_top 0),
    top_adjuster (eventually_ge_at_top (2 ^ 8)),
    four_three Œº hŒº‚ÇÄ,
    top_adjuster
      ((h.comp tendsto_coe_nat_at_top_at_top).eventually (eventually_le_nhds (log_pos one_lt_two)))
      ]
    with l hq hr h‚ÇÄ hk2 hb h‚ÇÅ
    k hlk n œá hœá ini hini hini',
  refine (card_nsmul_le_sum _ _ _ (hr k hlk n œá hœá ini hini hini')).trans' _,
  rw [nsmul_eq_mul', neg_mul, neg_mul, neg_mul, neg_le_neg_iff, mul_right_comm, mul_comm _ (k : ‚Ñù)],
  refine le_of_mul_le_mul_left _ two_pos,
  rw [‚Üêmul_assoc, mul_left_comm _ _ (Œ±_function k 1), ‚Üêmul_assoc],
  have h' : (0 : ‚Ñù) < k,
  { rw nat.cast_pos,
    exact h‚ÇÄ k hlk },
  have : 2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù) * ((big_blue_steps Œº k l ini).card) ‚â§ k,
  { have := (hb k hlk n œá hœá ini).trans
      (rpow_le_rpow (nat.cast_nonneg _) (nat.cast_le.2 hlk) (by norm_num1)),
    refine (mul_le_mul_of_nonneg_left this _).trans _,
    { positivity },
    have : (2 : ‚Ñù) ‚â§ k ^ (1 / 8 : ‚Ñù),
    { refine (rpow_le_rpow (nat.cast_nonneg _) (nat.cast_le.2 (hk2 k hlk)) _).trans' _,
      { norm_num1 },
      rw [nat.cast_pow, ‚Üêrpow_nat_cast, ‚Üêrpow_mul (nat.cast_nonneg 2)],
      norm_num1 },
    rw [mul_assoc, ‚Üêrpow_add h'],
    refine (mul_le_mul_of_nonneg_right this _).trans_eq _,
    { exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _ },
    rw [‚Üêrpow_add h'],
    norm_num },
  refine mul_le_mul this _ (Œ±_nonneg _ _) (nat.cast_nonneg _),
  rw [Œ±_one, Œ±_function, mul_div_assoc', mul_comm],
  refine div_le_div_of_le _ (mul_le_mul_of_nonneg_right _ (by positivity)),
  { exact nat.cast_nonneg _ },
  rw add_comm,
  refine (pow_le_pow_of_le_left (by positivity) (add_one_le_exp _) _).trans _,
  rw [‚Üêexp_one_rpow, ‚Üêrpow_nat_cast, ‚Üêrpow_mul (exp_pos _).le, exp_one_rpow,
    ‚Üêle_log_iff_exp_le zero_lt_two, nat.cast_sub, nat.cast_add, nat.cast_one],
  swap,
  { exact one_le_height.trans (nat.le_add_right _ _) },
  refine (mul_le_mul_of_nonneg_left (sub_le_sub_right (add_le_add (hq k hlk ini.p col_density_nonneg
    hini') (nat.floor_le _)) _) _).trans _,
  { exact mul_nonneg two_pos.le (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) },
  { exact (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) },
  rw [mul_comm, sub_one_mul, add_mul, mul_assoc, mul_assoc, ‚Üêrpow_add h', ‚Üêrpow_add h'],
  exact h‚ÇÅ k hlk
end

lemma seven_eleven_red_or_density_other (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ)
  (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  (k : ‚Ñù) ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 *
    (((red_or_density_steps Œº k l ini).filter
      (Œª i, ((p_ (i - 1)) : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 ‚â§ p_ i ‚àß
            p_ (i - 1) ‚â§ ini.p)).card : ‚Ñù) ‚â§
    ‚àë i in ‚Ñõ ‚à™ ùíÆ, (min (p_ i) (q_star k ini.p) - min (p_ (i - 1)) (q_star k ini.p)) :=
begin
  filter_upwards [] with l
    k hlk n œá hœá ini hini hini',
  rw red_steps_union_density_steps,
  have : (k : ‚Ñù) ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 * (((red_or_density_steps Œº k l ini).filter
      (Œª i, ((p_ (i - 1)) : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 ‚â§ p_ i ‚àß
            p_ (i - 1) ‚â§ ini.p)).card : ‚Ñù) ‚â§
    ‚àë i in ((red_or_density_steps Œº k l ini).filter
      (Œª i, ((p_ (i - 1)) : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 ‚â§ p_ i ‚àß
            p_ (i - 1) ‚â§ ini.p)),
            (min (p_ i) (q_star k ini.p) - min (p_ (i - 1)) (q_star k ini.p)),
  { rw [mul_comm, ‚Üênsmul_eq_mul],
    refine card_nsmul_le_sum _ _ _ _,
    intros i hi,
    simp only [mem_filter] at hi,
    have : p_ (i - 1) ‚â§ q_star k ini.p,
    { rw [q_star_eq],
      refine hi.2.2.trans _,
      rw le_add_iff_nonneg_right,
      exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _ },
    rw [min_eq_left this, le_sub_iff_add_le', le_min_iff, q_star, add_le_add_iff_right],
    exact hi.2 },
  refine this.trans _,
  refine sum_le_sum_of_subset_of_nonneg (filter_subset _ _) _,
  intros i hi hi',
  rw sub_nonneg,
  refine min_le_min _ le_rfl,
  have := red_or_density_steps_sub_one_mem_degree hi,
  refine (six_four_degree this.2).trans _,
  rw nat.sub_add_cancel this.1
end

lemma seven_eleven (Œº p‚ÇÄ p‚ÇÅ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº) (hŒº‚ÇÅ : Œº < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) (hp‚ÇÅ : p‚ÇÅ < 1) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí ini.p ‚â§ p‚ÇÅ ‚Üí
  (((red_or_density_steps Œº k l ini).filter
    (Œª i, ((p_ (i - 1)) : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 ‚â§ p_ i ‚àß
      p_ (i - 1) ‚â§ ini.p)).card : ‚Ñù) ‚â§ 4 * k ^ (-1 / 16 : ‚Ñù) * k :=
begin
  filter_upwards [top_adjuster (eventually_gt_at_top 0),
    seven_eleven_blue Œº p‚ÇÄ p‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ hp‚ÇÅ,
    seven_eleven_red_or_density Œº p‚ÇÄ p‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ hp‚ÇÅ,
    seven_eleven_red_or_density_other Œº p‚ÇÄ p‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ hp‚ÇÅ] with l h‚ÇÄ hb hr hd
    k hlk n œá hœá ini hini hini',
  set X := ((red_or_density_steps Œº k l ini).filter
    (Œª i, ((p_ (i - 1)) : ‚Ñù) + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 ‚â§ p_ i ‚àß
      p_ (i - 1) ‚â§ ini.p)),
  specialize hb k hlk n œá hœá ini hini hini',
  specialize hr k hlk n œá hœá ini hini hini',
  specialize hd k hlk n œá hœá ini hini hini',
  change _ * (X.card : ‚Ñù) ‚â§ _ at hd,
  change (X.card : ‚Ñù) ‚â§ _,
  have h‚ÇÅ : Œ±_function k 1 * ((k : ‚Ñù) ^ (1 / 16 : ‚Ñù) * X.card - 3 * k) ‚â§
    ‚àë i in (range (final_step Œº k l ini)).filter odd,
      (min (p_ (i + 1)) (q_star k ini.p) - min (p_ (i - 1)) (q_star k ini.p)),
  { rw [range_filter_odd_eq_union, union_right_comm, sum_union],
    swap,
    { rw red_steps_union_density_steps,
      exact big_blue_steps_disjoint_red_or_density_steps.symm },
    refine ((add_le_add_three hr hd hb).trans_eq' _).trans_eq _,
    { ring },
    rw [add_left_inj, ‚Üêsum_add_distrib],
    refine sum_congr rfl (Œª x hx, _),
    rw sub_add_sub_cancel },
  have h‚ÇÇ : ‚àë i in (range (final_step Œº k l ini)).filter odd,
      (min (p_ (i + 1)) (q_star k ini.p) - min (p_ (i - 1)) (q_star k ini.p)) ‚â§
      k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1,
  { refine sum_range_odd_telescope' (Œª i, min (p_ i) (q_star k ini.p)) _,
    { intros i,
      dsimp,
      rw [algorithm_zero, q_star, sub_le_iff_le_add'],
      have : min ini.p (ini.p + k ^ (1 / 16 : ‚Ñù) * Œ±_function k 1) = ini.p,
      { rw [min_eq_left_iff, le_add_iff_nonneg_right],
        exact mul_nonneg (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) (Œ±_nonneg _ _) },
      rw this,
      exact min_le_right _ _ } },
  specialize h‚ÇÄ k hlk,
  have h‚ÇÉ : (k : ‚Ñù) ^ (1 / 16 : ‚Ñù) * Œ±_function k 1 ‚â§ Œ±_function k 1 * k ^ (1 : ‚Ñù),
  { rw mul_comm,
    refine mul_le_mul_of_nonneg_left _ (Œ±_nonneg _ _),
    refine rpow_le_rpow_of_exponent_le _ _,
    { rw [nat.one_le_cast, nat.succ_le_iff],
      exact h‚ÇÄ },
    norm_num1 },
  rw rpow_one at h‚ÇÉ,
  have := le_of_mul_le_mul_left ((h‚ÇÅ.trans h‚ÇÇ).trans h‚ÇÉ) _,
  swap,
  { rw Œ±_one,
    positivity },
  rw [mul_right_comm, neg_div, rpow_neg, ‚Üêdiv_eq_mul_inv, le_div_iff'],
  { linarith only [this] },
  { positivity },
  { positivity },
end

-- lemma range_filter_odd_eq_union :
--   (range (final_step Œº k l ini)).filter odd =
--     red_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini ‚à™ density_steps Œº k l ini :=

-- lemma sum_range_odd_telescope {k : ‚Ñï} (f : ‚Ñï ‚Üí ‚Ñù) {c : ‚Ñù} (hc' : ‚àÄ i, f i ‚â§ c)
--   (hc : 0 ‚â§ f 0) :
--   ‚àë i in (range k).filter odd, (f (i + 1) - f (i - 1)) ‚â§ c :=

end simple_graph
