/-
Copyright (c) 2022 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import combinatorics.simple_graph.clique
import data.nat.parity
import data.sym.card

/-!
# Triangles in graphs

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

A *triangle* in a simple graph is a `3`-clique, namely a set of three vertices that are
pairwise adjacent.

This module defines and proves properties about triangles in simple graphs.

## Main declarations

* `simple_graph.far_from_triangle_free`: Predicate for a graph to have enough triangles that, to
  remove all of them, one must one must remove a lot of edges. This is the crux of the Triangle
  Removal lemma.

## TODO

* Generalise `far_from_triangle_free` to other graphs, to state and prove the Graph Removal Lemma.
* Find a better name for `far_from_triangle_free`. Added 4/26/2022. Remove this TODO if it gets old.
-/

namespace simple_graph
variables {V : Type*}

@[simp] lemma edge_set_top : (‚ä§ : simple_graph V).edge_set = {e : sym2 V | ¬¨ e.is_diag} :=
by ext x; induction x using sym2.ind; simp

@[simp] lemma edge_finset_top [fintype V] [decidable_eq V] [fintype (‚ä§ : simple_graph V).edge_set] :
  (‚ä§ : simple_graph V).edge_finset = finset.univ.filter (Œª e, ¬¨ e.is_diag) :=
by ext x; induction x using sym2.ind; simp

end simple_graph

open finset fintype nat

namespace simple_graph
variables {Œ± Œ≤ ùïú : Type*} [linear_ordered_field ùïú] {G H : simple_graph Œ±} {Œµ Œ¥ : ùïú} {n : ‚Ñï}
  {s : finset Œ±}

section locally_linear
variables [decidable_eq Œ±] [decidable_eq Œ≤]

/-- A graph has edge-disjoint triangles if each edge belongs to at most one triangle. -/
def edge_disjoint_triangles (G : simple_graph Œ±) : Prop :=
(G.clique_set 3).pairwise $ Œª x y, (x ‚à© y).card ‚â§ 1

/-- A graph is locally linear if each edge belongs to exactly one triangle. -/
def locally_linear (G : simple_graph Œ±) : Prop :=
G.edge_disjoint_triangles ‚àß ‚àÄ ‚¶Éx y‚¶Ñ, G.adj x y ‚Üí ‚àÉ s, G.is_n_clique 3 s ‚àß x ‚àà s ‚àß y ‚àà s

protected lemma locally_linear.edge_disjoint_triangles :
  G.locally_linear ‚Üí G.edge_disjoint_triangles :=
and.left

lemma edge_disjoint_triangles.mono (h : G ‚â§ H) (hH : H.edge_disjoint_triangles) :
  G.edge_disjoint_triangles :=
hH.mono $ clique_set_mono h

@[simp] lemma edge_disjoint_triangles_bot : (‚ä• : simple_graph Œ±).edge_disjoint_triangles :=
by simp [edge_disjoint_triangles]

@[simp] lemma locally_linear_bot : (‚ä• : simple_graph Œ±).locally_linear := by simp [locally_linear]

lemma edge_disjoint_triangles.map (f : Œ± ‚Ü™ Œ≤) (hG : G.edge_disjoint_triangles) :
  (G.map f).edge_disjoint_triangles :=
begin
  rw [edge_disjoint_triangles, clique_set_map (bit1_lt_bit1.2 zero_lt_one),
    ((finset.map_injective f).inj_on _).pairwise_image],
  rintro s hs t ht,
  dsimp [function.on_fun],
  rw [‚Üêmap_inter, card_map],
  exact hG hs ht,
end

lemma locally_linear.map (f : Œ± ‚Ü™ Œ≤) (hG : G.locally_linear) : (G.map f).locally_linear :=
begin
  refine ‚ü®hG.1.map _, _‚ü©,
  rintro _ _ ‚ü®a, b, h, rfl, rfl‚ü©,
  obtain ‚ü®s, hs, ha, hb‚ü© := hG.2 h,
  exact ‚ü®s.map f, hs.map, mem_map_of_mem _ ha, mem_map_of_mem _ hb‚ü©,
end

@[simp] lemma locally_linear_comap {G : simple_graph Œ≤} {e : Œ± ‚âÉ Œ≤} :
  (G.comap e.to_embedding).locally_linear ‚Üî G.locally_linear :=
begin
  refine ‚ü®Œª h, _, _‚ü©,
  { rw [‚Üêcomap_map_eq e.symm.to_embedding G, comap_symm, map_symm],
    exact h.map _ },
  { rw ‚Üêmap_symm,
    exact locally_linear.map _ }
end

instance [fintype Œ±] (G : simple_graph Œ±) [decidable_rel G.adj] :
  decidable G.edge_disjoint_triangles :=
decidable_of_iff ((G.clique_finset 3 : set (finset Œ±)).pairwise $ Œª x y, (x ‚à© y).card ‚â§ 1) $
  by { rw coe_clique_finset, refl }

instance [fintype Œ±] (G : simple_graph Œ±) [decidable_rel G.adj] : decidable G.locally_linear :=
and.decidable

end locally_linear

open_locale classical

variables [fintype Œ±]

/-- A simple graph is *`Œµ`-triangle-free far* if one must remove at least `Œµ * (card Œ±)^2` edges to
make it triangle-free. -/
def far_from_triangle_free (G : simple_graph Œ±) (Œµ : ùïú) : Prop :=
G.delete_far (Œª H, H.clique_free 3) $ Œµ * (card Œ±^2 : ‚Ñï)

lemma far_from_triangle_free_iff :
  G.far_from_triangle_free Œµ ‚Üî
    ‚àÄ ‚¶ÉH‚¶Ñ, H ‚â§ G ‚Üí H.clique_free 3 ‚Üí Œµ * (card Œ±^2 : ‚Ñï) ‚â§ G.edge_finset.card - H.edge_finset.card :=
delete_far_iff

alias far_from_triangle_free_iff ‚Üî far_from_triangle_free.le_card_sub_card _

lemma far_from_triangle_free.mono (hŒµ : G.far_from_triangle_free Œµ) (h : Œ¥ ‚â§ Œµ) :
  G.far_from_triangle_free Œ¥ :=
hŒµ.mono $ mul_le_mul_of_nonneg_right h $ cast_nonneg _

lemma far_from_triangle_free.clique_finset_nonempty' (hH : H ‚â§ G) (hG : G.far_from_triangle_free Œµ)
  (hcard : (G.edge_finset.card - H.edge_finset.card : ùïú) < Œµ * (card Œ± ^ 2 : ‚Ñï)) :
  (H.clique_finset 3).nonempty :=
nonempty_of_ne_empty $ H.clique_finset_eq_empty_iff.not.2 $ Œª hH',
  (hG.le_card_sub_card hH hH').not_lt hcard

variables [nonempty Œ±]

lemma far_from_triangle_free.lt_half (hG : G.far_from_triangle_free Œµ) : Œµ < 2‚Åª¬π :=
begin
  by_contra' hŒµ,
  have := hG.le_card_sub_card bot_le (clique_free_bot $ by norm_num),
  simp only [set.to_finset_card (edge_set ‚ä•), card_of_finset, edge_set_bot, cast_zero,
    finset.card_empty, tsub_zero] at this,
  have hŒµ‚ÇÄ : 0 < Œµ := hŒµ.trans_lt' (by norm_num),
  rw inv_pos_le_iff_one_le_mul (zero_lt_two' ùïú) at hŒµ,
  refine (this.trans $ le_mul_of_one_le_left (by positivity) hŒµ).not_lt _,
  rw [mul_assoc, mul_lt_mul_left hŒµ‚ÇÄ],
  norm_cast,
  refine (mul_le_mul_left' (card_mono $ edge_finset_mono le_top) _).trans_lt _,
  rw [edge_finset_top, filter_not, card_sdiff (subset_univ _), card_univ, sym2.card],
  simp_rw [sym2.is_diag_iff_mem_range_diag, univ_filter_mem_range, mul_tsub,
    nat.mul_div_cancel' (card Œ±).even_mul_succ_self.two_dvd],
  rw [card_image_of_injective _ sym2.diag_injective, card_univ, mul_add_one, two_mul, sq,
    add_tsub_add_eq_tsub_right],
  exact tsub_lt_self (mul_pos fintype.card_pos fintype.card_pos) fintype.card_pos,
end

lemma far_from_triangle_free.lt_one (hG : G.far_from_triangle_free Œµ) : Œµ < 1 :=
hG.lt_half.trans $ by norm_num

lemma far_from_triangle_free.nonpos (h‚ÇÄ : G.far_from_triangle_free Œµ) (h‚ÇÅ : G.clique_free 3) :
  Œµ ‚â§ 0 :=
begin
  have := h‚ÇÄ (empty_subset _),
  rw [coe_empty, finset.card_empty, cast_zero, delete_edges_empty_eq] at this,
  exact nonpos_of_mul_nonpos_left (this h‚ÇÅ) (cast_pos.2 $ sq_pos_of_pos fintype.card_pos),
end

lemma clique_free.not_far_from_triangle_free (hG : G.clique_free 3) (hŒµ : 0 < Œµ) :
  ¬¨ G.far_from_triangle_free Œµ :=
Œª h, (h.nonpos hG).not_lt hŒµ

lemma far_from_triangle_free.not_clique_free (hG : G.far_from_triangle_free Œµ) (hŒµ : 0 < Œµ) :
  ¬¨ G.clique_free 3 :=
Œª h, (hG.nonpos h).not_lt hŒµ

lemma far_from_triangle_free.clique_finset_nonempty (hG : G.far_from_triangle_free Œµ) (hŒµ : 0 < Œµ) :
  (G.clique_finset 3).nonempty :=
nonempty_of_ne_empty $ G.clique_finset_eq_empty_iff.not.2 $ hG.not_clique_free hŒµ

variables {G H} {tris : finset (finset Œ±)}

private lemma far_from_triangle_free_of_disjoint_triangles_aux (htris : tris ‚äÜ G.clique_finset 3)
  (pd : (tris : set (finset Œ±)).pairwise (Œª x y, (x ‚à© y).card ‚â§ 1)) (hHG : H ‚â§ G)
  (hH : H.clique_free 3) : tris.card ‚â§ G.edge_finset.card - H.edge_finset.card :=
begin
  rw [‚Üêcard_sdiff (edge_finset_mono hHG), ‚Üêcard_attach],
  by_contra' hG,
  have : ‚àÄ t, t ‚àà tris ‚Üí ‚àÉ x y, x ‚àà t ‚àß y ‚àà t ‚àß x ‚â† y ‚àß ‚ü¶(x, y)‚üß ‚àà G.edge_finset \ H.edge_finset,
  { intros t ht,
    by_contra' h,
    refine hH t _,
    simp only [not_and, mem_sdiff, not_not, mem_edge_finset, mem_edge_set] at h,
    obtain ‚ü®x, y, z, xy, xz, yz, rfl‚ü© := is_3_clique_iff.1 (G.mem_clique_finset_iff.1 $ htris ht),
    rw is_3_clique_triple_iff,
    refine ‚ü®h _ _ _ _ xy.ne xy, h _ _ _ _ xz.ne xz, h _ _ _ _ yz.ne yz‚ü©; simp },
  choose fx fy hfx hfy hfne fmem using this,
  let f : {x // x ‚àà tris} ‚Üí sym2 Œ± := Œª t, ‚ü¶(fx _ t.2, fy _ t.2)‚üß,
  have hf : ‚àÄ x, x ‚àà tris.attach ‚Üí f x ‚àà G.edge_finset \ H.edge_finset := Œª x hx, fmem _ _,
  obtain ‚ü®‚ü®t‚ÇÅ, ht‚ÇÅ‚ü©, -, ‚ü®t‚ÇÇ, ht‚ÇÇ‚ü©, -, tne, t : ‚ü¶_‚üß = ‚ü¶_‚üß‚ü© :=
    exists_ne_map_eq_of_card_lt_of_maps_to hG hf,
  dsimp at t,
  have i := pd ht‚ÇÅ ht‚ÇÇ (subtype.val_injective.ne tne),
  simp only [finset.card_le_one_iff, mem_inter, and_imp] at i,
  rw sym2.eq_iff at t,
  cases t,
  { exact hfne _ _ (i (hfx t‚ÇÅ ht‚ÇÅ) (t.1.symm ‚ñ∏ hfx t‚ÇÇ ht‚ÇÇ) (hfy t‚ÇÅ ht‚ÇÅ) $ t.2.symm ‚ñ∏ hfy t‚ÇÇ ht‚ÇÇ) },
  { exact hfne _ _ (i (hfx t‚ÇÅ ht‚ÇÅ) (t.1.symm ‚ñ∏ hfy t‚ÇÇ ht‚ÇÇ) (hfy t‚ÇÅ ht‚ÇÅ) $ t.2.symm ‚ñ∏ hfx t‚ÇÇ ht‚ÇÇ) }
end

/-- If there are `Œµ * (card Œ±)^2` disjoint triangles, then the graph is `Œµ`-far from being
triangle-free. -/
lemma far_from_triangle_free_of_disjoint_triangles (tris : finset (finset Œ±))
  (htris : tris ‚äÜ G.clique_finset 3)
  (pd : (tris : set (finset Œ±)).pairwise (Œª x y, (x ‚à© y).card ‚â§ 1))
  (tris_big : Œµ * (card Œ± ^ 2 : ‚Ñï) ‚â§ tris.card) :
  G.far_from_triangle_free Œµ :=
begin
  refine far_from_triangle_free_iff.2 (Œª H hG hH, _),
  rw ‚Üênat.cast_sub (card_le_of_subset $ edge_finset_mono hG),
  exact tris_big.trans
    (nat.cast_le.2 $ far_from_triangle_free_of_disjoint_triangles_aux htris pd hG hH),
end

end simple_graph
