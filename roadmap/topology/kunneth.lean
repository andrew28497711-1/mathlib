import algebraic_topology.alternating_face_map_complex
import algebraic_topology.simplicial_set
import algebra.category.Module.abelian
import algebra.category.Module.adjunctions
import algebra.category.Module.biproducts
import algebra.category.Module.monoidal.basic
import algebra.category.Module.projective
import category_theory.abelian.projective
import algebra.homology.homology
import linear_algebra.projective_space.basic
import category_theory.monoidal.braided
import category_theory.monoidal.Tor
import category_theory.monoidal.functor_category
import algebra.homology.short_exact.abelian

open category_theory
open algebraic_topology

universe u

noncomputable theory

def Top.to_sModule (R : Type) [ring R] : Top.{0} ‚•§ simplicial_object (Module R) :=
Top.to_sSet ‚ãô
  ((simplicial_object.whiskering _ _).obj (Module.free R))

def singular_chains (R : Type) [ring R] : Top.{0} ‚•§ chain_complex (Module R) ‚Ñï :=
Top.to_sModule R ‚ãô alternating_face_map_complex _

def singular_homology (n : ‚Ñï) (R : Type) [ring R] : Top.{0} ‚•§ Module R :=
singular_chains R ‚ãô homology_functor _ _ n

abbreviation H := (Œª n, singular_homology n ‚Ñ§)

-- TODO this needs the correct instances!
instance (K V : Type*) [division_ring K] [add_comm_group V] [module K V] :
  topological_space (‚Ñô K V) :=
sorry

def ‚Ñù‚Ñô2 : Top.{0} := Top.of (‚Ñô ‚Ñù (fin 2 ‚Üí ‚Ñù))

namespace ‚Ñù‚Ñô2

def H0 : (H 0).obj ‚Ñù‚Ñô2 ‚âÖ Module.of _ ‚Ñ§ := sorry
def H1 : (H 1).obj ‚Ñù‚Ñô2 ‚âÖ Module.of _ (zmod 2) := sorry
def Hn (n : ‚Ñï) (h : 2 ‚â§ n) : (H n).obj ‚Ñù‚Ñô2 ‚âÖ Module.of _ unit := sorry

end ‚Ñù‚Ñô2

instance : monoidal_category Top.{u} :=
{ tensor_unit := Top.of punit.{u+1},
  tensor_obj := Œª X Y, Top.of (X √ó Y),
  tensor_hom := Œª W X Y Z f g, continuous_map.prod_map f g,
  associator := sorry,
  left_unitor := sorry,
  right_unitor := sorry, }

-- This should probably instead be by something like:
-- monoidal_of_chosen_finite_products (Top.terminal_limit_cone) (Top.binary_product_limit_cone)

instance : symmetric_category Top := sorry

-- namespace ‚Ñù‚Ñô2x‚Ñù‚Ñô2

-- def H0 : (H 0).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ ‚Ñ§ := sorry
-- def H1 : (H 1).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2 √ó zmod 2) := sorry
-- def H2 : (H 1).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2) := sorry
-- def H3 : (H 1).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2) := sorry
-- def Hn (n : ‚Ñï) (h : 4 ‚â§ n) : (H n).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ unit := sorry

-- end ‚Ñù‚Ñô2x‚Ñù‚Ñô2

open category_theory.limits

def kunneth_mono (k : ‚Ñï) (X Y : Top.{0}) :
  biproduct (Œª p : finset.nat.antidiagonal k, (H p.1.1).obj X ‚äó (H p.1.2).obj Y)
   ‚ü∂ (H k).obj (X ‚äó Y) := sorry

instance : has_projective_resolutions (Module ‚Ñ§) := sorry

def kunneth_epi (k : ‚Ñï) (X Y : Top.{0}) :
  (H k).obj (X ‚äó Y) ‚ü∂
    biproduct (Œª p : finset.nat.antidiagonal (k - 1), ((Tor _ 1).obj ((H p.1.1).obj X)).obj ((H p.1.2).obj Y)) := sorry

theorem kunneth (k : ‚Ñï) (X Y : Top.{0}) : short_exact (kunneth_mono k X Y) (kunneth_epi k X Y) := sorry

namespace category_theory.short_exact

variables {ùíú : Type*} [category ùíú]

variables {A B C : ùíú} {f : A ‚ü∂ B} {g : B ‚ü∂ C}
variables [has_zero_morphisms ùíú] [has_kernels ùíú] [has_images ùíú]

def is_iso_left_of_is_zero_right (w : short_exact f g) (h : is_zero C) : is_iso f := sorry
def is_iso_right_of_is_zero_left (w : short_exact f g) (h : is_zero A) : is_iso g := sorry

end category_theory.short_exact

namespace ‚Ñù‚Ñô2x‚Ñù‚Ñô2

def H0 : (H 0).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ ‚Ñ§ :=
begin
  haveI := (kunneth 0 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2).is_iso_left_of_is_zero_right _,
  refine (as_iso (kunneth_mono 0 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2)).symm ‚â™‚â´ _,
  -- The sum over `antidiagonal 0` gives just `(H 0).obj ‚Ñù‚Ñô2 ‚äó (H 0).obj ‚Ñù‚Ñô2 ‚âÖ ‚Ñ§ ‚äó ‚Ñ§ ‚âÖ ‚Ñ§`
  sorry,
  -- All the `Tor`s vanish.
  sorry
end

def H3 : (H 3).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2) :=
begin
  haveI := (kunneth 3 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2).is_iso_right_of_is_zero_left _,
  refine (as_iso (kunneth_epi 3 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2)) ‚â™‚â´ _,
  -- The sum over `antidiagonal 2` gives
  -- `Tor ‚Ñ§ (zmod 2) ‚äï Tor (zmod 2) (zmod 2) ‚äï Tor (zmod 2) ‚Ñ§`.`
  -- The first and last terms are zero, the middle terms gives what we want.
  sorry,
  -- There are no interesting homology groups in degrees adding up to 3.
  sorry
end

end ‚Ñù‚Ñô2x‚Ñù‚Ñô2

/-
The Kunneth formula we wrote above factors into three separate idea:
* `Top.to_sModule : Top ‚•§ simplicial_object (Module R)` is a monoidal functor
*
* The homological algebra Kunneth formula.
-/

instance (C : Type _) [category C] [monoidal_category C] : monoidal_category (simplicial_object C) :=
begin
  dsimp [simplicial_object],
  apply_instance,
end

instance : monoidal_category sSet :=
begin
  dsimp [sSet],
  apply_instance
end

def Top.to_sSet_monoidal : monoidal_functor Top.{0} sSet :=
{ Œµ :=
  { app := Œª n x, by split, },
  Œº := Œª X Y,
  { app := Œª n x, continuous_map.prod_mk x.1 x.2 },
  Œº_natural' := sorry,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry,
  Œµ_is_iso := sorry,
  Œº_is_iso := sorry,
  ..Top.to_sSet, }

def simplicial_object.whiskering_monoidal
  (C : Type u) [category C] [monoidal_category C] (D : Type u) [category D] [monoidal_category D] :
  (monoidal_functor C D) ‚•§ monoidal_functor (simplicial_object C) (simplicial_object D) :=
sorry

def Top.to_sModule_monoidal (R : Type) [comm_ring R] :
  monoidal_functor Top.{0} (simplicial_object (Module.{0} R)) :=
Top.to_sSet_monoidal ‚äó‚ãô
  ((simplicial_object.whiskering_monoidal _ _).obj (Module.monoidal_free R))

section
variables {V : Type*} [category V] [monoidal_category V]
  [has_zero_morphisms V] [has_finite_biproducts V]

instance : monoidal_category (graded_object ‚Ñï V) :=
{ tensor_unit := sorry,
  tensor_obj := Œª X Y k, biproduct (Œª p : finset.nat.antidiagonal k, X p.1.1 ‚äó Y p.1.2),
  tensor_hom := sorry,
  associator := sorry,
  left_unitor := sorry,
  right_unitor := sorry, }

@[simp] lemma graded_object.tensor_obj_apply (X Y : graded_object ‚Ñï V) (k : ‚Ñï) :
  (X ‚äó Y) k = biproduct (Œª p : finset.nat.antidiagonal k, X p.1.1 ‚äó Y p.1.2) :=
rfl

instance : monoidal_category (chain_complex V ‚Ñï) :=
sorry

variables [has_equalizers V] [has_images V] [has_image_maps V] [has_cokernels V]

def graded_homology_lax_monoidal_functor : lax_monoidal_functor (chain_complex V ‚Ñï) (graded_object ‚Ñï V) :=
{ Œµ := sorry,
  Œº := Œª X Y n, begin
    dsimp,
    -- We need `(‚®Å Œª p : finset.nat.antidiagonal n, homology X p.1.1 ‚äó homology Y p.1.2)
    --   ‚ü∂ homology (X ‚äó Y) n`
    sorry,
  end,
  ..graded_homology_functor V _ }

theorem graded_homology_tensorator_mono (X Y : chain_complex V ‚Ñï) :
  mono (graded_homology_lax_monoidal_functor.Œº X Y) := sorry

end

section
variables {R : Type} [comm_ring R] [is_domain R] [is_principal_ideal_ring R]

-- Verifying we have everything we need to do homology.
example : has_equalizers (Module.{0} R) := by apply_instance
example : has_images (Module.{0} R) := by apply_instance
example : has_image_maps (Module.{0} R) := by apply_instance
example : has_zero_morphisms (Module.{0} R) := by apply_instance
example : has_cokernels (Module.{0} R) := by apply_instance

-- Verify we have everything we need to do tensor products of chain complexes.
example : monoidal_category (Module.{0} R) := by apply_instance
example : has_finite_biproducts (Module.{0} R) := by apply_instance

-- Verify we have everything we need to do `Tor`.
example : abelian (Module.{0} R) := by apply_instance
example : enough_projectives (Module.{0} R) := by apply_instance
example : has_projective_resolutions (Module.{0} R) := by apply_instance

abbreviation H' (n : ‚Ñï) (X : chain_complex (Module.{0} R) ‚Ñï) : Module.{0} R :=
  (homology_functor (Module.{0} R) _ n).obj X

def cokernel_iso (k : ‚Ñï) (X Y : chain_complex (Module.{0} R) ‚Ñï) :
  cokernel (graded_homology_lax_monoidal_functor.Œº X Y k) ‚âÖ
    biproduct (Œª p : finset.nat.antidiagonal (k - 1), ((Tor _ 1).obj (H' p.1.1 X)).obj (H' p.1.2 Y)) :=
-- This is the hardest sorry so far today.
-- In fact, it's not even true without the assumption that at least one of `X` and `Y`
-- is a complex of free modules, but we'll cheat and ignore that right now.
sorry

namespace category_theory.short_exact

variables {ùíú : Type*} [category ùíú] [abelian ùíú]

variables {A B C : ùíú} {f : A ‚ü∂ B} {g : B ‚ü∂ C}

example : category_theory.epi (cokernel.œÄ f) := by apply_instance

instance (w : f ‚â´ cokernel.œÄ f = 0) :
  is_iso (image_to_kernel f (cokernel.œÄ f) w) :=
begin
  use (kernel_subobject_iso (cokernel.œÄ f)).hom ‚â´ (abelian.image_iso_image f).hom ‚â´ (image_subobject_iso f).inv,
  split,
  { ext, simp, },
  { ext, simp, }
end

theorem of_mono_cokernel [category_theory.mono f] [has_cokernel f] :
  short_exact f (cokernel.œÄ f) :=
{ exact :=
  { epi := by apply_instance,
    w := by simp, },}

theorem comp_iso_left {A' : ùíú} (i : A' ‚ü∂ A) [is_iso i] (w : short_exact f g) :
  short_exact (i ‚â´ f) g := sorry
theorem comp_iso_middle {B' : ùíú} (i : B ‚ü∂ B') [is_iso i] (w : short_exact f g) :
  short_exact (f ‚â´ i) (inv i ‚â´ g) := sorry
theorem comp_iso_middle' {B' : ùíú} (i : B' ‚ü∂ B) [is_iso i] (w : short_exact f g) :
  short_exact (f ‚â´ inv i) (i ‚â´ g) := by simpa using w.comp_iso_middle (inv i)
theorem comp_iso_right {C' : ùíú} (i : C ‚ü∂ C') [is_iso i] (w : short_exact f g) :
  short_exact f (g ‚â´ i) := sorry

theorem of_mono_cokernel_iso [category_theory.mono f] [has_cokernel f] (i : cokernel f ‚âÖ C) :
  short_exact f (cokernel.œÄ f ‚â´ i.hom) := of_mono_cokernel.comp_iso_right _

theorem of_epi_kernel_iso [category_theory.epi g] [has_kernel g] (i : kernel g ‚âÖ A) :
  short_exact (i.inv ‚â´ kernel.Œπ g) g :=
-- TODO dualize the above.
sorry

end category_theory.short_exact


theorem kunneth' (k : ‚Ñï) (X Y : chain_complex (Module.{0} R) ‚Ñï) :
  short_exact (graded_homology_lax_monoidal_functor.Œº X Y k)
    (cokernel.œÄ (graded_homology_lax_monoidal_functor.Œº X Y k) ‚â´ (cokernel_iso k X Y).hom) :=
sorry

end
