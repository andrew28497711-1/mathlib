import algebraic_topology.alternating_face_map_complex
import algebraic_topology.simplicial_set
import algebra.category.Module.abelian
import algebra.category.Module.adjunctions
import algebra.category.Module.biproducts
import algebra.category.Module.monoidal.basic
import algebra.category.Module.projective
import category_theory.abelian.projective
import algebra.homology.homology
import linear_algebra.projective_space.basic
import category_theory.monoidal.braided
import category_theory.monoidal.Tor
import category_theory.monoidal.functor_category
import algebra.homology.short_exact.abelian

open category_theory
open algebraic_topology

universe u

noncomputable theory

/-
Our starting point is `Top.to_sSet`, which turns a topological space into a simplicial set.

def Top.to_sSet : Top ‚•§ sSet :=
colimit_adj.restricted_yoneda simplex_category.to_Top
-/

/--
Turn a topological space into a simplicial R-module, by composing the simplicial set with
the free R-module functor.
-/
def Top.to_sModule (R : Type) [ring R] : Top.{0} ‚•§ simplicial_object (Module R) :=
Top.to_sSet ‚ãô
  ((simplicial_object.whiskering _ _).obj (Module.free R))

/-- Compute the singular chain complex of a topological space,
by using the "alternating face map" functor. -/
def singular_chains (R : Type) [ring R] : Top.{0} ‚•§ chain_complex (Module R) ‚Ñï :=
Top.to_sModule R ‚ãô alternating_face_map_complex _

/-- Compute the `n`-th singular homology of a topological space,
by applying the homology functor to the singular chain complex for the space. -/
-- def singular_homology (n : ‚Ñï) (R : Type) [ring R] : Top.{0} ‚•§ Module R :=
-- singular_chains R ‚ãô homology_functor _ _ n

def singular_homology (n : ‚Ñï) (R : Type) [ring R] : Top.{0} ‚•§ Module R :=
(singular_chains R ‚ãô homotopy_category.quotient _ _) ‚ãô homotopy_category.homology_functor _ _ n

abbreviation H := (Œª n, singular_homology n ‚Ñ§)

/-!
# Let's think about computing examples!
-/

-- TODO this needs the correct instances!
instance (K V : Type*) [division_ring K] [add_comm_group V] [module K V] :
  topological_space (‚Ñô K V) :=
sorry

def ‚Ñù‚Ñô2 : Top.{0} := Top.of (‚Ñô ‚Ñù (fin 2 ‚Üí ‚Ñù))

namespace ‚Ñù‚Ñô2

def H0 : (H 0).obj ‚Ñù‚Ñô2 ‚âÖ Module.of _ ‚Ñ§ := sorry
def H1 : (H 1).obj ‚Ñù‚Ñô2 ‚âÖ Module.of _ (zmod 2) := sorry
def Hn (n : ‚Ñï) (h : 2 ‚â§ n) : (H n).obj ‚Ñù‚Ñô2 ‚âÖ Module.of _ unit := sorry

end ‚Ñù‚Ñô2

instance : monoidal_category Top.{u} :=
{ tensor_unit := Top.of punit.{u+1},
  tensor_obj := Œª X Y, Top.of (X √ó Y),
  tensor_hom := Œª W X Y Z f g, continuous_map.prod_map f g,
  associator := sorry,
  left_unitor := sorry,
  right_unitor := sorry, }

-- This should probably instead be by something like:
-- monoidal_of_chosen_finite_products (Top.terminal_limit_cone) (Top.binary_product_limit_cone)

instance : symmetric_category Top := sorry

-- namespace ‚Ñù‚Ñô2x‚Ñù‚Ñô2

-- def H0 : (H 0).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ ‚Ñ§ := sorry
-- def H1 : (H 1).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2 √ó zmod 2) := sorry
-- def H2 : (H 1).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2) := sorry
-- def H3 : (H 1).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2) := sorry
-- def Hn (n : ‚Ñï) (h : 4 ‚â§ n) : (H n).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ unit := sorry

-- end ‚Ñù‚Ñô2x‚Ñù‚Ñô2

open category_theory.limits

-- Let's fake the Kunneth formula:

def kunneth_mono (k : ‚Ñï) (X Y : Top.{0}) :
  biproduct (Œª p : finset.nat.antidiagonal k, (H p.1.1).obj X ‚äó (H p.1.2).obj Y)
   ‚ü∂ (H k).obj (X ‚äó Y) := sorry

def finset.nat.antidiagonal_prev (k : ‚Ñï) : finset (‚Ñï √ó ‚Ñï) :=
if k = 0 then
  ‚àÖ
else
  finset.nat.antidiagonal (k - 1)

def kunneth_epi (k : ‚Ñï) (X Y : Top.{0}) :
  (H k).obj (X ‚äó Y) ‚ü∂
    biproduct (Œª p : finset.nat.antidiagonal_prev k, ((Tor _ 1).obj ((H p.1.1).obj X)).obj ((H p.1.2).obj Y)) := sorry

theorem kunneth (k : ‚Ñï) (X Y : Top.{0}) : short_exact (kunneth_mono k X Y) (kunneth_epi k X Y) := sorry

-- Some missing API about short exact sequences.
namespace category_theory.short_exact

variables {ùíú : Type*} [category ùíú]

variables {A B C : ùíú} {f : A ‚ü∂ B} {g : B ‚ü∂ C}
variables [has_zero_morphisms ùíú] [has_kernels ùíú] [has_images ùíú]

theorem is_iso_left_of_is_zero_right (w : short_exact f g) (h : is_zero C) : is_iso f := sorry
theorem is_iso_right_of_is_zero_left (w : short_exact f g) (h : is_zero A) : is_iso g := sorry

-- These may actually need stronger hypotheses to prove!
-- Certainly they are true in an abelian category.

end category_theory.short_exact

section
variables {C : Type _} [category C] [has_zero_morphisms C] [has_finite_biproducts C]
  [has_binary_biproducts C]

def biproduct_nat_antidiagonal_0 (f : ‚Ñï ‚Üí ‚Ñï ‚Üí C) :
  biproduct (Œª p : finset.nat.antidiagonal 0, f p.1.1 p.1.2) ‚âÖ f 0 0 :=
sorry

def biproduct_nat_antidiagonal_1 (f : ‚Ñï ‚Üí ‚Ñï ‚Üí C) :
  biproduct (Œª p : finset.nat.antidiagonal 1, f p.1.1 p.1.2) ‚âÖ f 0 1 ‚äû f 1 0 :=
sorry

def biproduct_nat_antidiagonal_2 (f : ‚Ñï ‚Üí ‚Ñï ‚Üí C) :
  biproduct (Œª p : finset.nat.antidiagonal 2, f p.1.1 p.1.2) ‚âÖ f 0 2 ‚äû f 1 1 ‚äû f 2 0 :=
sorry

def biproduct_nat_antidiagonal_3 (f : ‚Ñï ‚Üí ‚Ñï ‚Üí C) :
  biproduct (Œª p : finset.nat.antidiagonal 3, f p.1.1 p.1.2) ‚âÖ f 0 3 ‚äû f 1 2 ‚äû f 2 1 ‚äû f 3 0 :=
sorry

def is_zero_biproduct_nat_antidiagonal_prev_0 (f : ‚Ñï ‚Üí ‚Ñï ‚Üí C) :
  is_zero (biproduct (Œª p : finset.nat.antidiagonal_prev 0, f p.1.1 p.1.2)) :=
sorry

def biproduct_nat_antidiagonal_prev_3 (f : ‚Ñï ‚Üí ‚Ñï ‚Üí C) :
  biproduct (Œª p : finset.nat.antidiagonal_prev 3, f p.1.1 p.1.2) ‚âÖ f 0 2 ‚äû f 1 1 ‚äû f 2 0 :=
sorry

end

namespace ‚Ñù‚Ñô2x‚Ñù‚Ñô2

def H0 : (H 0).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ ‚Ñ§ :=
begin
  haveI := (kunneth 0 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2).is_iso_left_of_is_zero_right _,
  refine (as_iso (kunneth_mono 0 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2)).symm ‚â™‚â´ _,
  { -- The sum over `antidiagonal 0` gives just `(H 0).obj ‚Ñù‚Ñô2 ‚äó (H 0).obj ‚Ñù‚Ñô2 ‚âÖ ‚Ñ§ ‚äó ‚Ñ§ ‚âÖ ‚Ñ§`
    refine (biproduct_nat_antidiagonal_0 (Œª i j, (H i).obj ‚Ñù‚Ñô2 ‚äó (H j).obj ‚Ñù‚Ñô2)) ‚â™‚â´ _,
    refine (‚Ñù‚Ñô2.H0 ‚äó ‚Ñù‚Ñô2.H0) ‚â™‚â´ _,
    exact Œª_ (Module.of ‚Ñ§ ‚Ñ§), },
  { -- There are no `Tor`s.
    exact is_zero_biproduct_nat_antidiagonal_prev_0
      (Œª i j, ((Tor _ 1).obj ((H i).obj ‚Ñù‚Ñô2)).obj ((H j).obj ‚Ñù‚Ñô2)), },
end

def H3 : (H 3).obj (‚Ñù‚Ñô2 ‚äó ‚Ñù‚Ñô2) ‚âÖ Module.of _ (zmod 2) :=
begin
  haveI := (kunneth 3 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2).is_iso_right_of_is_zero_left _,
  refine (as_iso (kunneth_epi 3 ‚Ñù‚Ñô2 ‚Ñù‚Ñô2)) ‚â™‚â´ _,
  { -- The sum over `antidiagonal_prev 3` gives
    -- `Tor ‚Ñ§ (zmod 2) ‚äï Tor (zmod 2) (zmod 2) ‚äï Tor (zmod 2) ‚Ñ§`.`
    refine (biproduct_nat_antidiagonal_prev_3
      (Œª i j, ((Tor _ 1).obj ((H i).obj ‚Ñù‚Ñô2)).obj ((H j).obj ‚Ñù‚Ñô2))) ‚â™‚â´ _,
    -- The first and last terms are zero, the middle terms gives what we want.
    dsimp,
    sorry, },
  -- There are no interesting homology groups in degrees adding up to 3.
  sorry
end

end ‚Ñù‚Ñô2x‚Ñù‚Ñô2

/-!
# The plan

The Kunneth formula we wrote above factors into three separate ideas:
1. `Top.to_sModule : Top ‚•§ simplicial_object (Module R)` is a monoidal functor
2. `alternating_face_map_complex : simplicial_object C ‚•§ chain_complex C ‚Ñï` is both
  * a lax monoidal functor (via the Eilenberg-Zilber map)
  * an oplax monoidal functor (via the Alexander-Whitney map)
  * and the composition
    `alternating_face_map_complex ‚ãô homotopy_category.quotient :
      simplicial_object C ‚•§ homotopy_category C ‚Ñï`
    is a (strong) monoidal functor.
3. The homological algebra Kunneth formula:
  * `graded_homology_functor : chain_complex C ‚Ñï ‚•§ graded_object ‚Ñï C`
    is a lax monoidal functor,
  * the "laxitor" `H X ‚äó H Y ‚ü∂ H (X ‚äó Y)` is a monomorphism,
  * we can explicitly identify the cokernel of the laxitor as a sum of `Tor` groups.
-/

/-!
# Step 1, `Top.to_sModule` is a monoidal functor.
-/

instance (C : Type _) [category C] [monoidal_category C] : monoidal_category (simplicial_object C) :=
begin
  dsimp [simplicial_object],
  apply_instance,
end

instance : monoidal_category sSet :=
begin
  dsimp [sSet],
  apply_instance
end

def Top.to_sSet_monoidal : monoidal_functor Top.{0} sSet :=
{ Œµ :=
  { app := Œª n x, by split, },
  Œº := Œª X Y,
  { app := Œª n x, continuous_map.prod_mk x.1 x.2 },
  Œº_natural' := sorry,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry,
  Œµ_is_iso := sorry,
  Œº_is_iso := sorry,
  ..Top.to_sSet, }

def simplicial_object.whiskering_monoidal
  (C : Type u) [category C] [monoidal_category C] (D : Type u) [category D] [monoidal_category D] :
  (monoidal_functor C D) ‚•§ monoidal_functor (simplicial_object C) (simplicial_object D) :=
{ obj := Œª F,
  { Œµ := sorry,
    Œº := sorry,
    Œµ_is_iso := sorry,
    Œº_is_iso := sorry,
    ..(simplicial_object.whiskering C D).obj F.to_functor },
  map := sorry, }

def Top.to_sModule_monoidal (R : Type) [comm_ring R] :
  monoidal_functor Top.{0} (simplicial_object (Module.{0} R)) :=
Top.to_sSet_monoidal ‚äó‚ãô
  ((simplicial_object.whiskering_monoidal _ _).obj (Module.monoidal_free R))

/-!
# Step 3, the homological Kunneth formula. -/

section
variables {V : Type*} [category V] [monoidal_category V]
  [has_zero_object V] [has_zero_morphisms V] [has_finite_biproducts V]

open_locale zero_object

instance : monoidal_category (graded_object ‚Ñï V) :=
{ tensor_unit := pi.single 0 (ùüô_ V),
  tensor_obj := Œª X Y k, biproduct (Œª p : finset.nat.antidiagonal k, X p.1.1 ‚äó Y p.1.2),
  tensor_hom := Œª W X Y Z f g k, biproduct.map sorry,
  associator := sorry,
  left_unitor := sorry,
  right_unitor := sorry, }

@[simp] lemma graded_object.tensor_obj_apply (X Y : graded_object ‚Ñï V) (k : ‚Ñï) :
  (X ‚äó Y) k = biproduct (Œª p : finset.nat.antidiagonal k, X p.1.1 ‚äó Y p.1.2) :=
rfl

end

section
variables {V : Type*} [category V] [preadditive V] [monoidal_category V]
  [has_finite_biproducts V]

/-- The morphism between a pair of objects in a family,
which is either the identity if the two objects are the same,
or zero otherwise.
 -/
def id_or_zero {Œ≤ : Type*} [decidable_eq Œ≤] (X : Œ≤ ‚Üí V) (i j : Œ≤) : X i ‚ü∂ X j :=
if h : i = j then
  eq_to_hom (congr_arg X h)
else
  0

def tensor_obj_X (X Y : chain_complex V ‚Ñï) (k : ‚Ñï) : V :=
biproduct (Œª p : finset.nat.antidiagonal k, X.X p.1.1 ‚äó Y.X p.1.2)

def tensor_obj_d (X Y : chain_complex V ‚Ñï) (i j : ‚Ñï) : tensor_obj_X X Y i ‚ü∂ tensor_obj_X X Y j :=
biproduct.matrix
  (Œª p q, X.d p.1.1 q.1.1 ‚äó id_or_zero Y.X p.1.2 q.1.2 +
    ((-1 : ‚Ñ§)^p.1.1) ‚Ä¢ (id_or_zero X.X p.1.1 q.1.1 ‚äó Y.d p.1.2 q.1.2))

def tensor_obj (X Y : chain_complex V ‚Ñï) : chain_complex V ‚Ñï  :=
{ X := tensor_obj_X X Y,
  d := tensor_obj_d X Y,
  shape' := sorry,
  d_comp_d' := sorry, }

def tensor_hom {W X Y Z : chain_complex V ‚Ñï} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) :
  tensor_obj W Y ‚ü∂ tensor_obj X Z  :=
{ f := Œª i, biproduct.map (Œª p, f.f p.1.1 ‚äó g.f p.1.2),
  comm' := sorry, }

instance : monoidal_category (chain_complex V ‚Ñï) :=
{ tensor_unit := (chain_complex.single‚ÇÄ V).obj (ùüô_ V),
  tensor_obj := tensor_obj,
  tensor_hom := Œª W X Y Z f g, tensor_hom f g,
  associator := sorry,
  left_unitor := sorry,
  right_unitor := sorry,
  tensor_id' := sorry,
  tensor_comp' := sorry, }

-- TODO this should be done generally:
-- a quotient of a monoidal category by a monoidal congruence is monoidal.
instance : monoidal_category (homotopy_category V (complex_shape.down ‚Ñï)) :=
{ tensor_unit := sorry,
  tensor_obj := Œª X Y, { as := X.as ‚äó Y.as },
  tensor_hom := sorry,
  associator := sorry,
  left_unitor := sorry,
  right_unitor := sorry, }

variables [has_equalizers V] [has_images V] [has_image_maps V] [has_cokernels V]
variables (V)

def graded_homology_lax : lax_monoidal_functor (chain_complex V ‚Ñï) (graded_object ‚Ñï V) :=
{ Œµ := sorry,
  Œº := Œª X Y n, biproduct.desc (Œª p, begin
    dsimp,
    -- We need `homology X p.1.1 ‚äó homology Y p.1.2 ‚ü∂ homology (X ‚äó Y) n` for `p.1.1 + p.1.2 = n`.
    -- We actually can't do this without further hypotheses!
    -- I'm not too sure what generality is best. Certainly we can do it for modules.
    -- `V` is abelian and `‚äó` is biexact suffices, I think.
    -- Similarly just `V` rigid monoidal?
    -- Let's punt for now!
    sorry,
  end),
  Œº_natural' := sorry,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry,
  ..graded_homology_functor V _ }

-- Aside: using this functor, we can push forward
-- a differential graded algebra (i.e. a `Mon_ (chain_complex V ‚Ñï)`)
-- to an graded (associative) algebra (i.e. a `Mon_ (graded_object ‚Ñï V))`)
-- using `lax_monoidal_functor.map_Mon`.
-- (Similarly for commutative algebras, although we do not yet have
-- `lax_braided_functor.map_CommMon`.)
-- To count as a solution to Reid's CDGA challenge
-- https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/CDGAs
-- you still need to show that `Mon_ (chain_complex (Module R) ‚Ñï)` really "is" a CDGA.

instance graded_homology_tensorator_mono (X Y : chain_complex V ‚Ñï) :
  mono ((graded_homology_lax V).Œº X Y) := sorry

instance graded_object.mono_apply
  {X Y : graded_object ‚Ñï V} (f : X ‚ü∂ Y) [mono f] (k : ‚Ñï) : mono (f k) :=
sorry

-- instance graded_object.epi_apply
--   {X Y : graded_object ‚Ñï V} (f : X ‚ü∂ Y) [epi f] (k : ‚Ñï) : epi (f k) :=
-- sorry

instance graded_object.is_iso_apply
  {X Y : graded_object ‚Ñï V} (f : X ‚ü∂ Y) [is_iso f] (k : ‚Ñï) : is_iso (f k) :=
sorry

namespace homotopy_category

def graded_homology_functor {Œ± : Type*} (c : complex_shape Œ±) :
  (homotopy_category V c) ‚•§ (graded_object Œ± V) :=
category_theory.quotient.lift _ (graded_homology_functor V c)
  (Œª C D f g ‚ü®h‚ü©, funext (homology_map_eq_of_homotopy h))

def graded_homology_factors {Œ± : Type*} (c : complex_shape Œ±) :
  quotient V c ‚ãô graded_homology_functor V c ‚âÖ _root_.graded_homology_functor V c :=
category_theory.quotient.lift.is_lift _ _ _

-- TODO this really should be constructed using a monoidal version of
-- `category_theory.quotient.lift`
def graded_homology_lax :
  lax_monoidal_functor (homotopy_category V (complex_shape.down ‚Ñï)) (graded_object ‚Ñï V) :=
{ Œµ := sorry,
  Œº := Œª X Y, (_root_.graded_homology_lax V).Œº X.as Y.as,
  Œº_natural' := sorry,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry,
  ..graded_homology_functor V _ }

@[simp] lemma graded_homology_lax_Œº (X Y : chain_complex V ‚Ñï) :
  (graded_homology_lax V).Œº ((quotient _ _).obj X) ((quotient _ _).obj Y) =
    (_root_.graded_homology_lax V).Œº X Y :=
rfl -- Really faking it here, as there's still a sorry inside.

instance graded_homology_tensorator_mono
  (X Y : homotopy_category V (complex_shape.down ‚Ñï)) :
  mono ((graded_homology_lax V).Œº X Y) := sorry

end homotopy_category

end

section
variables {R : Type} [comm_ring R] [is_domain R] [is_principal_ideal_ring R]

-- Verifying we have everything we need to do homology.
example : has_equalizers (Module.{0} R) := by apply_instance
example : has_images (Module.{0} R) := by apply_instance
example : has_image_maps (Module.{0} R) := by apply_instance
example : has_zero_morphisms (Module.{0} R) := by apply_instance
example : has_cokernels (Module.{0} R) := by apply_instance

-- Verify we have everything we need to do tensor products of chain complexes.
example : monoidal_category (Module.{0} R) := by apply_instance
example : has_finite_biproducts (Module.{0} R) := by apply_instance
example : preadditive (Module.{0} R) := by apply_instance

-- Verify we have everything we need to do `Tor`.
example : abelian (Module.{0} R) := by apply_instance
example : enough_projectives (Module.{0} R) := by apply_instance
example : has_projective_resolutions (Module.{0} R) := by apply_instance

abbreviation H' (n : ‚Ñï) (X : chain_complex (Module.{0} R) ‚Ñï) : Module.{0} R :=
  (homology_functor (Module.{0} R) _ n).obj X

def chain_complex.kunneth.cokernel_iso (X Y : chain_complex (Module.{0} R) ‚Ñï)
  (free : ‚àÄ i, module.free R (X.X i)) (k : ‚Ñï) :
  cokernel ((graded_homology_lax _).Œº X Y k) ‚âÖ
    biproduct (Œª p : finset.nat.antidiagonal_prev k, ((Tor _ 1).obj (H' p.1.1 X)).obj (H' p.1.2 Y)) :=
-- This is the hardest sorry so far today.
sorry

abbreviation H'' (n : ‚Ñï) (X : homotopy_category (Module.{0} R) (complex_shape.down ‚Ñï)) : Module.{0} R :=
  (homotopy_category.homology_functor (Module.{0} R) _ n).obj X

-- FIXME why does this time out?

def foo (X Y : homotopy_category (Module.{0} R) (complex_shape.down ‚Ñï)) (k : ‚Ñï) : Module.{0} R :=
(cokernel ((homotopy_category.graded_homology_lax (Module.{0} R)).Œº X Y k))

def bar (X Y : homotopy_category (Module.{0} R) (complex_shape.down ‚Ñï)) (k : ‚Ñï) : Module.{0} R :=
(biproduct (Œª p : finset.nat.antidiagonal_prev k, ((Tor _ 1).obj (H'' p.1.1 X)).obj (H'' p.1.2 Y)))

def homotopy_category.kunneth.cokernel_iso (X Y : homotopy_category (Module.{0} R) (complex_shape.down ‚Ñï))
  (free : ‚àÄ i, module.free R (X.as.X i)) (k : ‚Ñï) :
  (foo X Y k) ‚âÖ (bar X Y k) :=
sorry

-- Some more missing API about short exact sequences.
-- Perhaps some of this generalizes beyond abelian categories?
namespace category_theory.short_exact

variables {ùíú : Type*} [category ùíú] [abelian ùíú]

variables {A B C : ùíú} {f : A ‚ü∂ B} {g : B ‚ü∂ C}

example : category_theory.epi (cokernel.œÄ f) := by apply_instance

instance (w : f ‚â´ cokernel.œÄ f = 0) :
  is_iso (image_to_kernel f (cokernel.œÄ f) w) :=
begin
  use (kernel_subobject_iso (cokernel.œÄ f)).hom ‚â´ (abelian.image_iso_image f).hom ‚â´
    (image_subobject_iso f).inv,
  split,
  { ext, simp, },
  { ext, simp, }
end

theorem of_mono_cokernel [category_theory.mono f] [has_cokernel f] :
  short_exact f (cokernel.œÄ f) :=
{ exact :=
  { epi := by apply_instance,
    w := by simp, },}

theorem comp_iso_left {A' : ùíú} (i : A' ‚ü∂ A) [is_iso i] (w : short_exact f g) :
  short_exact (i ‚â´ f) g :=
sorry
theorem comp_iso_middle {B' : ùíú} {f : A ‚ü∂ B} (i : B ‚ü∂ B') {g : B' ‚ü∂ C} [is_iso i] :
  short_exact (f ‚â´ i) g ‚Üî short_exact f (i ‚â´ g) :=
sorry
theorem comp_iso_right {C' : ùíú} (i : C ‚ü∂ C') [is_iso i] (w : short_exact f g) :
  short_exact f (g ‚â´ i) :=
sorry

theorem of_mono_cokernel_iso [category_theory.mono f] [has_cokernel f] (i : cokernel f ‚âÖ C) :
  short_exact f (cokernel.œÄ f ‚â´ i.hom) := of_mono_cokernel.comp_iso_right _

theorem of_epi_kernel_iso [category_theory.epi g] [has_kernel g] (i : kernel g ‚âÖ A) :
  short_exact (i.inv ‚â´ kernel.Œπ g) g :=
-- TODO dualize the above.
sorry

end category_theory.short_exact

open category_theory.short_exact
open chain_complex.kunneth

theorem chain_complex.kunneth (X Y : chain_complex (Module.{0} R) ‚Ñï)
  (free : ‚àÄ i, module.free R (X.X i)) (k : ‚Ñï) :
  short_exact ((graded_homology_lax _).Œº X Y k)
    (cokernel.œÄ ((graded_homology_lax _).Œº X Y k) ‚â´ (cokernel_iso X Y free k).hom) :=
of_mono_cokernel_iso _

theorem homotopy_category.kunneth (X Y : homotopy_category (Module.{0} R) (complex_shape.down ‚Ñï))
  (free : ‚àÄ i, module.free R (X.as.X i)) (k : ‚Ñï) :
  short_exact ((homotopy_category.graded_homology_lax _).Œº X Y k)
    (cokernel.œÄ ((homotopy_category.graded_homology_lax _).Œº X Y k) ‚â´ (homotopy_category.kunneth.cokernel_iso X Y free k).hom) :=
of_mono_cokernel_iso _


end

/-!
# Step 2, Eilenberg-Zilber
-/
section
variables {V : Type*} [category V] [monoidal_category V] [preadditive V] [has_finite_biproducts V]

abbreviation C (X : simplicial_object V) := (alternating_face_map_complex V).obj X

variables (X Y : simplicial_object V)

def alexander_whitney : C (X ‚äó Y) ‚ü∂ C X ‚äó C Y := sorry
def eilenberg_zilber : C X ‚äó C Y ‚ü∂ C (X ‚äó Y) := sorry

def homotopy_1 : homotopy (eilenberg_zilber X Y ‚â´ alexander_whitney X Y) (ùüô _) := sorry
def homotopy_2 : homotopy (alexander_whitney X Y ‚â´ eilenberg_zilber X Y) (ùüô _) := sorry

instance : is_iso ((homotopy_category.quotient V _).map (eilenberg_zilber X Y)) :=
{ out := ‚ü®(homotopy_category.quotient V _).map (alexander_whitney X Y),
    homotopy_category.eq_of_homotopy _ _ (homotopy_1 X Y),
    homotopy_category.eq_of_homotopy _ _ (homotopy_2 X Y)‚ü© }

variable (V)

def alternating_face_map_complex_monoidal :
  monoidal_functor (simplicial_object V) (homotopy_category V (complex_shape.down ‚Ñï)) :=
{ Œµ := sorry,
  Œº := Œª X Y, (homotopy_category.quotient V _).map (eilenberg_zilber X Y),
  Œº_natural' := sorry,
  associativity' := sorry,
  left_unitality' := sorry,
  right_unitality' := sorry,
  Œµ_is_iso := sorry,
  Œº_is_iso := Œª X Y, by apply_instance,
  ..(alternating_face_map_complex V ‚ãô homotopy_category.quotient V _) }

end

/-!
# Putting it all together!

We now give a proof of the Kunneth formula for topological spaces
in terms of the Kunneth formula for complexes, Eilenberg-Zilber
-/

def singular_chains_monoidal (R : Type) [comm_ring R] :
  monoidal_functor Top.{0} (homotopy_category (Module.{0} R) (complex_shape.down ‚Ñï)) :=
Top.to_sModule_monoidal R ‚äó‚ãô alternating_face_map_complex_monoidal _

def singular_homology_lax (R : Type) [comm_ring R] :
  lax_monoidal_functor Top.{0} (graded_object ‚Ñï (Module.{0} R)) :=
(singular_chains_monoidal R).to_lax_monoidal_functor.comp
  (homotopy_category.graded_homology_lax (Module R))

example (X : Top.{0}) (k : ‚Ñï) :
  (singular_homology_lax ‚Ñ§).obj X k = (singular_homology k ‚Ñ§).obj X :=
rfl
-- This might not look like much, but it's a good sign.
-- It says that we've set up the lax monoidal version of singular homology
-- so that it is definitionally equal to the usual version.

theorem singular_chains_free (X : Top.{0}) (i : ‚Ñï) :
  module.free ‚Ñ§ (((singular_chains ‚Ñ§).obj X).X i) :=
begin
  dsimp [singular_chains, Top.to_sModule],
  apply_instance,
end

def kunneth_mono' (k : ‚Ñï) (X Y : Top.{0}) :
  biproduct (Œª p : finset.nat.antidiagonal k, (H p.1.1).obj X ‚äó (H p.1.2).obj Y)
   ‚ü∂ (H k).obj (X ‚äó Y) :=
(singular_homology_lax ‚Ñ§).Œº X Y k

theorem kunneth' (k : ‚Ñï) (X Y : Top.{0}) :
  ‚àÉ (g : (H k).obj (X ‚äó Y) ‚ü∂
    biproduct (Œª p : finset.nat.antidiagonal_prev k,
      ((Tor _ 1).obj ((H p.1.1).obj X)).obj ((H p.1.2).obj Y))),
  short_exact (kunneth_mono' k X Y) g :=
begin
  dsimp only [kunneth_mono', singular_homology_lax],
  dsimp only [lax_monoidal_functor.comp_Œº],
  split,
  { -- This postpones the choice of `g` as a second goal;
    -- it will later be solved by unification.
    { apply (category_theory.short_exact.comp_iso_middle _).mpr,
      swap, apply_instance,
      dsimp [singular_chains_monoidal, alternating_face_map_complex_monoidal],
      convert chain_complex.kunneth ((singular_chains ‚Ñ§).obj X) ((singular_chains ‚Ñ§).obj Y) _ k
        using 1,
      { apply (is_iso.eq_inv_comp _).mp,
        { -- This is where we write down `g`!
          refl, },
        apply_instance, },
      { -- Have to remember that singular chains are free.
        exact singular_chains_free X, }, },

  },
end
